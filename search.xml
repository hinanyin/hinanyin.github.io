<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>v8 引擎简介</title>
      <link href="/articles/front-tech/v8/"/>
      <url>/articles/front-tech/v8/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h2><h3 id="Chrome-多进程架构"><a href="#Chrome-多进程架构" class="headerlink" title="Chrome 多进程架构"></a>Chrome 多进程架构</h3><p><img src="/images/front-tech/v8_1.gif" alt=""></p><ul><li>浏览器进程: 地址栏，书签，回退与前进按钮，以及处理 web 浏览器中网络请求、文件访问等不可见的部分</li><li>渲染进程: 控制标签页内网站渲染</li><li>插件进程: 控制站点使用的任意插件，如 Flash</li><li>GPU 进程: 处理独立于其它进程的 GPU 任务</li></ul><blockquote><p>多渲染进程带来的优势</p></blockquote><ul><li>稳定性: 一般情况下，浏览器会给每个标签页分配一个渲染进程，从而保证每个标签页能独立运行，互不影响。但由于受设备的内存及 CPU 能力影响，<code>当 Chrome 运行时达到限制时，会开始在同一站点的不同标签页上运行同一进程</code></li><li>沙箱化: 限制与保护进程的特定权限与能力</li></ul><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><blockquote><p>内核即 <code>Rendering Engine</code>，渲染引擎，负责对网页语法的解析，比如 HTML、JavaScript，并渲染到网页上</p></blockquote><h4 id="排版渲染引擎"><a href="#排版渲染引擎" class="headerlink" title="排版渲染引擎"></a>排版渲染引擎</h4><ul><li><code>KHTML</code>: HTML 网页排版引擎之一，由 KDE 所开发。后来经苹果扩展开源，衍生出 <code>WebCore</code> 及 <code>WebKit</code> 引擎</li><li><code>WebCore</code>: 如 Safari 浏览器</li></ul><h4 id="内核引擎"><a href="#内核引擎" class="headerlink" title="内核引擎"></a>内核引擎</h4><ul><li><code>Trident</code>: IE</li><li><code>Gecko</code>: Firefox</li><li><code>WebKit</code>: 诞生于 1998 年，并于 2005 年由 Apple 公司开源，Safari、Google Chrome、傲游 3、猎豹浏览器、百度浏览器</li><li><code>Presto</code>: 早期 Opera 的内核，现在主要是在手机平台 Opera mini</li><li><code>Chromium</code>: 基于 webkit，早期 chrome 的内核，那时候还叫 Chromium 浏览器</li><li><code>Blink</code>: 基于 Webkit2 分支，新版 Opera (15 及往后版本) 和移动端上使用较多</li></ul><p><img src="/images/front-tech/v8_2.png" alt=""></p><ul><li><code>WebKit Embedding API</code>: 负责浏览器 UI 与 WebKit 进行交互的部分</li><li><code>WebKit Ports</code>: 让 Webkit 更加方便的移植到各个操作系统、平台上，提供的一些调用 Native Library 接口</li></ul><h2 id="JavaScript-引擎"><a href="#JavaScript-引擎" class="headerlink" title="JavaScript 引擎"></a>JavaScript 引擎</h2><blockquote><p>将 js 代码编译成 CPU 认识的指令集，同时负责执行以及管理内存</p><ul><li>解释形语言(如 js): 由引擎直接读取源码，一边编译一边执行，效率相对较低</li><li>编译型语言(如 c++): 将源码直接编译成可直接执行的代码，执行效率更高</li></ul></blockquote><ol><li><p><code>V8</code></p><ul><li>由 Google 开发，广泛应用于 Chrome 浏览器和 Node.js 环境</li><li>采用<code>即时编译</code> (JIT just in time compilation) 技术，<strong>混合编译执行和解释执行这两种手段</strong>, 启动过程中采用解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码。同时，V8 具备强大的内存管理和垃圾回收机制，可有效减少内存泄漏问题</li><li>适用于对性能要求较高的 Web 应用开发、服务器端开发 (如 Node.js 项目) 等</li></ul></li><li><p><code>JavaScriptCore</code></p><ul><li>由 Apple 开发，是 Safari 浏览器的默认引擎</li><li>高度优化，具有出色的性能和较低的内存占用。JavaScriptCore 支持 ECMAScript 标准的最新特性，并且与苹果的操作系统和设备紧密集成</li><li>主要用于苹果的 Safari 浏览器、iOS 系统中的 WebView 以及其他基于 WebKit 内核的浏览器和应用程序</li></ul></li><li><p><code>SpiderMonkey</code></p><ul><li>由 Mozilla 开发，最早的 JavaScript 引擎之一，Firefox 浏览器的默认引擎</li><li>对 ECMAScript 标准的支持非常全面，并且不断引入新的特性和优化。具备良好的调试和开发工具支持，方便开发者进行代码调试和性能优化</li><li>主要应用于 Firefox 浏览器及其相关的开发项目</li></ul></li><li><p><code>Chakra</code></p><ul><li>由微软开发，曾用于 Internet Explorer 和 Microsoft Edge 浏览器 (旧版)</li><li>在 Windows 平台上具有良好的性能和兼容性，支持许多微软特有的 JavaScript 扩展</li><li>主要用于微软的浏览器和相关的 Windows 应用程序。不过，新版的 Microsoft Edge 已经切换到了基于 Chromium 的架构，使用 V8 引擎</li></ul></li><li><p><code>Hermes</code></p><ul><li>由 Facebook 开发，专为 React Native 应用设计</li><li>体积小、启动速度快，能够显著减少应用的启动时间和内存占用。采用了静态编译技术，将 JavaScript 代码编译成字节码，在运行时直接执行字节码，提高了执行效率</li><li>主要用于 React Native 开发的移动应用</li></ul></li></ol><p><img src="/images/front-tech/v8_7.webp" alt=""></p><h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><p><img src="/images/front-tech/v8_3.png" alt=""></p><h3 id="编译及运行"><a href="#编译及运行" class="headerlink" title="编译及运行"></a>编译及运行</h3><p><img src="/images/front-tech/v8_6.webp" alt=""></p><h4 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h4><blockquote><p>Parser 将 JS 源码转换为 AST，然后 Ignition 将 AST 转换为 Bytecode，最后 TurboFan 将 Bytecode 转换为经过优化的 Machine Code<br>Machine Code 可能会被还原成 Bytecode，此过程称为 <code>优化回滚</code> (Deoptimization)。比如 Ignition 收集的信息是错误的<br><code>热点标记</code>：如果代码被调用多次 (<code>反馈向量</code>标记)，则可能会被识别为热点代码，且 Ignition 收集的类型信息证明可以进行优化编译的话，这时 TurboFan 则会将 Bytecode 编译为 Optimized Machine Code (已优化的机器码)，以提高代码的执行性能</p></blockquote><p><img src="/images/front-tech/v8_4.png" alt=""></p><ol><li><p>scanner</p><ul><li>词法分析器，将 js 源码转换成有意义的词 (token) 形成的数组</li></ul></li><li><p>parser</p><ul><li>语法分析器，将 token 数组按照特定的格式转换成对象，供 Ignition (解释器) 引擎生成字节码</li></ul></li><li><p>Ignition</p><ul><li>解释器，负责将 AST 转换为 Bytecode，解释执行 Bytecode；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；解释器执行时主要有四个模块，内存中的字节码、寄存器、栈、堆<ul><li>基于栈 (Stack-based): 保存函数参数、中间运算结果、变量等。比如 Java 虚拟机，.Net 虚拟机，还有早期的 V8 虚拟机</li><li>基于寄存器 (Register-based): 保存参数、中间计算结果。现在的 V8 虚拟机</li></ul></li></ul></li><li><p>TurboFan</p><ul><li>编译器，利用 Ignition 所收集的类型信息，将 Bytecode 转换为优化的汇编代码</li></ul></li><li><p>Orinoco</p><ul><li>垃圾回收模块，将程序不再需要的内存空间回收</li></ul></li></ol><h4 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h4><p><img src="/images/front-tech/v8_5.png" alt=""></p><ul><li>Execution: 辅助类，包含一些重要函数，辅助进入和执行 js 代码</li><li>JSFunction: 需要执行的 js 函数表示类</li><li>Runtime: 运行本地代码的辅助类，主要提供运行时所需的辅助函数，如属性访问、类型转换、编译、算术、位操作、比较、正则表达式等</li><li>Heap: 运行本地代码需要使用的内存堆类</li><li>MarkCompactCollector: 垃圾回收机制的主要实现类，用来标记、清除和整理等基本的垃圾回收过程</li><li>SweeperThread：负责垃圾回收的线程</li></ul><h3 id="三大核心优化技术"><a href="#三大核心优化技术" class="headerlink" title="三大核心优化技术"></a>三大核心优化技术</h3><ol><li><strong>惰性编译</strong>: 快速生成可执行的中间代码 (字节码)</li><li><strong>内联缓存</strong>: 在字节码执行期间，记录对象属性的隐藏类和偏移量</li><li><strong>隐藏类</strong>: 为内联缓存提供数据结构支持，实现属性快速访问</li><li>热点代码最终被 <strong>优化编译器</strong> 转换为高效机器码</li></ol><div class="tip bell"><p>性能优化建议</p></div><ol><li><p>保持对象结构稳定: 避免在构造函数外动态增删属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">const</span> p = &#123;&#125;;</span><br><span class="line">p.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">p.<span class="property">y</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>维持类型一致性: 避免同一属性存储不同类型数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐（破坏 IC）</span></span><br><span class="line">obj.<span class="property">field</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">field</span> = <span class="string">&quot;text&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>利用函数内联: 小函数更易被内联优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125; <span class="comment">// 可能被内联</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="惰性编译"><a href="#惰性编译" class="headerlink" title="惰性编译"></a>惰性编译</h4><blockquote><p>Lazy Compilation</p></blockquote><ul><li>延迟编译：不一次性编译所有代码，而是在函数首次被执行时才编译</li><li>分层编译：先快速生成低优化字节码 (Ignition 解释器)，热点代码再优化 (TurboFan 编译器)</li><li>启动速度快：避免编译未使用的代码 (如大型库中未调用的函数)；节省内存</li></ul><h4 id="内联缓存"><a href="#内联缓存" class="headerlink" title="内联缓存"></a>内联缓存</h4><blockquote><p>Inline Cache (IC): 通过缓存对象操作的类型信息，将动态语言的特征访问转化为接近静态语言的效率，加速查找效率及运算</p></blockquote><ul><li>缓存对象属性的访问信息：针对同一属性的多次访问，直接复用之前的查找结果。减少了属性查找时间，但如果<code>属性类型变化会破坏优化</code>，比如属性从数字类型变成字符串类型，则需要重新查找隐藏类和偏移量</li><li>多态优化：跟踪不同类型的对象访问路径 (单态/多态/超态)<ul><li><code>单态内联缓存</code>: 传参结构固定的情况，所有 obj 为同一隐藏类，速度最快</li><li><code>多态内联缓存</code>: 传参结构不固定的情况，2-4 种隐藏类，速度较快</li><li><code>超态内联缓存</code>: 传参结构不固定的情况，&gt;4 种隐藏类，退化为哈希查找，速度慢<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超态示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">polymorphic</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">x</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用5种不同隐藏类的对象调用</span></span><br><span class="line">[A, B, C, D, E].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cls</span>) =&gt;</span> <span class="title function_">polymorphic</span>(<span class="keyword">new</span> <span class="title function_">cls</span>()));</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>多级处理状态</p></blockquote><div class="table-container"><table><thead><tr><th>状态</th><th>处理方式</th><th>性能</th><th>触发条件</th></tr></thead><tbody><tr><td>未初始化</td><td>完整查找属性</td><td>慢 (100ms)</td><td>首次执行</td></tr><tr><td>预单态</td><td>记录 1 种隐藏类</td><td>较快</td><td>第 2 次相同类型访问</td></tr><tr><td>单态</td><td>直接使用缓存偏移量</td><td>极快 (1ms)</td><td>多次相同类型访问</td></tr><tr><td>多态</td><td>检查 2-4 种缓存类型</td><td>快</td><td>少量不同类型交替</td></tr><tr><td>超态</td><td>退化为哈希查找</td><td>慢</td><td>&gt;4 种类型</td></tr><tr><td>泛型</td><td>完全通用处理</td><td>最慢</td><td>无法预测的复杂情况</td></tr></tbody></table></div><h5 id="反馈向量"><a href="#反馈向量" class="headerlink" title="反馈向量"></a>反馈向量</h5><blockquote><p>IC 的核心数据结构，系统性地收集和优化类型反馈信息，实现高性能属性访问的关键</p></blockquote><ul><li><strong>动态类型记录器</strong>: 在字节码执行期间持续记录操作数的类型信息</li><li><strong>优化决策依据</strong>: 为 TurboFan 编译器提供热代码的类型特征</li><li><strong>内联缓存载体</strong>: 存储 IC 的状态和跳转目标地址</li><li><strong>热代码编译触发</strong>: 当反馈向量显示某操作达到阈值，触发 TurboFan 热点优化</li></ul><blockquote><p>反馈向量结构</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// V8源码中的关键结构（简化）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FeedbackVector</span> &#123;</span><br><span class="line">  uint32_t slot_count_;       <span class="comment">// 槽位数量</span></span><br><span class="line">  <span class="title class_">FeedbackSlot</span>* slots_;       <span class="comment">// 反馈槽数组</span></span><br><span class="line">  <span class="title class_">MaybeObject</span>* metadata_;     <span class="comment">// 关联的元数据</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>槽位类型</th><th>记录内容</th><th>对应操作</th></tr></thead><tbody><tr><td>LOAD_IC</td><td>属性加载的隐藏类和偏移量</td><td>obj.property</td></tr><tr><td>STORE_IC</td><td>属性存储的值信息</td><td>obj.property = val</td></tr><tr><td>CALL_IC</td><td>函数调用目标</td><td>func()</td></tr><tr><td>BINARY_OP_IC</td><td>运算操作数类型</td><td>a + b</td></tr></tbody></table></div><blockquote><p>属性访问优化过程</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getProp</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">x</span>; <span class="comment">// IC slot记录obj的类型信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次执行：未初始化状态</span></span><br><span class="line"><span class="title function_">getProp</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;); <span class="comment">// 记录隐藏类C1和偏移量0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次执行：单态状态</span></span><br><span class="line"><span class="title function_">getProp</span>(&#123; <span class="attr">x</span>: <span class="number">2</span> &#125;); <span class="comment">// 快速路径直接访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不同类型对象：转为多态</span></span><br><span class="line"><span class="title function_">getProp</span>(&#123; <span class="attr">x</span>: <span class="string">&quot;str&quot;</span> &#125;); <span class="comment">// 添加新类型到反馈向量</span></span><br></pre></td></tr></table></figure><blockquote><p>反馈向量内存布局</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FeedbackVector [0x1a50]</span><br><span class="line">├── Slot 0: LOAD_IC</span><br><span class="line">│   ├── Map: 0x1b20 (HiddenClass C1)</span><br><span class="line">│   └── Offset: 12</span><br><span class="line">├── Slot 1: CALL_IC</span><br><span class="line">│   └── Target: function@0x2c10</span><br><span class="line">└── Slot 2: BINARY_OP_IC</span><br><span class="line">    ├── Lhs: SMALL_INTEGER</span><br><span class="line">    └── Rhs: STRING</span><br></pre></td></tr></table></figure><h4 id="隐藏类"><a href="#隐藏类" class="headerlink" title="隐藏类"></a>隐藏类</h4><blockquote><p>Hide Class: 旨在将 JavaScript 中的<code>对象静态化</code>，提升对象的属性访问速度。假设对象创建好了之后就不会添加和删除属性，从而给对象创建隐藏类。在查找属性时会先去隐藏类中查找该属性相对于它的对象的偏移量，加上属性类型，直接从内存中取出属性值</p></blockquote><ol><li><p>动态创建对象的内存布局描述 (即反馈向量中的 <code>map</code> 属性)：相同结构的对象 (<code>相同的属性名称</code>、<code>相等的属性个数</code>)共享隐藏类 (map 指向同一个隐藏类)，记录属性偏移量，通过偏移量直接定位内存地址。</p></li><li><p>转换机制：对象属性变化时，隐藏类会按规则转换或者直接重构</p><ul><li><code>隐藏类转换</code>: 隐藏类通过<code>链式转换</code>来记录对象结构的变化。每个隐藏类记录当前对象的结构，并包含指向可能转换路径的指针。<code>相同修改路径</code>的对象会共享隐藏类链</li><li><code>重构隐藏类</code>: 当对象结构发生<code>非线性变化</code>时，转换链会断裂，触发完全重建。比如删除属性、动态属性添加顺序不一致 (属性添加顺序不同会生成不同的隐藏类链)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录转换路径</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">x</span> = <span class="number">1</span>; <span class="comment">// 隐藏类 C0 → C1（添加属性 x）</span></span><br><span class="line">obj.<span class="property">y</span> = <span class="number">2</span>; <span class="comment">// 隐藏类 C1 → C2（添加属性 y），复用上一步的转换路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除属性</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">x</span>; <span class="comment">// 隐藏类退化为慢路径（哈希表模式）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态属性添加顺序不一致</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObj</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  obj[a] = <span class="number">1</span>; <span class="comment">// 隐藏类依赖 a/b 的值</span></span><br><span class="line">  obj[b] = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createObj</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>); <span class="comment">// 隐藏类 C0 → C1 → C2</span></span><br><span class="line"><span class="title function_">createObj</span>(<span class="string">&quot;y&quot;</span>, <span class="string">&quot;x&quot;</span>); <span class="comment">// 触发另一条隐藏类链</span></span><br></pre></td></tr></table></figure></li><li><p>最佳实践</p><ul><li>使用字面量初始化对象时，保证属性的顺序一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x; <span class="comment">// 所有实例共享相同隐藏类链</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>避免删除属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">property</span>;</span><br><span class="line"><span class="comment">// 推荐：设为 null 或 undefined</span></span><br><span class="line">obj.<span class="property">property</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li>提前初始化所有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优于动态添加</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="literal">null</span>, <span class="attr">y</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">obj.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">obj.<span class="property">y</span> = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="V8-与-JS"><a href="#V8-与-JS" class="headerlink" title="V8 与 JS"></a>V8 与 JS</h3><h4 id="对象内属性"><a href="#对象内属性" class="headerlink" title="对象内属性"></a>对象内属性</h4><ul><li><strong>排序属性</strong>: 对象中的数字属性，V8 中被称为 elements，按照顺序存放</li><li><strong>常规属性</strong>：字符串属性，称为 properties，按照创建时的顺序保存</li><li>使用两个线性数据结构来分别保存排序属性和常规属性，同时 v8 将部分常规属性直接存储到对象本身，称为<code>对象内属性</code> (in-object properties)，不过此类属性一般有限 (10-20 个)</li></ul><h4 id="快属性-慢属性"><a href="#快属性-慢属性" class="headerlink" title="快属性 / 慢属性"></a>快属性 / 慢属性</h4><ol><li><p>快属性: 保存在线性数据结构中的属性</p><ul><li>访问速度快，但是添加或删除属性效率较低</li></ul></li><li><p>慢属性: 如果一个对象的属性过多，对象内部会使用独立的非线性数据结构 (字典) 作为属性存储容器</p><ul><li>读取速度慢，为提升查找效率，V8 在对象中添加了两个隐藏属性，排序属性和常规属性</li></ul></li><li><p>如果对象中的属性过多，或者存在反复添加或者删除属性的操作，V8 会将线性的存储模式 (快属性)降级为非线性的字典存储模式 (慢属性)，虽然降低了查找速度，但是提升了修改对象的属性的速度</p></li></ol><h4 id="动态、静态作用域"><a href="#动态、静态作用域" class="headerlink" title="动态、静态作用域"></a>动态、静态作用域</h4><ul><li><strong>静态作用域</strong>: <code>静态语言</code>，符号之间的引用关系能够根据程序代码在编译时就确定清楚，运行时不变，由程序代码决定，大多数语言都是静态作用域的。直接通过<code>偏移量</code>查询来查询对象的属性值，执行效率高</li><li><strong>动态作用域</strong>: <code>动态语言</code>，变量引用跟变量声明不是在编译时就确定了的。运行时，在运行环境中动态地找一个相同名称的变量。在 macOS 或 Linux 中用的 bash 脚本语言，是动态作用域的</li></ul><h4 id="惰性解析"><a href="#惰性解析" class="headerlink" title="惰性解析"></a>惰性解析</h4><ol><li><p>比如在 <code>预解析</code> 阶段</p><ul><li><strong>加速代码的启动速度</strong></li><li>延迟解析函数体: 解析器在解析的过程中，如果遇到函数声明，会跳过函数内部的代码，并不会为其生成 AST 和字节码，而仅仅生成顶层代码的 AST 和字节码。避免了过多的代码增加编译时间和防止中间代码一直占用内存</li></ul></li><li><p>最佳实践</p><ul><li>模块化组织代码: 保持函数职责单一</li><li>避免 IIFE 滥用: 立即执行函数会强制全解析</li><li>合理使用动态导入</li></ul></li></ol><h4 id="预解析-全解析"><a href="#预解析-全解析" class="headerlink" title="预解析 / 全解析"></a>预解析 / 全解析</h4><ol><li><p>预解析: Pre-Parser</p><ul><li><strong>跳过函数体</strong>: 快速扫描函数签名和语法结构，如果有语法错误则向外抛出</li><li><strong>收集变量声明</strong>: 检查函数内部是否引用了外部变量，如果有预解析器会将栈中的变量复制到堆中，在下次执行到该函数的时候，直接使用堆中的引用，解决闭包所带来的问题</li><li>不生成 AST 或字节码</li><li><strong>位置标记</strong>: 记录函数体在源码中的位置范围</li></ul></li><li><p>全解析: Full Parser</p><ul><li>当函数首次被调用时、作为构造函数时、动态使用时触发</li><li>生成完整 AST 和字节码</li><li>进行作用域分析</li></ul></li></ol><h3 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><blockquote><p>后进先出，同时栈空间连续，在需要分配空间和销毁空间操作时，只需移动下指针，非常适合管理函数调用<br>保存基本数据类型及对象指针，管理 js 函数调用</p></blockquote><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><blockquote><p>一种树形的存储结构，用来存储对象类型的离散的数据</p></blockquote><ol><li><p><code>new space</code>: 新生代内存区</p><ul><li>分为两个 semispace, from space 和 to space, 每个大小默认为 16M, 所以 new space 通常大小为 32M, 新创建的对象、临时变量、闭包变量、短生命周期的数据等会放入其中一个处于工作状态的 space</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; <span class="comment">// 初始分配在新生代</span></span><br></pre></td></tr></table></figure></li><li><p><code>old space</code>: 老生代内存区</p><ul><li>通常会持久化的保存对象, 分为两个区域, old pointer space 和 old data space, 分别用来存放 GC 后还存活的指针信息和数据信息。一般有长期存活的对象、大对象、全局变量、闭包长期引用的变量、DOM 相关对象等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">cache</span> = &#123; <span class="attr">data</span>: <span class="string">&quot;长期存储&quot;</span> &#125;; <span class="comment">// 长期引用的对象，最终晋升到老生代</span></span><br><span class="line"><span class="keyword">const</span> bigArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>); <span class="comment">// 大数组直接进入老生代</span></span><br></pre></td></tr></table></figure></li><li><p><code>large object space</code>: 大对象区</p><ul><li>存放体积超越其他区大小的对象, 主要为了避免大对象的拷贝, 使用该空间专门存储大对象</li></ul></li><li><p><code>code Space</code>: 代码区</p><ul><li>存放代码对象, 最大限制为 512M, 也是唯一拥有执行权限的内存</li></ul></li><li><p><code>Cell space, property cell space, map space</code>: 单元区, 属性单元区, Map 区</p><ul><li>Map 空间存放对象的 Map 信息 (即隐藏类 Hiden Class) 最大限制为 8M; 每个 Map 对象固定大小, 为了快速定位, 单独出空间</li></ul></li></ol><p><img src="/images/front-tech/v8_8.png" alt=""></p><div class="tip success"><p>new space 和 old space</p></div><ol><li><p>new space 置换过程</p><ul><li>假设新创建对象分配到 from space</li><li>程序继续执行不断向 from space 中添加新的对象信息, 将要达到存储上限时, V8 垃圾回收机制开始清理 from 中不再被使用的对象 (此时称 <code>Minor GC</code>，<code>Eden</code> 区将满时触发，<code>Survivor</code> 区将满时不会触发，速度快，但会暂停主线程 (<code>Stop-the-World</code>) )</li><li>清理后将所有仍然存活的对象复制到 to space, 然后删除所有 from space 中的对象</li><li>此时程序继续执行向 to space 中添加新的对象信息, 重复上述过程</li></ul></li><li><p>old space</p><ul><li>程序运行一段时间后新生代内存区中仍存活的对象，终于满足了晋升的条件，转移到了老生代内存区</li><li>再经过一段时间, 对象不再被引用, 同时老生代内存区域空间被占用了很多的空间, V8 会在老生代里面进行遍历，给这些对象打上标记</li><li>为避免一次回收占用太多时间, V8 会分批回收有标记的待清理的对象 (此时称 <code>Major GC / Full GC</code>，会遍历整个堆，可能造成明显卡顿)</li></ul></li></ol><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><blockquote><p><code>代际假说</code> (The Generational Hypothesis) 是垃圾回收领域中的一个重要术语， V8 的垃圾回收的策略也是建立在该假说的基础之上</p><ul><li>大部分对象在内存中存在的时间很短，很多对象一经分配内存，很快就变得不可访问</li><li>不死的对象，会活的更久，比如全局的 window、DOM、Web API 等对象</li></ul></blockquote><h4 id="垃圾数据"><a href="#垃圾数据" class="headerlink" title="垃圾数据"></a>垃圾数据</h4><blockquote><p>从 GC Roots 对象出发，遍历 GC Root 中的所有对象，如果通过 GC Roots 没有遍历到的对象，则这些对象便是垃圾数据<br>通常的 GC Roots 对象</p><ul><li>全局的 <code>window</code> 对象，包括每个 iframe 中的</li><li>文档 DOM 树</li><li>存放在栈上的变量</li></ul></blockquote><h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><ol><li>通过<code>可访问性</code> (reachability) 算法，标记 GC Root 空间中的活动对象 (可访问的 reachable)和非活动对象 (不可访问的 unreachable)</li><li>回收非活动对象所占据的内存</li><li>针对主垃圾回收器做内存碎片整理</li></ol><h4 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h4><h5 id="副垃圾回收器"><a href="#副垃圾回收器" class="headerlink" title="副垃圾回收器"></a>副垃圾回收器</h5><blockquote><p><code>Scavenge</code>, 负责新生代区域的垃圾回收</p></blockquote><p>针对新生代的置换过程，随着程序的运行，某些对象一直在被使用会持续的积压在新生代区域，为了解决这个问题，V8 采用了 <code>晋升机制</code>，将满足条件的对象放到老生代内存区中存储，释放新生代内存区域的空间。有以下条件</p><ul><li>经历过一次 Scavenge 算法，且并未被标记清除的，也就是经过一次翻转置换操作的对象</li><li>在进行翻转置换时，被复制的对象大于 to space 空间的 25%</li></ul><h5 id="主垃圾回收器"><a href="#主垃圾回收器" class="headerlink" title="主垃圾回收器"></a>主垃圾回收器</h5><blockquote><p><code>Mark-Sweep</code> &amp; <code>Mark-Compact</code>, 负责老生代区域的垃圾回收, 通常会有在新生代晋升后的对象以及初始占用空间就很大的对象会存储在老生代内存区</p></blockquote><ol><li><code>Mark-Sweep</code>: 标记-清除。只需遍历存活对象，不移动内存，适合大多数情况，但是回收后会产生不连续的内存块，可能无法分配大对象；全堆扫描时，JS 主线程会暂停 (<code>Stop-the-World</code>)<ul><li>标记阶段：从根对象 (全局变量、活动函数栈等) 出发，递归遍历所有可访问的对象，并标记为“存活”</li><li>清除阶段：遍历整个堆内存，回收所有未被标记的对象，释放其内存</li></ul></li></ol><p><img src="/images/front-tech/v8_9.png" alt=""></p><ol><li><code>Mark-Compact</code>: 标记-整理。整理后内存连续，可分配更大对象，避免了碎片化可能产生的 <code>OOM</code> 问题。但是移动对象和更新引用比 Mark-Sweep 更耗时；需要计算新地址并更新所有引用<ul><li>标记阶段：与 <code>Mark-Sweep</code> 相同，先标记所有存活对象</li><li>整理阶段：将所有存活对象向一端移动，并更新引用地址，使剩余空间连续</li></ul></li></ol><h4 id="垃圾回收优化策略"><a href="#垃圾回收优化策略" class="headerlink" title="垃圾回收优化策略"></a>垃圾回收优化策略</h4><blockquote><p>为了优化垃圾回收产生的 <code>STW</code> 时间，V8 启动了代号为 <code>Orinoco</code> 的垃圾回收子系统来进行优化</p></blockquote><ol><li><p>Orinoco 的核心优化目标</p><ul><li>减少主线程停顿时间：避免长时间阻塞 JavaScript 执行</li><li>利用多核 CPU：通过并行和并发提高 GC 效率</li><li>分代回收策略：针对新生代和老生代采用不同算法</li></ul></li><li><p>Orinoco 的三大垃圾回收技术: <code>Parallel</code>, <code>Incremental</code>, <code>Concurrent</code></p></li><li><p>Orinoco 的分代回收策略</p></li></ol><div class="table-container"><table><thead><tr><th>分代</th><th>算法</th><th>Orinoco 优化</th><th>STW 时间</th></tr></thead><tbody><tr><td>新生代</td><td>Scavenge (复制算法)</td><td>并行回收 (多线程复制存活对象)</td><td>极短</td></tr><tr><td>老生代</td><td>Mark-Sweep-Compact</td><td>增量标记 + 并发标记/整理</td><td>显著减少</td></tr></tbody></table></div><h5 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h5><blockquote><p>并行回收。在主线程暂停 (STW) 期间，使用多个辅助线程同时执行垃圾回收任务<br>比如同时进行新生代 Scavenge 算法和老生代的标记阶段 (Marking)</p></blockquote><h5 id="Incremental"><a href="#Incremental" class="headerlink" title="Incremental"></a>Incremental</h5><blockquote><p>增量回收。针对一个大对象的回收，将完整的 GC 任务拆分为多个小任务，交替执行 GC 和 JavaScript 代码<br>老生代的标记阶段 (Marking)<br>可以避免长时间卡顿，但是需要处理两个问题</p></blockquote><ol><li><p>如何保存上一次的扫描结果：三色标记位 + <strong>标记工作表</strong></p><ul><li>三种颜色：白色(00)、灰色(10)、黑色(11)</li><li>初始状态，所有对象均为<code>白色</code>：未被根节点引用到的对象</li><li>当 GC 发现一个对象被引用，将会标记为<code>灰色</code>，并将其推入到<strong>标记工作表</strong>中</li><li><strong>标记工作表</strong>访问所有存在的<code>灰色</code>对象及其所有子对象，结束后会将该对象标记为<code>黑色</code></li><li>持续向表中添加<code>灰色</code>对象</li><li>处理完表中的<code>灰色</code>对象直至没有灰色对象，即所有对象均为白色或黑色，之后清理掉所有<code>白色</code>的对象</li></ul></li><li><p>如何处理标记好的数据被主线程修改：写屏障 <code>Write Barrier</code></p><ul><li>避免漏标 (Missed Mark) 和错标 (False Retention)</li><li>增量写屏障：强制让<code>黑色</code>对象不能直接指向<code>白色</code>对象，将新写入的对象从初始的白色直接变为灰色，<strong>标记工作表</strong> 继续工作</li><li>并发写屏障：使用<strong>记忆集 (Remembered Set)</strong>记录跨代引用 (如老生代对象引用新生代对象)</li><li>卡表 (Card Table)：将堆内存分块 (如 512B 一块)，通过卡表标记脏块 (含引用变化的块)。减少写屏障开销，只需标记卡表，GC 时仅扫描脏块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 漏标</span></span><br><span class="line"><span class="keyword">let</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;; <span class="comment">// 黑色（已标记）</span></span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">name</span>: <span class="string">&quot;B&quot;</span> &#125;; <span class="comment">// 白色（未标记）</span></span><br><span class="line">a.<span class="property">ref</span> = b; <span class="comment">// 如果 GC 不感知此修改，b 可能被误回收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错标</span></span><br><span class="line"><span class="keyword">let</span> c = &#123; <span class="attr">name</span>: <span class="string">&quot;A&quot;</span> &#125;; <span class="comment">// 色（已标记）</span></span><br><span class="line">c = <span class="literal">null</span>; <span class="comment">// 如果 GC 不感知此修改，c 无法回收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化的增量写屏障逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">writeBarrier</span>(<span class="params">obj, field, newValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 实际执行写操作</span></span><br><span class="line">  obj[field] = newValue;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 如果 GC 正在标记阶段，处理引用变化</span></span><br><span class="line">  <span class="keyword">if</span> (gcPhase === <span class="string">&quot;MARKING&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isMarked</span>(obj) &amp;&amp; !<span class="title function_">isMarked</span>(newValue)) &#123;</span><br><span class="line">      <span class="comment">// 将新引用的对象标记为灰色（待扫描）</span></span><br><span class="line">      <span class="title function_">markAsGrey</span>(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Concurrent"><a href="#Concurrent" class="headerlink" title="Concurrent"></a>Concurrent</h5><blockquote><p>并发回收。完全在后台线程执行 GC，主线程继续运行 JavaScript<br>老生代的标记阶段 (Marking) 和内存整理 (Compaction)<br>主线程几乎无感知，但是需要解决并发冲突 (如对象被 JavaScript 修改时，GC 线程需同步)</p></blockquote><p><img src="/images/front-tech/v8_10.png" alt=""></p><h3 id="协程-线程-进程"><a href="#协程-线程-进程" class="headerlink" title="协程 / 线程 / 进程"></a>协程 / 线程 / 进程</h3><ul><li>Process: <strong>操作系统资源分配的基本单位</strong>，每个进程有独立的内存空间 (代码、数据、堆栈), 进程间通信(IPC)需要通过 管道、消息队列、共享内存、Socket 等方式</li><li>Thread: <strong>CPU 调度的基本单位</strong>，属于同一进程的线程共享内存空间, 线程间可直接读写同一进程的变量，但需要同步机制 (如锁、信号量)</li><li>Coroutine: <strong>用户态轻量级线程</strong>，由程序控制调度 (而非操作系统), 协程在单线程内实现任务切换，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协，通过 <code>yield/resume</code> 主动让出执行权。是 generator、async / await 实现异步编程的核心逻辑，await 暂停协程，Promise.resolve 后恢复协程</li></ul><div class="table-container"><table><thead><tr><th>特性</th><th>进程</th><th>线程</th><th>协程</th></tr></thead><tbody><tr><td>调度单位</td><td>操作系统</td><td>操作系统</td><td>用户程序</td></tr><tr><td>内存隔离</td><td>完全隔离</td><td>共享同一进程内存</td><td>共享同一线程内存</td></tr><tr><td>上下文切换成本</td><td>高 (需切换页表等)</td><td>中 (需切换寄存器)</td><td>极低 (仅切换局部变量)</td></tr><tr><td>通信方式</td><td>IPC (管道、Socket 等)</td><td>共享内存 (需同步)</td><td>直接共享变量</td></tr><tr><td>多核并行能力</td><td>是</td><td>是</td><td>否 (需结合多线程)</td></tr><tr><td>典型应用</td><td>Chrome 多标签页</td><td>Java 多线程服务器</td><td>Go 的 goroutine</td></tr></tbody></table></div><h3 id="机器码-字节码"><a href="#机器码-字节码" class="headerlink" title="机器码 / 字节码"></a>机器码 / 字节码</h3><blockquote><p>现阶段的 V8 采用基于寄存器的编译器，带有一个累加器 (accumulator)，通过累加器来暂存中间变量</p></blockquote><p>早期的 V8 为了提升代码的执行速度，直接将 JavaScript 源代码编译成了没有优化的二进制机器代码，如果某一段二进制代码执行频率过高，那么 V8 会将其标记为热点代码，热点代码会被优化编译器优化，优化后的机器代码执行效率更高。但存在致命问题，于是引入中间字节码</p><ul><li>时间问题：编译时间过久，影响代码启动速度</li><li>空间问题：缓存编译后的二进制代码占用更多的内存</li></ul><p>字节码优势</p><ul><li>解决启动问题：生成字节码的时间很短</li><li>解决空间问题：相较于机器代码，字节码体积减小很多，缓存字节码很大程度上降低了内存的使用</li><li>代码架构清晰：简化程序的复杂度，使得 V8 移植到不同的 CPU 架构平台更加容易</li></ul><h4 id="常用字节码指令"><a href="#常用字节码指令" class="headerlink" title="常用字节码指令"></a>常用字节码指令</h4><ul><li>Ldar: Load accumulator Register, 表示将寄存器中的值加载到累加器中</li><li>Star: Store accumulator Register, 表示把累加器中的值保存到某个寄存器中</li><li>Add: <strong>Add a0 [0]</strong>, 从 a0 寄存器加载值并将其与累加器中的值相加，将结果再次放入累加器。<strong>[0]</strong> 是反馈向量槽 (feedback vector slot)，一个数组，解释器将解释执行过程中的一些数据类型的分析信息都保存在这个反馈向量槽中了，目的是给 TurboFan 优化编译器提供优化信息，很多字节码都会为反馈向量槽提供运行时信息</li><li>LdaSmi: 将小整数 (Smi)加载到累加器寄存器中</li><li>Return: 结束当前函数的执行，并将控制权传回给调用方，返回累加器中的值</li></ul><h2 id="提升-JS-性能的技巧"><a href="#提升-JS-性能的技巧" class="headerlink" title="提升 JS 性能的技巧"></a>提升 JS 性能的技巧</h2><blockquote><p>V8 动态跟踪数组的元素类型，共 21 种内部表示</p></blockquote><div class="table-container"><table><thead><tr><th>种类</th><th>示例</th><th>优化等级</th></tr></thead><tbody><tr><td>PACKED_SMI_ELEMENTS</td><td>[1, 2, 3]</td><td>最高效</td></tr><tr><td>PACKED_DOUBLE_ELEMENTS</td><td>[1.1, 2.2]</td><td>次高效</td></tr><tr><td>PACKED_ELEMENTS</td><td>[‘a’, {}]</td><td>基础</td></tr><tr><td>HOLEY_ 变体*</td><td>[1, , ‘x’]</td><td>较低效</td></tr></tbody></table></div><ol><li>在构造函数里初始化所有对象的成员</li><li>总是以相同的次序初始化对象成员</li><li>尽量使用可以用 31 位有符号整数表示的数</li><li><p>为数组使用从 0 开始的连续的主键，保持数组密集型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推荐：预先填充undefined而非留空位</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">const</span> badArr = [<span class="number">1</span>, , <span class="number">3</span>]; <span class="comment">// 创建HOLEY数组</span></span><br></pre></td></tr></table></figure></li><li><p>不要预分配大数组 (比如元素占用内存大于 64K 字节)到其最大尺寸，可能从线性存储模式降级为字典存储模式，慢慢增大数组即可</p></li><li>不要删除数组里的元素，尤其是数字数组</li><li>不要加载未初始化或已删除的元素</li><li><p>对于固定大小的数组，使用 <code>array literals</code> 初始化 (初始化小额定长数组时，用字面量进行初始化)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量（推荐）：引擎可静态分析优化</span></span><br><span class="line"><span class="keyword">const</span> literal = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数（动态分配，优化受限）</span></span><br><span class="line"><span class="keyword">const</span> constructed = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> fromed = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure></li><li><p>小数组(小于 64k)在使用之前先预分配正确的尺寸</p></li><li>请勿在数字数组中存放非数字的值(对象)</li><li><p>尽量使用单一类型 (monomorphic) 而不是多类型 (polymorphic) (如果通过非字面量进行初始化小数组时，切勿触发类型的重新转换)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保持单一元素类型（最高效）</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// PACKED_SMI_ELEMENTS</span></span><br><span class="line">nums.<span class="title function_">push</span>(<span class="number">4.5</span>); <span class="comment">// → PACKED_DOUBLE（性能损耗）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 混合类型会降级</span></span><br><span class="line"><span class="keyword">const</span> mixed = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>]; <span class="comment">// → PACKED_ELEMENTS</span></span><br></pre></td></tr></table></figure></li><li><p>不要使用 try{} catch{} (如果存在 try/catch 代码快，则将性能敏感的代码放到一个嵌套的函数中)</p></li><li>在优化后避免在方法中修改隐藏类</li></ol><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><blockquote><p>包含空位 (holes) 的数组，会引发显著的性能下降</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式空位</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, , <span class="number">3</span>]; <span class="comment">// 索引1处为空位</span></span><br><span class="line"><span class="keyword">const</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000</span>); <span class="comment">// 1000个空位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式产生空位</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">delete</span> arr3[<span class="number">1</span>]; <span class="comment">// 索引1变为空位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为稀疏数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> <span class="keyword">in</span> arr1); <span class="comment">// false（说明索引1是空位）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">hasOwnProperty</span>(<span class="number">500</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>性能问题</p></blockquote><ul><li>密集数组 (Packed): 连续内存块，访问复杂度为 O(1)</li><li>稀疏数组 (Holey): 哈希表/特殊标记，访问复杂度为 O(n)~O(1)，无法应用 SIMD 指令优化，一旦变为 HOLEY 类型，即使填充空位也无法恢复 PACKED 状态，隐藏类更加复杂，大程度增加 GC 扫描时间</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/441313455">详解 Chrome V8 引擎</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome 扩展</title>
      <link href="/articles/front-tech/chromePlugin/"/>
      <url>/articles/front-tech/chromePlugin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>浏览器插件，简单理解为一段脚本文件。通过 WEB 技术，结合 chrome 提供的相关 api，制作集成为一个可供浏览器直接运行的扩展程序。通常需要以下几个文件</p></blockquote><ul><li><code>manifest.json</code>: 插件的配置文件，定义插件的基本信息和权限</li><li><code>background.js</code>: 插件的后台脚本，负责执行后台任务</li><li><code>popup.html</code>: 用户点击插件图标时显示的界面</li><li><code>style.css</code>: 用于美化插件界面的样式表</li></ul><h2 id="开始制作"><a href="#开始制作" class="headerlink" title="开始制作"></a>开始制作</h2><blockquote><p>参考 <a href="https://developer.chrome.com/docs/extensions/get-started/tutorial/hello-world?hl=zh-cn">官网</a></p></blockquote><ol><li><code>manifest.json</code></li></ol><ul><li><p><code>manifest_version</code>: manifest 的版本，2 或者 3，浏览器会根据这个值去指定该版本拥有的功能。必须</p></li><li><p><code>name</code>: 名称。必须</p></li><li><p><code>version</code>: 版本。必须</p></li><li><p><code>icons</code>: 图标集合</p><ul><li><code>16</code>: 扩展程序页面和上下文菜单中的图标</li><li><code>32</code>: Windows 计算机通常需要此大小</li><li><code>48</code>: 显示在 “扩展程序” 页面上</li><li><code>128</code>: 会在安装过程中和 Chrome 应用商店中显示</li></ul></li><li><p><code>action</code>: 浏览器行为</p><ul><li><code>default_popup</code>: 点击扩展程序的操作图标时在弹出式窗口中显示的 HTML 网页</li><li><code>default_icon</code>: 声明 Chrome 扩展程序的操作图标，没有将 <code>name</code> 的第一个字符作为图标，也可以设置为 <code>icons</code> 集合形式</li></ul></li><li><p><code>background</code>: 插件的后台常驻程序，生命周期和浏览器的生命周期一样，独立运行，不与特定的网页关联。即使浏览器窗口关闭或者切换页面，background 脚本依然可以继续运行</p><ul><li><code>service_worker</code>: 使用 扩展程序的服务工作器 在后台监控浏览器事件，但无法访问 DOM</li><li><code>type</code>: 模块类型，例如 <code>module</code> 代表 es 模块</li></ul></li><li><p><code>content_scripts</code>: 插入到当前浏览器网页的脚本文件，可以访问 DOM</p><ul><li><code>matches</code>: 标记可让浏览器确定要将内容脚本注入哪些网站</li></ul></li><li><p><code>permissions</code>: 权限设置</p><ul><li><code>activeTab</code>: 授予扩展程序在有效标签页上临时执行代码的权限</li><li><code>scripting</code>: 授予 <code>scripting API</code> 权限</li><li><code>storage</code>: 授予 <code>chrome.storage API</code> 权限</li><li><code>alarms</code>: 授予 <code>chrome.alarms API</code> 权限</li></ul></li><li><p><code>host_permissions</code>: 如需从远程托管位置提取扩展程序提示，需要请求主机权限</p></li><li><p><code>commands</code>: 快捷键</p><ul><li><code>_execute_action</code>: 运行与 <code>action.onClicked()</code> 事件相同的代码</li></ul></li><li><p><code>minimum_chrome_version</code>: 如果插件需要浏览器版本支持，则可设置需要的最低版本</p></li><li><p><code>omnibox</code>: 地址栏事件监听器，当输入关键字后跟 Tab 键或空格时，Chrome 会根据存储空间中的关键字显示建议列表。<code>onInputChanged()</code> 事件负责填充建议，它会接受当前用户输入和 <code>suggestResult</code> 对象</p><ul><li><code>keyword</code>: 关键字</li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A Simple Extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a simple Chrome extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;16&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/icon-16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;32&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/icon-32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;48&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/icon-48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;128&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/icon-128.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon/avatar.png&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;service_worker&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scripts/background.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;activeTab&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host_permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://chrome.dev/f/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;content_scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;scripts/content.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;matches&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://developer.chrome.com/docs/extensions/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://developer.chrome.com/docs/webstore/*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_execute_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;suggested_key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ctrl+B&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mac&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Command+B&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;minimum_chrome_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;102&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;omnibox&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;api&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>点击扩展图标会优先处理弹出窗口的显示逻辑，即如果定义了 <code>default_popup</code>，会优先显示页面，从而导致 <code>service_worker</code> 中定义的 <code>chrome.action.onClicked</code> 事件不会执行，可以把相关逻辑添加在 <code>popup.js</code> 中引入</li></ol><h3 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h3><ol><li><p><code>popup.js</code> 和 <code>background.js</code> 通信:</p><ul><li><code>chrome.extension.getBackgroundPage()</code></li><li><code>chrome.extension.getViews(&#123;type:&#39;popup&#39;&#125;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// popup.js</span></span><br><span class="line"><span class="keyword">const</span> backend = chrome.<span class="property">extension</span>.<span class="title function_">getBackgroundPage</span>();</span><br><span class="line">backend.<span class="title function_">test</span>(); <span class="comment">// 访问 background 的函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="keyword">const</span> views = chrome.<span class="property">extension</span>.<span class="title function_">getViews</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;popup&quot;</span> &#125;);</span><br><span class="line"><span class="keyword">let</span> popup = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (views.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  popup = views[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 直接访问popup的函数</span></span><br><span class="line">  popup.<span class="title function_">test</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>content-scripts</code> 和 <code>background</code> 通信:</p><ul><li><code>chrome.runtime.sendMessage(message)</code>:</li><li><code>chrome.runtime.onMessage.addListener()</code>: 监听 <code>content-scripts</code> 发送的消息</li><li><code>chrome.tabs.query</code> + <code>chrome.tabs.sendMessage</code>: 主动给 <code>content-scripts</code> 发送消息</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content-scripts</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="title function_">sendMessage</span>(<span class="string">&quot;message content&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;from background:&quot;</span>, res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span> (<span class="params">message, sender, callback</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mesasge); <span class="comment">// meesage content</span></span><br><span class="line">  callback &amp;&amp; <span class="title function_">callback</span>(<span class="string">&quot;yes this from background&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// background.js</span></span><br><span class="line"><span class="comment">// &#123;active: true, currentWindow: true&#125; 表示查找当前屏幕下的active状态的tab;</span></span><br><span class="line">chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">sendMessage</span>(tabs[<span class="number">0</span>].<span class="property">id</span>, <span class="string">&quot;message content&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;from content:&quot;</span>, res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>popup.js</code> 和 <code>content-scripts</code> 通信:</p><ul><li><code>window.postMessage</code></li><li><code>window.addEventListener</code></li></ul></li></ol><h3 id="给网页添加脚本"><a href="#给网页添加脚本" class="headerlink" title="给网页添加脚本"></a>给网页添加脚本</h3><p><img src="/images/front-tech/cPlugin_1.png" alt=""></p><blockquote><p>content.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> article = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;article&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (article) &#123;</span><br><span class="line">  <span class="keyword">const</span> text = article.<span class="property">textContent</span>;</span><br><span class="line">  <span class="keyword">const</span> wordMatchRegExp = <span class="regexp">/[^\s]+/g</span>;</span><br><span class="line">  <span class="keyword">const</span> words = text.<span class="title function_">matchAll</span>(wordMatchRegExp);</span><br><span class="line">  <span class="keyword">const</span> wordCount = [...words].<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> readingTime = <span class="title class_">Math</span>.<span class="title function_">round</span>(wordCount / <span class="number">200</span>);</span><br><span class="line">  <span class="keyword">const</span> badge = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">  badge.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;color-secondary-text&quot;</span>, <span class="string">&quot;type--caption&quot;</span>);</span><br><span class="line">  badge.<span class="property">textContent</span> = <span class="string">`⏱️ <span class="subst">$&#123;readingTime&#125;</span> min read`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> heading = article.<span class="title function_">querySelector</span>(<span class="string">&quot;h1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> date = article.<span class="title function_">querySelector</span>(<span class="string">&quot;time&quot;</span>)?.<span class="property">parentNode</span>;</span><br><span class="line"></span><br><span class="line">  (date ?? heading).<span class="title function_">insertAdjacentElement</span>(<span class="string">&quot;afterend&quot;</span>, badge);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将脚本注入到当前活动的标签页"><a href="#将脚本注入到当前活动的标签页" class="headerlink" title="将脚本注入到当前活动的标签页"></a>将脚本注入到当前活动的标签页</h3><blockquote><p>background.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extensions = <span class="string">&quot;https://developer.chrome.com/docs/extensions&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> webstore = <span class="string">&quot;https://developer.chrome.com/docs/webstore&quot;</span>;</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">action</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="title function_">async</span> (tab) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (tab.<span class="property">url</span>.<span class="title function_">startsWith</span>(extensions) || tab.<span class="property">url</span>.<span class="title function_">startsWith</span>(webstore)) &#123;</span><br><span class="line">    <span class="keyword">const</span> prevState = <span class="keyword">await</span> chrome.<span class="property">action</span>.<span class="title function_">getBadgeText</span>(&#123; <span class="attr">tabId</span>: tab.<span class="property">id</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> nextState = prevState === <span class="string">&quot;ON&quot;</span> ? <span class="string">&quot;OFF&quot;</span> : <span class="string">&quot;ON&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> chrome.<span class="property">action</span>.<span class="title function_">setBadgeText</span>(&#123;</span><br><span class="line">      <span class="attr">tabId</span>: tab.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">text</span>: nextState,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextState === <span class="string">&quot;ON&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> chrome.<span class="property">scripting</span>.<span class="title function_">insertCSS</span>(&#123;</span><br><span class="line">        <span class="attr">files</span>: [<span class="string">&quot;css/style.css&quot;</span>],</span><br><span class="line">        <span class="attr">target</span>: &#123; <span class="attr">tabId</span>: tab.<span class="property">id</span> &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextState === <span class="string">&quot;OFF&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> chrome.<span class="property">scripting</span>.<span class="title function_">removeCSS</span>(&#123;</span><br><span class="line">        <span class="attr">files</span>: [<span class="string">&quot;css/style.css&quot;</span>],</span><br><span class="line">        <span class="attr">target</span>: &#123; <span class="attr">tabId</span>: tab.<span class="property">id</span> &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line">*<span class="selector-pseudo">:has</span>(<span class="selector-tag">article</span>),</span><br><span class="line"><span class="selector-tag">article</span>,</span><br><span class="line"><span class="selector-tag">article</span> * &#123;</span><br><span class="line">  <span class="attribute">display</span>: revert <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[role=<span class="string">&quot;navigation&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Service-Worker-处理事件"><a href="#使用-Service-Worker-处理事件" class="headerlink" title="使用 Service Worker 处理事件"></a>使用 Service Worker 处理事件</h3><blockquote><p>background.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置全局建议</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">&#123; reason &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (reason === <span class="string">&quot;install&quot;</span>) &#123;</span><br><span class="line">    chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123;</span><br><span class="line">      <span class="attr">apiSuggestions</span>: [<span class="string">&quot;tabs&quot;</span>, <span class="string">&quot;storage&quot;</span>, <span class="string">&quot;scripting&quot;</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">URL_CHROME_EXTENSIONS_DOC</span> =</span><br><span class="line">  <span class="string">&quot;https://developer.chrome.com/docs/extensions/reference/&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">NUMBER_OF_PREVIOUS_SEARCHES</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">omnibox</span>.<span class="property">onInputChanged</span>.<span class="title function_">addListener</span>(<span class="title function_">async</span> (input, suggest) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> chrome.<span class="property">omnibox</span>.<span class="title function_">setDefaultSuggestion</span>(&#123;</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&quot;Enter a Chrome API or choose from past searches&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123; apiSuggestions &#125; = <span class="keyword">await</span> chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>(<span class="string">&quot;apiSuggestions&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> suggestions = apiSuggestions.<span class="title function_">map</span>(<span class="function">(<span class="params">api</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">content</span>: api, <span class="attr">description</span>: <span class="string">`Open chrome.<span class="subst">$&#123;api&#125;</span> API`</span> &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">suggest</span>(suggestions);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">chrome.<span class="property">omnibox</span>.<span class="property">onInputEntered</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">  chrome.<span class="property">tabs</span>.<span class="title function_">create</span>(&#123; <span class="attr">url</span>: <span class="variable constant_">URL_CHROME_EXTENSIONS_DOC</span> + input &#125;);</span><br><span class="line">  <span class="title function_">updateHistory</span>(input);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Omnibox 输入并将其保存到 storage.local</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateHistory</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; apiSuggestions &#125; = <span class="keyword">await</span> chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>(<span class="string">&quot;apiSuggestions&quot;</span>);</span><br><span class="line">  apiSuggestions.<span class="title function_">unshift</span>(input);</span><br><span class="line">  apiSuggestions.<span class="title function_">splice</span>(<span class="variable constant_">NUMBER_OF_PREVIOUS_SEARCHES</span>);</span><br><span class="line">  <span class="keyword">return</span> chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; apiSuggestions &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch tip &amp; save in storage</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">updateTip</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://chrome.dev/f/extension_tips&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> tips = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">const</span> randomIndex = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * tips.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; <span class="attr">tip</span>: tips[randomIndex] &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ALARM_NAME</span> = <span class="string">&quot;tip&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createAlarm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> alarm = <span class="keyword">await</span> chrome.<span class="property">alarms</span>.<span class="title function_">get</span>(<span class="variable constant_">ALARM_NAME</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> alarm === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    chrome.<span class="property">alarms</span>.<span class="title function_">create</span>(<span class="variable constant_">ALARM_NAME</span>, &#123;</span><br><span class="line">      <span class="attr">delayInMinutes</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">periodInMinutes</span>: <span class="number">1440</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">updateTip</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createAlarm</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update tip once a day</span></span><br><span class="line">chrome.<span class="property">alarms</span>.<span class="property">onAlarm</span>.<span class="title function_">addListener</span>(updateTip);</span><br></pre></td></tr></table></figure><h4 id="Service-Worker-生命周期"><a href="#Service-Worker-生命周期" class="headerlink" title="Service Worker 生命周期"></a>Service Worker 生命周期</h4><ol><li><p>安装: 当从 Chrome 应用商店安装或更新服务工件，或者使用 chrome://extensions 页面加载或更新已解压缩的扩展程序时，系统就会进行安装。系统会按以下顺序触发三项事件</p><ul><li><code>ServiceWorkerRegistration.install</code>: Web Service Worker 的 install 事件</li><li><code>chrome.runtime.onInstalled</code>: 扩展程序的 onInstalled 事件，可以来设置状态或进行一次性初始化</li><li><code>ServiceWorkerRegistration.active</code>: 服务工件的 activate 事件，会在安装扩展程序后立即触发</li></ul></li><li><p>扩展程序启动:</p><ul><li><code>chrome.runtime.onStartup</code>: 当用户个人资料启动时，系统会触发事件，但不会调用任何服务工作器事件</li></ul></li><li><p>空闲和关停: 通常，当满足以下任一条件时，Chrome 会终止服务工件，针对失活情况，可使用 持久保存数据 (<code>chrome.storage API</code> / <code>CacheStorage API</code> / <code>IndexedDB API</code> ) 或者 设置 Chrome 最低版本</p><ul><li>无操作 30 秒后。接收事件或调用扩展程序 API 会重置此计时器</li><li>单个请求（例如事件或 API 调用）的处理时间超过 5 分钟时</li><li>fetch() 响应到达时间超过 30 秒</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode 插件</title>
      <link href="/articles/front-tech/vscodePlugin/"/>
      <url>/articles/front-tech/vscodePlugin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发一款设置 vsCode 背景图片的插件</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><p>参照 <a href="https://code.visualstudio.com/api/references/vscode-api">VSC 官方文档</a>, 安装相关依赖</p><ul><li>如果打包工具选择 <code>esbuild</code>, 可能会报错 <code>problemMatcher 引用无效: $esbuild-watch</code>, 此时安装插件 <code>esbuild Problem Matchers</code> 重新调试即可</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 脚手架</span></span><br><span class="line">npm install -g yo generator-code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">yo code</span><br></pre></td></tr></table></figure><blockquote><p>调试成功界面</p></blockquote><p><img src="/images/front-tech/vPlugin_1.png" alt=""></p><h3 id="关键-API"><a href="#关键-API" class="headerlink" title="关键 API"></a>关键 API</h3><ul><li><code>window.createStatusBarItem</code>: 创建底部状态栏按钮</li><li><code>window.registerWebviewViewProvider</code>: 创建侧边 webview 图标按钮</li><li><code>window.showInformationMessage</code>: 信息展示相关方法</li><li><code>window.onDidChangeActiveColorTheme</code>: 监听主题变化</li><li><code>window.createQuickPick</code>: 创建快捷选项列表</li><li><code>commands.registerCommand</code>: 注册指令</li><li><code>commands.executeCommand</code>: 执行指令</li></ul><h2 id="编辑插件功能"><a href="#编辑插件功能" class="headerlink" title="编辑插件功能"></a>编辑插件功能</h2><blockquote><p>在 <code>extension.ts</code> 文件中注册指令或者添加个性化逻辑，借助 API 实现监听版本之类的自执行逻辑<br>功能前缀为 <code>package.name</code> 的驼峰形式</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;extension.skinCover.start&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Instructions</span>.<span class="title function_">createList</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(</span><br><span class="line">  commands.<span class="title function_">registerCommand</span>(<span class="string">&quot;extension.skinCover.refresh&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Instructions</span>.<span class="title function_">randomUpdateCover</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="添加插件功能"><a href="#添加插件功能" class="headerlink" title="添加插件功能"></a>添加插件功能</h2><ol><li><p>在 <code>package.json</code> 中 <code>contributes</code> 字段中添加属性</p><ul><li><code>commands</code>: 指令集</li><li><code>keybindings</code>: 快捷键</li><li><code>configuration</code>: 属性配置简介</li></ul></li><li><p><code>configuration</code> 中的 <code>properties</code> 配置具体细节</p><ul><li><code>viewsContainers</code>: 配置自定义扩展图标</li><li><code>views</code>: 配置自定义扩展逻辑</li><li><code>menus</code>: 配置不同视图下的菜单</li></ul></li><li><p>常用的 <code>menus</code> 配置选项</p><ul><li><code>editor/context</code>: 编辑器上下文菜单，当在编辑器中右键点击时显示</li><li><code>explorer/context</code>: 资源管理器上下文菜单，当在资源管理器中右键点击文件或文件夹时显示</li><li><code>commandPalette</code>: 命令面板，用户可以通过 <code>ctrl + shift + p</code> 或 <code>cmd + shift + p</code> 打开</li><li><code>view/title</code>: 视图标题栏菜单，显示在视图的标题栏上</li><li><code>view/item/context</code>: 视图项上下文菜单，当在视图中的某个项上右键点击时显示</li></ul></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extension.skinCover.start&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover - start&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extension.skinCover.refresh&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover - refresh&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover.refreshEntry&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;刷新&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/light/refresh.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/dark/refresh.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover.home&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;light&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/light/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/dark/home.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;viewsContainers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;activitybar&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover-explorer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resources/big.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;views&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;skinCover-explorer&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover.readerView&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webview&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;menus&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;view/title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover.refreshEntry&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;view == skinCover.readerView&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;navigation@1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;skinCover.home&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;when&quot;</span><span class="punctuation">:</span> <span class="string">&quot;view == skinCover.readerView&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;navigation@0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="调试插件功能"><a href="#调试插件功能" class="headerlink" title="调试插件功能"></a>调试插件功能</h2><blockquote><p>一般将 <code>package.json</code> 中 <code>activationEvents</code> 字段设置为 <code>onStartupFinished</code>, 表示在 vsc 启动时启动插件，启动时机可参考 <a href="https://code.visualstudio.com/api/references/activation-events">官网</a> &gt; <code>ctrl + shift + p</code> 选择输入指令结合断点调试，注意设置 <code>launch.js</code> 中的 <code>preLaunchTask</code>，保证每次调试是编译之后的代码</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;onStartupFinished&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Run Extension&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extensionHost&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;--extensionDevelopmentPath=$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;outFiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/out/**/*.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm: pretest&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="发布与安装"><a href="#发布与安装" class="headerlink" title="发布与安装"></a>发布与安装</h2><ol><li><p><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">官网</a></p></li><li><p>安装 <code>@vscode/vsce</code> 将插件打包为 <code>.vsix</code> 文件，然后在插件根目录下执行 <code>vsce package</code></p><blockquote><p>发布有两种方式</p><ul><li>执行 <code>vsce publish</code>，需要 vsce 的令牌</li><li>将 <code>.vsix</code> 文件上传到 Visual Studio Marketplace 发布者管理页面，选哟微软账户</li></ul></blockquote></li><li><p>审核完成后即可在 vsc 扩展里找的上传的插件进行安装</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vscode/vsce</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> myExtension</span><br><span class="line">$ vsce package</span><br><span class="line"><span class="comment"># myExtension.vsix generated</span></span><br><span class="line">$ vsce publish</span><br><span class="line"><span class="comment"># &lt;publisher id&gt;.myExtension published to VS Code Marketplace</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>小猪大佬的插件 <a href="https://github.com/AShujiao/vscode-background-cover">background-cover</a>，欢迎大家安装使用 🎉🎉🎉</li></ol><p><img src="/images/front-tech/vPlugin_2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>脚手架实现</title>
      <link href="/articles/front-tech/cli/"/>
      <url>/articles/front-tech/cli/</url>
      
        <content type="html"><![CDATA[<h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>安装 node, 建议 16 以上的版本</li><li><p>新建一个文件夹，<code>npm init</code> 初始化，并在 package.json 文件中添加 <code>bin</code> 字段声明命令，指向命令执行的 js 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ny-cli&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bin/cli.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>bin/cli.js</p><blockquote><p>添加 <code>#!/usr/bin/env node</code>, 告知 os 此文件以 node 形式运行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="npm-link"><a href="#npm-link" class="headerlink" title="npm link"></a>npm link</h3><blockquote><p>未发布到 npm 仓库之前，需要本地调试。npm link 之后，执行 <code>ny-cli</code> 正常输出即成功</p></blockquote><ul><li>npm link: 链接到全局</li><li>npm ls -g —depth=0: 查看全局已链接的包，检查是否 link 成功</li><li>npm rm —global pkgName: 删除 link 的包</li></ul><h3 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h3><blockquote><p>npm link 调试有几个问题，推荐使用 monorepo 风格的脚手架</p><ul><li>多个 Node.js 版本同时存在可能会出错</li><li>软连接错误删除</li><li>link 失败不会报错并且会回退到直接从 npm 仓库查找同名的包进行安装，导致可能安装错误的包</li></ul></blockquote><ul><li>子工程 package</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ny --help&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workspace:*&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>pnpm 中使用 workspace: pnpm 只会解析存在工作空间内的包，不会去下载安装 npm 上的包</li><li>在子工程中执行 <code>pnpm i</code>, 将只会在子工程内部安装 <code>ny-cli</code>, 而不会在全局安装</li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ol><li>全局安装 pnpm: <code>npm install pnpm -g</code></li><li><p>新建文件夹并 <code>pnpm init</code> 初始化，创建 pnpm-workspace.yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明 packages 和 examples 文件夹中子工程是同属一个工作空间，可被其它子工程引用</span></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;examples/*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>新建 packages 文件夹，并在此创建 ny-cli 文件夹，并 <code>pnpm init</code>，在生成的 package.json 中配置 <code>bin</code> 字段。同级创建 bin 文件夹及 cli 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ny-cli&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@10.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./bin/cli.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cli.js</span></span><br><span class="line">#!<span class="regexp">/usr/</span>bin/env node</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>新建 examples 文件夹，并在此创建 app 文件夹，并 <code>pnpm init</code>，在生成的 package.json 中配置 <code>dependencies</code> 字段和 <code>scripts</code> 脚本命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ny&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@10.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ny-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workspace:*&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在根文件目录执行 <code>pnpm i</code>，完成后在 app 文件目录下执行 <code>pnpm ny</code>，终端输出 <code>Hello World</code> 即说明搭建成功。整体目录如下</p><p><img src="/images/front-tech/cli_1.png" alt=""></p></li></ol><h2 id="模块实现"><a href="#模块实现" class="headerlink" title="模块实现"></a>模块实现</h2><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><blockquote><p>可以使用 <code>commander</code> 或 <code>yargs</code> 来解析参数，本文档采取 <a href="https://github.com/tj/commander.js">commander</a> 解析参数， <code>yargs</code> 方式可参考 <a href="https://juejin.cn/post/7260144602471776311">monorepo 脚手架搭建教程</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&quot;commander&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">&quot;../package.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置命令行工具的名称、使用说明、版本</span></span><br><span class="line">program.<span class="title function_">name</span>(name).<span class="title function_">usage</span>(<span class="string">`&lt;command&gt;[option]`</span>).<span class="title function_">version</span>(version);</span><br><span class="line"><span class="comment">// 解析输入的命令行参数</span></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/front-tech/cli_2.png" alt=""></p><h3 id="交互模块"><a href="#交互模块" class="headerlink" title="交互模块"></a>交互模块</h3><blockquote><p>使用 <code>inquirer</code> 处理询问式交互，建议安装 v8 版本，高版本使用会出一些奇怪的错误</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Inquirer</span> = <span class="built_in">require</span>(inquirer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cwd = process.<span class="title function_">cwd</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> asws = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Inquirer</span>.<span class="title function_">prompt</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;project name&quot;</span>,</span><br><span class="line">    <span class="attr">default</span>: projectName,</span><br><span class="line">    <span class="attr">validate</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z]+$/</span>.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;模板名称只能含有英文&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="regexp">/^[A-Z]/</span>.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;模板名称首字母必须大写&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;template&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Please choose a template to create project&quot;</span>,</span><br><span class="line">    <span class="attr">choices</span>: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;vue&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Please choose a version&quot;</span>,</span><br><span class="line">    <span class="attr">choices</span>: [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;Vue2&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://vue2&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;Vue3&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://vue3&quot;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;library&quot;</span>,</span><br><span class="line">    <span class="attr">when</span>: <span class="function">(<span class="params">answers</span>) =&gt;</span> answers.<span class="property">template</span> === <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Please choose a version&quot;</span>,</span><br><span class="line">    <span class="attr">choices</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;React&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://react&quot;</span> &#125;],</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;library&quot;</span>,</span><br><span class="line">    <span class="attr">when</span>: <span class="function">(<span class="params">answers</span>) =&gt;</span> answers.<span class="property">template</span> === <span class="string">&quot;react&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/front-tech/cli_3.png" alt=""></p><h3 id="仓库模块"><a href="#仓库模块" class="headerlink" title="仓库模块"></a>仓库模块</h3><h4 id="远程仓库拉取"><a href="#远程仓库拉取" class="headerlink" title="远程仓库拉取"></a>远程仓库拉取</h4><blockquote><p><code>download-git-repo</code> 库</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; library &#125; = asws;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">templateUrl, targetDirectory</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadGitRepoPromise = util.<span class="title function_">promisify</span>(downloadGitRepo);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">loading</span>(</span><br><span class="line">    <span class="string">&quot;downloading template, please wait&quot;</span>,</span><br><span class="line">    downloadGitRepoPromise,</span><br><span class="line">    templateUrl,</span><br><span class="line">    targetDirectory</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">download</span>(library, targetDirectory);</span><br></pre></td></tr></table></figure><blockquote><p>直接创建 <code>shell</code> 命令</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec, execSync &#125; = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">loading</span>(</span><br><span class="line">  <span class="string">&quot;downloading template, please wait&quot;</span>,</span><br><span class="line">  exec,</span><br><span class="line">  <span class="string">`git clone -b master <span class="subst">$&#123;library&#125;</span> <span class="subst">$&#123;projectName&#125;</span>`</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">stdio</span>: <span class="string">&quot;ignore&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="复制仓库文件"><a href="#复制仓库文件" class="headerlink" title="复制仓库文件"></a>复制仓库文件</h4><blockquote><p><code>copy-dir</code> 库<br>将 template 文件夹里的模板复制到项目里，比如 <code>packages/ny-cli/template</code> 复制到 <code>examples/app/src/common</code></p><ul><li><code>__dirname</code>: 脚本的物理地址，固定不变的路径</li><li><code>process.cwd()</code>: 命令执行的当前目录路径</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copydir = <span class="built_in">require</span>(<span class="string">&quot;copy-dir&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> targetDirectory = path.<span class="title function_">resolve</span>(cwd, <span class="string">&quot;./src/common&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(targetDirectory)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件夹已经存在&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; isOverwrite &#125; = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Inquirer</span>.<span class="title function_">prompt</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;isOverwrite&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Target directory exists, Please choose an action&quot;</span>,</span><br><span class="line">      <span class="attr">chooices</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Overwrite&quot;</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Cancel&quot;</span>, <span class="attr">value</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  <span class="keyword">if</span> (!isOverwrite) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cancel&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">loading</span>(</span><br><span class="line">      <span class="string">`Removing common, please wait a minute`</span>,</span><br><span class="line">      fs.<span class="property">remove</span>,</span><br><span class="line">      targetDirectory</span><br><span class="line">    );</span><br><span class="line">    copydir.<span class="title function_">sync</span>(</span><br><span class="line">      path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./template&quot;</span>),</span><br><span class="line">      path.<span class="title function_">resolve</span>(cwd, <span class="string">&quot;./src/common&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  copydir.<span class="title function_">sync</span>(</span><br><span class="line">    path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./template&quot;</span>),</span><br><span class="line">    path.<span class="title function_">resolve</span>(cwd, <span class="string">&quot;./src/common&quot;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后处理模块"><a href="#后处理模块" class="headerlink" title="后处理模块"></a>后处理模块</h3><blockquote><p>模板下载完成后需要根据之前的创建参数调整模板相关配置项</p></blockquote><h4 id="通过方法修改"><a href="#通过方法修改" class="headerlink" title="通过方法修改"></a>通过方法修改</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> spinner = <span class="title function_">ora</span>(<span class="string">&quot;正在修改相关配置信息...&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> files = [<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;package-lock.json&quot;</span>, <span class="string">&quot;.env&quot;</span>];</span><br><span class="line">  spinner.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> answers) &#123;</span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> src = path.<span class="title function_">join</span>(cwd, <span class="string">`<span class="subst">$&#123;name&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">let</span> content = fs</span><br><span class="line">        .<span class="title function_">readFileSync</span>(src, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(key, <span class="string">&quot;g&quot;</span>), answers[key]);</span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(src, content);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更换git相关信息</span></span><br><span class="line">  <span class="keyword">let</span> git_src = path.<span class="title function_">join</span>(cwd, <span class="string">`<span class="subst">$&#123;name&#125;</span>/.git/config`</span>);</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(</span><br><span class="line">    git_src,</span><br><span class="line">    fs.<span class="title function_">readFileSync</span>(git_src, <span class="string">&quot;utf-8&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/templateUrl-xxx/g</span>, name)</span><br><span class="line">  );</span><br><span class="line">  spinner.<span class="title function_">succeed</span>(<span class="string">&quot;修改相关配置信息成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态配置模板"><a href="#动态配置模板" class="headerlink" title="动态配置模板"></a>动态配置模板</h4><blockquote><p><code>mustache</code> 库，可参考 <a href="https://juejin.cn/post/7260144602471776311">monorepo 脚手架搭建教程</a></p></blockquote><h3 id="美化模块"><a href="#美化模块" class="headerlink" title="美化模块"></a>美化模块</h3><h4 id="chalk"><a href="#chalk" class="headerlink" title="chalk"></a>chalk</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&quot;chalk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;chalk.green(<span class="string">&quot;hello world&quot;</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h4 id="figlet"><a href="#figlet" class="headerlink" title="figlet"></a>figlet</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> figlet = <span class="built_in">require</span>(<span class="string">&quot;figlet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">    figlet.<span class="title function_">textSync</span>(<span class="string">&quot;ny-cli&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">font</span>: <span class="string">&quot;3D-ASCII&quot;</span>,</span><br><span class="line">      <span class="attr">horizontalLayout</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="attr">verticalLayout</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">80</span>,</span><br><span class="line">      <span class="attr">whitespaceBreak</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="ora-loading"><a href="#ora-loading" class="headerlink" title="ora-loading"></a>ora-loading</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&quot;ora&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spinner = <span class="title function_">ora</span>(<span class="string">&quot;Loading...&quot;</span>).<span class="title function_">start</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  spinner.<span class="property">color</span> = <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">  spinner.<span class="property">text</span> = <span class="string">&quot;Loading vue&quot;</span>;</span><br><span class="line">  spinner.<span class="title function_">succeed</span>();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>封装 loading</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * loading加载效果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; message 加载信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 加载函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">List</span>&#125; args fn 函数执行的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 异步调用返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loading</span>(<span class="params">message, fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(message);</span><br><span class="line">  spinner.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> executeRes = <span class="keyword">await</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">    spinner.<span class="title function_">succeed</span>();</span><br><span class="line">    <span class="keyword">return</span> executeRes;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    spinner.<span class="title function_">fail</span>(<span class="string">&quot;request fail, reTrying&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loading</span>(message, fn, ...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发布和安装"><a href="#发布和安装" class="headerlink" title="发布和安装"></a>发布和安装</h2><blockquote><p>在 <code>packeages/ny-cli</code> 文件夹下运行发布命令，然后在项目工程中安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布</span></span><br><span class="line">pnpm publish --F ny-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pnpm add ny-cli -D</span><br></pre></td></tr></table></figure><h2 id="完整示例代码"><a href="#完整示例代码" class="headerlink" title="完整示例代码"></a>完整示例代码</h2><ul><li>cli.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Command</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;commander&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; name, version &#125; = <span class="built_in">require</span>(<span class="string">&quot;../package.json&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&quot;chalk&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> figlet = <span class="built_in">require</span>(<span class="string">&quot;figlet&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="keyword">new</span> <span class="title class_">Command</span>();</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">name</span>(name).<span class="title function_">usage</span>(<span class="string">`&lt;command&gt;[option]`</span>).<span class="title function_">version</span>(version);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;create &lt;project-name&gt;&quot;</span>)</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&quot;create a new project&quot;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&quot;-f, --force&quot;</span>, <span class="string">&quot;overwrite target directory if it exists&quot;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">(<span class="params">projectName, cmd</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;../lib/create&quot;</span>)(projectName, cmd);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;config [value]&quot;</span>)</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&quot;inspect and modify the config&quot;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&quot;-g, --get &lt;key&gt;&quot;</span>, <span class="string">&quot;get value by key&quot;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&quot;-s, --set &lt;key&gt; &lt;value&gt;&quot;</span>, <span class="string">&quot;set option[key] is value&quot;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&quot;-d, --delete &lt;key&gt;&quot;</span>, <span class="string">&quot;delete option by key&quot;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">(<span class="params">value, keys</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value, keys);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">on</span>(<span class="string">&quot;--help&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line">      figlet.<span class="title function_">textSync</span>(<span class="string">&quot;my-cli&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">font</span>: <span class="string">&quot;3D-ASCII&quot;</span>,</span><br><span class="line">        <span class="attr">horizontalLayout</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">verticalLayout</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="attr">whitespaceBreak</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">`Run <span class="subst">$&#123;chalk.cyan(</span></span></span><br><span class="line"><span class="subst"><span class="string">      <span class="string">&quot;my-cli &lt;command&gt; --help&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">    )&#125;</span> for detailed usage of given command.`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);</span><br></pre></td></tr></table></figure><ul><li>create.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Inquirer</span> = <span class="built_in">require</span>(<span class="string">&quot;inquirer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> downloadGitRepo = <span class="built_in">require</span>(<span class="string">&quot;download-git-repo&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&quot;chalk&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; loading &#125; = <span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">projectName, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取当前工作目录</span></span><br><span class="line">  <span class="keyword">const</span> cwd = process.<span class="title function_">cwd</span>();</span><br><span class="line">  <span class="keyword">const</span> targetDirectory = path.<span class="title function_">resolve</span>(cwd, projectName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// // 处理文件夹</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">handleFolder</span>(projectName, options, targetDirectory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 选择模板</span></span><br><span class="line">  <span class="keyword">const</span> &#123; library &#125; = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Inquirer</span>.<span class="title function_">prompt</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;project name&quot;</span>,</span><br><span class="line">      <span class="attr">default</span>: projectName,</span><br><span class="line">      <span class="attr">validate</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/^[a-zA-Z]+$/</span>.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;模板名称只能含有英文&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="regexp">/^[A-Z]/</span>.<span class="title function_">test</span>(val)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;模板名称首字母必须大写&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;template&quot;</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Please choose a template to create project&quot;</span>,</span><br><span class="line">      <span class="attr">choices</span>: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;vue&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Please choose a version&quot;</span>,</span><br><span class="line">      <span class="attr">choices</span>: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Vue2&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://vue2&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&quot;Vue3&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://vue3&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;library&quot;</span>,</span><br><span class="line">      <span class="attr">when</span>: <span class="function">(<span class="params">answers</span>) =&gt;</span> answers.<span class="property">template</span> === <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Please choose a version&quot;</span>,</span><br><span class="line">      <span class="attr">choices</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;React&quot;</span>, <span class="attr">value</span>: <span class="string">&quot;git@github.com://react&quot;</span> &#125;],</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;library&quot;</span>,</span><br><span class="line">      <span class="attr">when</span>: <span class="function">(<span class="params">answers</span>) =&gt;</span> answers.<span class="property">template</span> === <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 下载</span></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">download</span>(library, targetDirectory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 模板使用提示</span></span><br><span class="line">  <span class="title function_">success</span>(projectName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">success</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  spinner.<span class="title function_">succeed</span>(<span class="string">&quot;template download success!&quot;</span>);</span><br><span class="line">  <span class="title function_">changeInfo</span>(name);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`- cd <span class="subst">$&#123;chalk.cyan(name)&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`- <span class="subst">$&#123;chalk.blue(<span class="string">&quot;npm install&quot;</span>)&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`- <span class="subst">$&#123;chalk.yellow(<span class="string">&quot;npm run dev&quot;</span>)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理文件夹创建重名问题</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">handleFolder</span>(<span class="params">projectName, options, targetDirectory</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(targetDirectory)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">force</span>) &#123;</span><br><span class="line">      <span class="comment">// 删除重名目录</span></span><br><span class="line">      <span class="keyword">await</span> fs.<span class="title function_">remove</span>(targetDirectory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; isOverwrite &#125; = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Inquirer</span>.<span class="title function_">prompt</span>([</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;isOverwrite&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Target directory exists, Please choose an action&quot;</span>,</span><br><span class="line">          <span class="attr">chooices</span>: [</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&quot;Overwrite&quot;</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&quot;Cancel&quot;</span>, <span class="attr">value</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">if</span> (!isOverwrite) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Cancel&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">loading</span>(</span><br><span class="line">          <span class="string">`Removing <span class="subst">$&#123;projectName&#125;</span>, please wait a minute`</span>,</span><br><span class="line">          fs.<span class="property">remove</span>,</span><br><span class="line">          targetDirectory</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载git仓库</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">templateUrl, targetDirectory</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadGitRepoPromise = util.<span class="title function_">promisify</span>(downloadGitRepo);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">loading</span>(</span><br><span class="line">    <span class="string">&quot;downloading template, please wait&quot;</span>,</span><br><span class="line">    downloadGitRepoPromise,</span><br><span class="line">    templateUrl,</span><br><span class="line">    targetDirectory</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> spinner = <span class="title function_">ora</span>(<span class="string">&quot;正在修改相关配置信息...&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> files = [<span class="string">&quot;README.md&quot;</span>, <span class="string">&quot;package.json&quot;</span>, <span class="string">&quot;package-lock.json&quot;</span>, <span class="string">&quot;.env&quot;</span>];</span><br><span class="line">  spinner.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> answers) &#123;</span><br><span class="line">    files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> src = path.<span class="title function_">join</span>(cwd, <span class="string">`<span class="subst">$&#123;name&#125;</span>/<span class="subst">$&#123;file&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">let</span> content = fs</span><br><span class="line">        .<span class="title function_">readFileSync</span>(src, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(key, <span class="string">&quot;g&quot;</span>), answers[key]);</span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(src, content);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更换git相关信息</span></span><br><span class="line">  <span class="keyword">let</span> git_src = path.<span class="title function_">join</span>(cwd, <span class="string">`<span class="subst">$&#123;name&#125;</span>/.git/config`</span>);</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(</span><br><span class="line">    git_src,</span><br><span class="line">    fs.<span class="title function_">readFileSync</span>(git_src, <span class="string">&quot;utf-8&quot;</span>).<span class="title function_">replace</span>(<span class="regexp">/templateUrl-xxx/g</span>, name)</span><br><span class="line">  );</span><br><span class="line">  spinner.<span class="title function_">succeed</span>(<span class="string">&quot;修改相关配置信息成功!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>util.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&quot;ora&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 睡觉函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; n 睡眠时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, n);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * loading加载效果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; message 加载信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Function</span>&#125; fn 加载函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">List</span>&#125; args fn 函数执行的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 异步调用返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loading</span>(<span class="params">message, fn, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = <span class="title function_">ora</span>(message);</span><br><span class="line">  spinner.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> executeRes = <span class="keyword">await</span> <span class="title function_">fn</span>(...args);</span><br><span class="line">    spinner.<span class="title function_">succeed</span>();</span><br><span class="line">    <span class="keyword">return</span> executeRes;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    spinner.<span class="title function_">fail</span>(<span class="string">&quot;request fail, reTrying&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">loading</span>(message, fn, ...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; loading &#125;;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://juejin.cn/post/7260144602471776311">monorepo 脚手架搭建教程</a></li><li><a href="https://blog.csdn.net/u012570307/article/details/137786725">从零到一搭建脚手架</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 语言简介</title>
      <link href="/articles/python/introduce/"/>
      <url>/articles/python/introduce/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul><li>int: 二进制 (0b100); 八进制 (0o100); 十六进制 (0x100); 十进制 (100)</li><li>float: 数学写法 (123.456); 科学计数法 (1.23456e2)</li><li>str: ‘’; “”</li><li>bool: True; False</li></ul><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><ul><li>惯例 1：受保护的变量通常用单个下划线开头</li><li>惯例 2：私有的变量通常用两个下划线开头</li></ul><h3 id="操作变量方法"><a href="#操作变量方法" class="headerlink" title="操作变量方法"></a>操作变量方法</h3><ul><li>type(a): 检查类型 <code>&lt;class &#39;int&#39;&gt;</code></li><li>iint(): 将一个数值或字符串转换成整数，可以指定进制</li><li>float(): 将一个字符串转换成浮点数</li><li>str(): 将指定的对象转换成字符串形式，可以指定编码方式</li><li>chr(): 将整数转换成对应的字符串</li><li>ord(): 将字符串转换成对应的整数</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code>、<code>[:]</code></td><td>索引、切片</td></tr><tr><td><code>**</code></td><td>幂</td></tr><tr><td><code>~</code>、<code>+</code>、<code>-</code></td><td>按位取反、正号、负号</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code>、<code>//</code></td><td>乘、除、模、整除</td></tr><tr><td><code>+</code>、<code>-</code></td><td>加、减</td></tr><tr><td><code>&gt;&gt;</code>、<code>&lt;&lt;</code></td><td>右移、左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code>、<code>丨</code></td><td>按位异或、按位或</td></tr><tr><td><code>&lt;=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&gt;=</code></td><td>小于等于、小于、大于、大于等于</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>等于、不等于</td></tr><tr><td><code>is</code>、<code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>、<code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>、<code>or</code>、<code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>//=</code>、<code>**=</code>、<code>&amp;=</code>、<code>丨=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code></td><td>赋值运算符</td></tr></tbody></table></div><ul><li>算数运算符</li><li>赋值运算法<ul><li>海象运算符<blockquote><p>Python 3.8 中引入了一个新的赋值运算符 <code>:=</code>, 将运算符右侧的值赋值给左边的变量，与赋值运算符不同的是，运算符右侧的值也是整个表达式的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>((a := <span class="number">10</span>))  <span class="comment"># 10</span></span><br><span class="line"><span class="built_in">print</span>(a)          <span class="comment"># 10</span></span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li>比较运算符</li><li>逻辑运算符</li></ul><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><ol><li><p><code>%s</code> 格式</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.1f千米 = %.1f米&#x27;</span> % (m, n))</span><br></pre></td></tr></table></figure><ul><li><code>%s</code>, 表示 <code>str</code> 类型变量; <code>%d</code>, 表示 <code>int</code> 类型变量; <code>%f</code>, 表示 <code>float</code> 类型变量。<code>.1</code> 表示一位小数</li></ul></li><li><p><code>f-string</code> 格式</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;m:<span class="number">.1</span>f&#125;</span>千米 = <span class="subst">&#123;n:<span class="number">.1</span>f&#125;</span>米&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;The number <span class="subst">&#123;number:<span class="number">0</span>&gt;5d&#125;</span> is padded with zeros.&#x27;</span>)  <span class="comment"># 左填充零，宽度为 5</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Charlie&quot;</span></span><br><span class="line">message = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Hello, <span class="subst">&#123;name&#125;</span>!</span></span><br><span class="line"><span class="string">Welcome to our website.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure><ul><li>指定格式: <code>:.xf</code> 表示保留 <code>x</code> 位小数；<code>:.x%</code> 表示百分比格式；<code>:.xe</code> 表示科学计数法；<code>:,</code> 表示逗号隔开</li><li>填充和对齐: <code>0&gt;5d</code>, 左填充零，宽度为 5; <code>&lt;5d</code>, 左对齐，宽度为 5; <code>^5d</code>, 居中对齐，宽度为 5</li><li>多行f-string: 使用三引号 (‘’’ 或 “””) 定义字符串</li></ul></li></ol><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if / elif / else"></a>if / elif / else</h3><h3 id="match-case"><a href="#match-case" class="headerlink" title="match / case"></a>match / case</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> code:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">404</span> | <span class="number">403</span>: xxx</span><br><span class="line">    <span class="keyword">case</span> <span class="number">500</span> | <span class="number">501</span>: xxx</span><br><span class="line">    <span class="keyword">case</span> _: xxx</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for-in"><a href="#for-in" class="headerlink" title="for-in"></a>for-in</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello, world&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>range(start, end, step): 区间 <code>[start, end)</code>, step 步长</li></ul><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接定义</span></span><br><span class="line">listArr = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># list()</span></span><br><span class="line">listArr = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h3 id="列表运算"><a href="#列表运算" class="headerlink" title="列表运算"></a>列表运算</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">baseList1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">baseList2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment"># 拼接 +</span></span><br><span class="line"><span class="built_in">print</span>(baseList1 + baseList2)</span><br><span class="line"><span class="comment"># 重复 *</span></span><br><span class="line"><span class="built_in">print</span>(baseList1 * <span class="number">2</span>)</span><br><span class="line"><span class="comment"># in / not in</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span> <span class="keyword">in</span> baseList1)</span><br><span class="line"><span class="comment"># 切片 [start:end:stride]</span></span><br><span class="line"><span class="built_in">print</span>(baseList1[<span class="number">1</span>:<span class="number">3</span>:<span class="number">1</span>])</span><br><span class="line">baseList1[<span class="number">1</span>:<span class="number">3</span>] = [<span class="number">10</span>, <span class="number">11</span>] <span class="comment"># 修改元素</span></span><br></pre></td></tr></table></figure><h3 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h3><ul><li>append(): 添加到最后一个</li><li>remove(): 删除元素，多个元素只会删除第一个匹配到的元素</li><li>pop(): 默认删除列表中的最后一个元素，也可以给一个位置，删除指定位置的元素，并返回</li><li><ul><li>del 关键字: 删除位置元素</li></ul></li><li>clear(): 清空</li><li>index(ele, start, end): 查找元素索引，可选 start end，查找的起始结束位置</li><li>count(): 统计元素在列表中出现的次数</li><li>sort(cmp=None, key=None, reverse=False): 排序</li><li>reverse(): 反转</li></ul><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><blockquote><p>列表生成式创建简单，性能也会优于循环操作。Python 解释器的字节码指令中有专门针对生成式的指令 (<code>LIST_APPEND</code> 指令)；而for循环是通过方法调用 (<code>LOAD_METHOD</code> 和 <code>CALL_METHOD</code> 指令)的方式为列表添加元素，方法调用本身就是一个相对比较耗时的操作</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个取值范围在 1 到 99 且能被 3 或者 5 整除的数字构成的列表</span></span><br><span class="line">items = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">5</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个平方数的列表</span></span><br><span class="line">nums1 = [<span class="number">35</span>, <span class="number">12</span>, <span class="number">97</span>, <span class="number">64</span>, <span class="number">55</span>]</span><br><span class="line">nums2 = [num ** <span class="number">2</span> <span class="keyword">for</span> num <span class="keyword">in</span> nums1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个二维数组</span></span><br><span class="line">items = [[random.randrange(<span class="number">60</span>, <span class="number">101</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组是不可变类型，其他方法基本和 list 一致</p><ul><li>定义一元组需要加一个逗号，避免和 () 字面量冲突</li></ul></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = ()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">b = (<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line">c = (<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))  <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line">d = (<span class="string">&#x27;hello&#x27;</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line">e = (<span class="number">100</span>, )</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="打包和解包"><a href="#打包和解包" class="headerlink" title="打包和解包"></a>打包和解包</h3><blockquote><p>解包操作要求元素个数和变量个数严格对应，否则会报错<br><code>*</code> 变量解包余下的值，此变量会输出一个列表<br>解包语法对所有可序列的都成立，比如列表、range()、字符串等</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包操作</span></span><br><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))  <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(a)        <span class="comment"># (1, 10, 100, 1000)</span></span><br><span class="line"><span class="comment"># 解包操作</span></span><br><span class="line">i, j, k, l = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k, l)  <span class="comment"># 1 10 100 1000</span></span><br><span class="line"><span class="comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span></span><br><span class="line"><span class="comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span></span><br><span class="line"></span><br><span class="line">i, j, *k = a</span><br><span class="line"><span class="built_in">print</span>(i, j, k)        <span class="comment"># 1 10 [100, 1000]</span></span><br></pre></td></tr></table></figure><h3 id="变量交换"><a href="#变量交换" class="headerlink" title="变量交换"></a>变量交换</h3><blockquote><p>对于两个或三个变量，交换操作直接使用 <code>ROT_TWO</code>、<code>ROT_THREE</code> 指令实现；对于多个变量交换，需要借助打包解包的方式实现</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br><span class="line">a, b, c = b, c, a</span><br></pre></td></tr></table></figure><h3 id="tuple-vs-list"><a href="#tuple-vs-list" class="headerlink" title="tuple vs list"></a>tuple vs list</h3><ol><li>tuple 不可变，更适合多线程环境，减少并发访问变量的同步开销</li><li><p>不可变类型的创建花销明显优于可变类型。可以使用 <code>timeit</code> 模块进行测试</p> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.3f 秒&#x27;</span> % timeit.timeit(<span class="string">&#x27;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#x27;</span>, number=<span class="number">10000000</span>)) <span class="comment"># 0.740 秒</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.3f 秒&#x27;</span> % timeit.timeit(<span class="string">&#x27;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#x27;</span>, number=<span class="number">10000000</span>)) <span class="comment"># 0.118 秒</span></span><br></pre></td></tr></table></figure></li><li>相互转换: list()，tuple()</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串表示"><a href="#字符串表示" class="headerlink" title="字符串表示"></a>字符串表示</h3><ul><li><code>\</code>: 转义</li><li><code>r</code>、<code>R</code>: 原始字符串</li><li>进制及 Unicode 编码</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">&#x27;hello, world!&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;&#x27;&#x27;hello,</span></span><br><span class="line"><span class="string">wonderful</span></span><br><span class="line"><span class="string">world!&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">t1 = <span class="string">&#x27;\&#x27;hello, world!\&#x27;&#x27;</span></span><br><span class="line">t2 = <span class="string">r&#x27;\\hello, world!\\&#x27;</span></span><br><span class="line"></span><br><span class="line">r1 = <span class="string">&#x27;\141\142\143\x61\x62\x63&#x27;</span></span><br><span class="line">r2 = <span class="string">&#x27;\u4F60\u597D&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><ul><li><code>+</code>、<code>*</code>: 拼接、重复</li><li><code>in</code>、<code>not in</code>: 包含</li><li><code>[]</code>、<code>[:]</code>: 切片</li><li><code>ord()</code>: 获取字符编码进行比较</li></ul><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><blockquote><p>大小写</p><ul><li>capitalize(): 首字母大写</li><li>title(): 每个单词首字母大写</li><li>upper(): 大写</li><li>lower(): 小写</li></ul><p>查找</p><ul><li>find(str, start=0): 查找，返回索引，失败返回 -1</li><li>index(str, start=0): 查找，返回索引，失败报错</li><li>rfind(): 逆向查找</li><li>rindex(): 逆向查找</li></ul><p>性质判断</p><ul><li>startswith()</li><li>endswith()</li><li>isdigit(): 完全由数字构成</li><li>isalpha(): 完全由字母构成</li><li>isalnum(): 由字母和数字构成</li></ul><p>格式化</p><ul><li>center(width, fillchar): 居中</li><li>ljust(width, fillchar): 左对齐</li><li>rjust(width, fillchar): 右对齐</li><li>zfill(width): 左侧填充零，保留正负号的位置。print(‘-33’.zfill(5)) # -0033</li></ul><p>修剪</p><ul><li>strip(char): 修剪左右两端指定字符，默认空格</li><li>lstrip()</li><li>rstrip()</li></ul></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">set2 = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(set1 &amp; set2)                      <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1.intersection(set2))          <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(set1 | set2)                      <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1.union(set2))                 <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(set1 - set2)                      <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1.difference(set2))            <span class="comment"># &#123;1, 3, 5, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称差</span></span><br><span class="line"><span class="built_in">print</span>(set1 ^ set2)                      <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"><span class="built_in">print</span>(set1.symmetric_difference(set2))  <span class="comment"># &#123;1, 3, 5, 7, 8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># |=</span></span><br><span class="line">set1 |= set2</span><br><span class="line"><span class="comment"># set1.update(set2)</span></span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7, 8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;=</span></span><br><span class="line">set1 &amp;= set2</span><br><span class="line"><span class="comment"># set1.intersection_update(set2)</span></span><br><span class="line"><span class="built_in">print</span>(set1)  <span class="comment"># &#123;2, 4, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -=</span></span><br><span class="line">set2 -= set1</span><br><span class="line"><span class="comment"># set2.difference_update(set1)</span></span><br><span class="line"><span class="built_in">print</span>(set2)  <span class="comment"># &#123;8, 10&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子集、超集 &gt; &lt; &lt;= &gt;= issubset issuperset</span></span><br><span class="line"><span class="built_in">print</span>(set1.issubset(set2))</span><br><span class="line"><span class="built_in">print</span>(set2.issuperset(set1))</span><br></pre></td></tr></table></figure><h3 id="集合方法"><a href="#集合方法" class="headerlink" title="集合方法"></a>集合方法</h3><ul><li>add()</li><li>discard(): 删除</li><li>remove(): 删除，不存在报错</li><li>pop(): 随机删除一个元素并返回</li><li>clear()</li><li>isdisjoint(): 判断两个集合是否有相同元素</li></ul><h3 id="frozenset"><a href="#frozenset" class="headerlink" title="frozenset"></a>frozenset</h3><blockquote><p>简单理解为不可变的 set，拥有相同的方法</p></blockquote><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dict 构造器</span></span><br><span class="line">dic = <span class="built_in">dict</span>(a=<span class="string">&#x27;1&#x27;</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>, e=<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(dic)  <span class="comment"># &#123;&#x27;a&#x27;: &#x27;1&#x27;, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4, &#x27;e&#x27;: &#x27;5&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数zip压缩两个序列</span></span><br><span class="line">items1 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="string">&#x27;12345&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(items1)  <span class="comment"># &#123;&#x27;A&#x27;: &#x27;1&#x27;, &#x27;B&#x27;: &#x27;2&#x27;, &#x27;C&#x27;: &#x27;3&#x27;, &#x27;D&#x27;: &#x27;4&#x27;, &#x27;E&#x27;: &#x27;5&#x27;&#125;</span></span><br><span class="line">items2 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(<span class="string">&#x27;ABCDE&#x27;</span>, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>)))</span><br><span class="line"><span class="built_in">print</span>(items2)  <span class="comment"># &#123;&#x27;A&#x27;: 1, &#x27;B&#x27;: 2, &#x27;C&#x27;: 3, &#x27;D&#x27;: 4, &#x27;E&#x27;: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典生成式</span></span><br><span class="line">items3 = &#123;x: x ** <span class="number">3</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(items3)  <span class="comment"># &#123;1: 1, 2: 8, 3: 27, 4: 64, 5: 125&#125;</span></span><br></pre></td></tr></table></figure><h3 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h3><ul><li>get(key, defaut=None): 获取，获取不到则返回默认值</li><li>keys(): 键列表</li><li>values(): 值列表</li><li>items(): 键值元组列表</li><li>update()、<code>|</code>: 合并字典</li><li>pop(): 删除，返回键对应的值，键不存在报错</li><li>popitem(): 删除，返回键值的元组</li><li>clear()</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><blockquote><p>强制位置参数: <code>/</code> 之前的参数只能按照参数位置来接收参数; 关键字参数: <code>*</code>之后的参数只能通过 “参数名=参数值” 的方式来传递和接收参数</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, /, c, *, d</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>, a)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;b:&quot;</span>, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c:&quot;</span>, c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;d:&quot;</span>, d)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, d=<span class="number">4</span>)       <span class="comment"># 输出结果为：a: 1, b: 2, c: 3, d: 4</span></span><br><span class="line">func(<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)   <span class="comment"># 报错，因为参数 b 是位置参数，不能使用关键字传参</span></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)     <span class="comment"># 输出结果为：a: 1, b: 2, c: 3, d: 4，使用了位置传参和关键字传参</span></span><br></pre></td></tr></table></figure><blockquote><p>可变参数: <code>*args</code> 表示 args 可以接收0个或任意多个参数，args 会组装成一个元组; <code>*kwargs</code> 表示 kwargs可以接收0个或任意多个关键字参数，kwargs 会组装成一个字典</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, a=<span class="number">10</span>, b=<span class="number">20</span>, c=<span class="number">30</span>) <span class="comment"># (1, 2, 3) &#123;&#x27;a&#x27;: 10, &#x27;b&#x27;: 20, &#x27;c&#x27;: 30&#125;</span></span><br></pre></td></tr></table></figure><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><blockquote><p><a href="https://docs.python.org/zh-cn/3.13/library/functions.html">内置函数</a></p></blockquote><h3 id="函数应用"><a href="#函数应用" class="headerlink" title="函数应用"></a>函数应用</h3><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><h4 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h4><h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><blockquote><p>固定函数的某些参数，生成一个新的函数。使用 <code>functools</code> 模块的 <code>partial</code> 函数来创建偏函数</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">int2 = functools.partial(<span class="built_in">int</span>, base=<span class="number">2</span>)</span><br><span class="line">int8 = functools.partial(<span class="built_in">int</span>, base=<span class="number">8</span>)</span><br><span class="line">int16 = functools.partial(<span class="built_in">int</span>, base=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps <span class="comment"># 取消装饰器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">record_time</span>(<span class="params">func</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;func.__name__&#125;</span>执行时间: <span class="subst">&#123;end - start:<span class="number">.2</span>f&#125;</span>秒&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@record_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;开始下载<span class="subst">&#123;filename&#125;</span>.&#x27;</span>)</span><br><span class="line">    time.sleep(random.random() * <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;filename&#125;</span>下载完成.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@record_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;开始上传<span class="subst">&#123;filename&#125;</span>.&#x27;</span>)</span><br><span class="line">    time.sleep(random.random() * <span class="number">8</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;filename&#125;</span>上传完成.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用装饰后的函数会记录执行时间</span></span><br><span class="line">download(<span class="string">&#x27;JavaScript从入门到精通.pdf&#x27;</span>)</span><br><span class="line">upload(<span class="string">&#x27;JavaScript从入门到放弃.pdf&#x27;</span>)</span><br><span class="line"><span class="comment"># 取消装饰器的作用不记录执行时间</span></span><br><span class="line">download.__wrapped__(<span class="string">&#x27;Python从入门到精通.pdf&#x27;</span>)</span><br><span class="line">upload.__wrapped__(<span class="string">&#x27;Python从入门到放弃.pdf&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>带参数的装饰器，<code>lru_cache</code> 装饰器缓存函数执行结果</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> lru_cache</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, fib(i))</span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x=<span class="number">0</span>, y=<span class="number">0</span>, name=<span class="string">&#x27;X点&#x27;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化方法</span></span><br><span class="line"><span class="string">        :param x: 横坐标</span></span><br><span class="line"><span class="string">        :param y: 纵坐标</span></span><br><span class="line"><span class="string">        :param name: 点名称</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.x = x</span><br><span class="line">        <span class="variable language_">self</span>.y = y</span><br><span class="line">        <span class="variable language_">self</span>.__name = name <span class="comment"># __ 表示私有变量，外部无法直接访问</span></span><br><span class="line"></span><br><span class="line">A = Point(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;A点&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(A.__name) <span class="comment"># AttributeError: &#x27;Point&#x27; object has no attribute &#x27;__name&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(A._Point__name) <span class="comment"># A点</span></span><br></pre></td></tr></table></figure><h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a><code>__slots__</code></h3><blockquote><p>限制类添加动态属性</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">&#x27;小明&#x27;</span>, <span class="number">12</span>)</span><br><span class="line"><span class="comment"># AttributeError: &#x27;Student&#x27; object has no attribute &#x27;sex&#x27;</span></span><br><span class="line">stu.sex = <span class="string">&#x27;男&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="staticmethod"><a href="#staticmethod" class="headerlink" title="staticmethod"></a>staticmethod</h3><blockquote><p>声明静态方法</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">obj</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_male</span>(<span class="params">sex</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="classmethod"><a href="#classmethod" class="headerlink" title="classmethod"></a>classmethod</h3><blockquote><p>声明类方法，第一个参数为类对象本身</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">obj</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_male</span>(<span class="params">self, sex</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AIGC </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http</title>
      <link href="/articles/front_base/http/"/>
      <url>/articles/front_base/http/</url>
      
        <content type="html"><![CDATA[<h3 id="基础请求-请求标头-报文主体"><a href="#基础请求-请求标头-报文主体" class="headerlink" title="基础请求 - 请求标头 - 报文主体"></a>基础请求 - 请求标头 - 报文主体</h3><ul><li>基础请求：url | method | dest</li><li>请求标头：配置 + 拦截器 =&gt; 权限、身份</li></ul><ol><li><p>Accept - 请求内容的期望格式类型</p><ul><li><p>text/<br> html: HTML 格式 / plain: 纯文本格式 / xml: XML 格式</p></li><li><p>image/<br> gif: gif 格式 / jpeg: 图片格式 / png: png 格式</p></li><li><p>video/<br> mpeg / quicktime</p></li><li><p>application/<br> xhtml+xml / atom+xml / json / pdf / msword / x-www-form-urlencoded</p></li></ul></li><li><p>Accept-Encoding - 期望返回内容被压缩</p><ul><li>gzip, deflate, br，表示请求的返回希望被压缩，减少网络流量，提升性能。需要服务端支持，响应头中 Content-Encoding：gzip</li></ul></li><li><p>Accept-Language - 浏览器所支持的语言 =&gt; 国际化、多语言包 zh 表示中文，zh-cn 表示简体中文；en、fr</p></li><li><p>Connection - TCP 信道的连接 keep-alive(1.1 之后默认) / close</p></li><li><p>Cookie - 缓存形式</p><ul><li>集中缓存的对比 - cookie vs localStorage vs sessionStorage<br>大小：storage &gt;&gt; cookie<br>性能：cookie 每次请求都会携带，影响性能      =&gt; 网络性能优化<br>跨域：cookie 无法跨域调用，需要指定一个作用域   =&gt; 跨域问题<br>时效性：session - 当前页面；local - 跟随浏览器；cookie - 过期时间<br>跨 tab 共享：sessionStorage - 不支持；localStorage - 同源窗口共享；cookie - 同源窗口共享；<br>支持监听：session - 不支持跨页面，支持监听；local - 支持监听</li></ul></li><li><p>Referer - 请求资源地址</p></li><li><p>User-Agent - 用户侧信息</p></li><li><p>Sec-Fetch-Dest\Sec-Fetch-Mode\Sec-Fetch-Site</p><ul><li>mode - 请求的模式<br> cors: 跨域请求<br> no-cors: 限制请求<br> same-origin: 同源请求<br> navigate: 浏览器切换页面行为<br> websocket: 建立 websocket 连接</li><li>dest - 请求目标，如何使用获取的数据<br> empty / iframe / font / image</li><li>site - 请求发起者和资源之间的关系<br> cross-site: 跨域请求<br> same-origin: 发起方和目标一致<br> none</li></ul></li><li><p>q=0.01 - 参数优先级</p><ul><li>q 越高代表优先级越高 0 =&lt; q &lt;= 1 [0, 1]</li><li>默认不写，优先级 q = 1</li></ul></li></ol><h3 id="http-攻击"><a href="#http-攻击" class="headerlink" title="http 攻击"></a>http 攻击</h3><ol><li><p>SQL 注入 get get_name?a=encodeURLComponent(selectxXx)</p></li><li><p>xss(cross-site script) 转义</p><ul><li>存储性 XSS 存储数据库，并且可以影响别人</li><li>反射性 xss alert selectxxX</li><li>基于 DOM 的 XSS script window.location</li></ul><blockquote><p>对策</p></blockquote><ol><li>编码：对用户的输入进行 HTML Entity 编码。</li><li>过滤：移除用户输入的和事件相关的属性。如 onerror 可以自动触发攻击，还有 onclick 等。(总而言之，过滤掉一些不安全的内容)移除用户输入的 style 节点、script 节点、Iframe 节点。</li><li>校正：避免直接对 HTML Entity 进行解码。使用 DOM parse 转换，校正不配对的 DOM 标签。</li></ol></li><li><p>CSRF ( cross-site request forgery) 跨站点请求伪造</p><ul><li>A 登录 xianzao.com，保留 cookie</li><li>引导 zaoxian.com</li><li>zaoxian.com 向 xianzao.com 发请求，xianzao.com/act=XXX，浏览器默认带有 xianzao.com cookie</li><li>xianzao.com 接受请求，cookie，/act=xXX</li><li>在访问 zaoxian.com，攻击者在 A 不知情的情况下，伪造身份，请求 xianzao.com</li></ul><blockquote><p>对策</p></blockquote><ol><li>Token 验证，用的比较多：① 服务器发送给客户端一个 token;② 客户端提交的表单中带着这个 token;③ 如果这个 token 不合法，那么服务器拒绝这个请求。</li><li>隐藏令牌：将 token 隐藏在 http 的 head 头中，方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</li><li>Referer 验证：Referer 指的是网页请求来源，意思是，只接受本站的请求，服务器才做响应;如果不是，就拦截。</li></ol></li><li><p>区别</p><ul><li>CSRF 需要用户先登录网站 A，获取 cookie，XSS 不需要登录。</li><li>CSRF 是利用网站 A 本身的漏洞，去请求网站 A 的 api，XSS 是向网站 A 注入 js 代码，然后执行 js 里的代码，篡改网站 A 的内容。</li></ul></li></ol><h3 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h3><ol><li>1xx 信息提示： 表达服务器正在处理请求。100 - continue、 101 - 切换协议</li><li>2xx 成功：200 - 请求成功、201 - 创建完成、 204 - 无内容</li><li>3xx 重定向：301 - 永久重定向 / 302 - 对象已移动 /303 - 临时重定向/ 304 - 资源未修改 / 307 - 临时重定向</li></ol><ul><li>301 vs 302 =&gt; 跳转<br>302 - 短链接转长链接 =&gt; 点击短链接 =&gt; 对象已移动 =&gt; 浏览器自动跳转到长链接</li><li><p>302 vs 304 =&gt; 缓存</p><ul><li>强缓存 =&gt; 不发请求 =&gt; 返回 200 状态码 + 标识 from cache</li><li>协商缓存 =&gt; 由服务端参考决定是否缓存</li><li>强缓存 =&gt; Expires(资源失效的时间) + cache-control (1.1) / max-age=3600 =&gt; cache-control &gt; Expires</li><li>协商缓存 =&gt; Last-Modified(最后修改时间) + If-modified-Since + ETag =&gt; ETag 计算会有性能损耗</li></ul></li><li><p>4xx - 请求错误</p></li><li>5xx - 服务端错误</li></ul><h3 id="get-和-post"><a href="#get-和-post" class="headerlink" title="get 和 post"></a>get 和 post</h3><ol><li>协议层面：语义区别</li><li>应用层面：get 请求体为空</li><li><p>浏览器层面</p><ul><li>GET 在浏览器回退时是无害的，而 POST 会再次提交请求</li><li>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以</li><li>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置</li><li>GET 请求只能进行 url 编码，而 POST 支持多种编码方式</li><li>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留</li><li>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有</li><li>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制</li><li>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息</li><li>GET 参数通过 URL 传递，POST 放在 Request body 中</li></ul></li></ol><h3 id="http-版本"><a href="#http-版本" class="headerlink" title="http 版本"></a>http 版本</h3><h4 id="v0-9"><a href="#v0-9" class="headerlink" title="v0.9"></a>v0.9</h4><blockquote><p>只有 get 方法</p><p>服务器只能回应 HTML 格式的字符串，不能回应别的格式。服务器发送完毕，就关闭 TCP 连接。</p></blockquote><h4 id="v1-0"><a href="#v1-0" class="headerlink" title="v1.0"></a>v1.0</h4><blockquote><p>每次建立断开连接消耗比较大</p><p>1.0 最大特点是增加了头部设定，请求头中 Accept 字段表示可以接收的文件类型，比如传输图像、视频、二进制文件。响应头中 Content-Type 字段 (MIME type 类型) 来告诉浏览器返回文件的类型</p><p>其他的新增功能还包括状态码 (status code) 、多字符集支持、多部分发送 (multi-part type) 、权限 (authorization) 、缓存 (cache) 、内容编码 (content encoding) 等</p></blockquote><ol><li>无状态</li><li><p>无长连接</p><ul><li>早期 Http/1.0 性能上一个很大的问题，就是每发送一个请求，都要建立一次 TCP 三次握手，和 四次挥手。</li></ul></li><li><p>无法复用连接</p></li><li>队头阻塞</li><li>GET POST HEAD：请求方式少</li><li>keep-alive =&gt; Connection：keep-alive (1.0 默认关闭)</li></ol><h4 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h4><ol><li>keep-alive =&gt; Connection：keep-alive (默认的)：规范的做法是，客户端在最后一个请求时，发送 Connection: close，明确要求服务器关闭 TCP 连接</li><li>支持长连接：TCP 连接复用，但是，本质上还是按照顺序发送</li><li>并发连接：对一个域名的请求允许分配多个长连接 (缓解了长连接中的「队头阻塞」问题)</li><li>pipe：支持管道传输，一个 TCP 连接，可以同时发送多个请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能 够区分出每次请求的响应内容 (依然存在问题)</li><li>支持分块传输：Content-length：206</li><li>PUT、HEAD、DELETE、OPTIONS、PATCH</li><li>新增了一些缓存的字段 (If-Modified-Since, If-None-Match)</li><li>请求头中引入了 range 字段，支持断点续传</li><li>允许响应数据分块 (Transfer-Encoding: chunked) ，利于传输大文件，否则就使用 Content-length 来区分数据包是属于哪一个回应的</li><li>强制要求 Host 头，让互联网主机托管称为可能 (可以将请求发往同一台服务器上的不同网站)</li></ol><h4 id="v2"><a href="#v2" class="headerlink" title="v2"></a>v2</h4><blockquote><p>由 SPDY 协议基础上继承而来</p><p>v 1.1 的性能问题</p><ul><li>对头阻塞：使用持久连接时，一个连接中同一时刻只能处理一个请求。当前的请求没有结束之前，其他的请求只能处于阻塞状态</li><li>头部，冗余且未压缩</li><li>只能客户端发起</li></ul></blockquote><ol><li><p>头部压缩：HPACK 算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90%的高压缩率</p><ul><li>静态字典 ：在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送</li><li>动态字典</li><li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新</li><li>每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值</li><li>哈夫曼编码</li></ul></li><li><p>二进制帧</p><blockquote><p>v 1.1 为 ascll 文本 + 二进制 (报文的头信息必须是文本 (ASCII 编码) ，数据体可以是文本，也可以是 二进制)</p></blockquote><ul><li>将文本的格式，完全改成了 二进制帧的格式。</li><li>帧的好处，在于使用位运算进行高效解析。</li></ul></li><li><p>并发传输，多路复用，避免队头阻塞</p><ul><li>同一个 TCP 连接里面，客户端和服务器可以同时发送多个请求和多个响应，并且不用按照顺序来</li><li>多个 Stream 复用一条 TCP 连接，达到一个并发的效果</li><li>不同的 Stream 顺序可以不一致，在到达时，进行组装</li></ul></li><li><p>服务端主动推送资源</p><blockquote><p>http 1.1 使用 websocket 协议</p></blockquote><ul><li>C — S   基数号 Stream</li><li>S — C   偶数号 Stream</li></ul></li><li><p>数据流</p><ul><li>每个请求或者响应的所有数据包，称为一个数据流 (stream)</li><li>每一个数据流都有一个唯一的编号 ID，请求数据流的编号 ID 为奇数，响应数据流的编号 ID 为偶数</li><li>客户端还能指定数据流的优先级，优先级越高，服务器会越快做出响应</li></ul></li></ol><h4 id="v3"><a href="#v3" class="headerlink" title="v3"></a>v3</h4><blockquote><p>v2 有哪些缺点</p><ul><li>TCP 协议本身的问题 (一个 TCP 连接进行传输，在丢包或网络中断的情况下后面的所有数据都被阻塞) ，队头阻塞；</li><li>TCP 和 TLS 握手延迟；</li><li>网络歉意需要重新连接；</li></ul></blockquote><ol><li>使用 QUIC + UDP (快速 UDP 互联网连接) 协议，取代 tcp 协议<ul><li>严格要求加密</li><li>更快的连接建立：建立持久连接、协商加密协议，甚至发送第一批数据都被合并到 QUIC 中的单个请求/响应周期中，从而大大减少了连接等待时间</li><li>没有队头阻塞：通过 QUIC 连接传输的数据被分为一些流。流是持久性 QUIC 连接中短暂、独立的“子连接”。每个流都处理自己的错误纠正和传递保证，但使用连接全局压缩和加密属性。每个客户端发起的 HTTP 请求都在单独的流上运行，因此丢失数据包不会影响其他流/请求的数据传输</li></ul></li><li>头部压缩，由 HPACK(61) 升级成 QPACK(91)</li></ol><h3 id="https"><a href="#https" class="headerlink" title="https"></a>https</h3><blockquote><p>工作于 SSL 层 (Secure Sockets Layer 安全套接层) 之上的 HTTP 协议，传输层和应用层之间</p><p>基于 SSL 协议的互联网草案：传输层安全协议(TLS，Transport Layer Security)</p></blockquote><h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><blockquote><p>位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。向应用层提供了两个基本安全服务：认证和保密。</p></blockquote><ol><li>SSL 记录协议 (SSL Record Protocol) ：为高层协议提供数据封装、压缩、加密等基本功能的支持 (进行数据加密并保证数据的完整性)<ul><li>数据保密性：使用握手协议定义的秘密密钥对传送的数据加密</li><li>消息完整性：使用握手协议定义的带有 MAC 的密钥计算消息认证码</li></ul></li><li>SSL 握手协议 (SSL Handshake Protocol) ：建立在 SSL 记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等 (服务器与客户端的认证与密钥交换)<ul><li>建立安全能</li><li>服务端认证与密钥交</li><li>客户端认证与密钥交</li><li>完成握</li></ul></li><li>SSL 警报协议 (SSL Alert Protocol) ：当客户机和服务器发现错误时，会向对方发送一个警报消息。如果是致命错误，算法立即终止会话并关闭 SSL 连接，同时删除相关会话记录、秘密和密钥</li></ol><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><ol><li>客户端发送请求：当用户在浏览器中输入一个 HTTPS 网址时，客户端会向服务器发送一个请求，请求将它支持的 SSL 版本、加密算法、密钥交换算法、MAC 算法等信息发送给 SSL 服务器。</li><li>服务器回应：服务器确定本次通信采用的 SSL 版本和加密套件，并将携带自己公钥信息的数字证书通过 Certificate 消息发送给客户端，通知客户端版本和加密套件协商结束，开始进行密钥交换。</li><li>客户端验证证书并生成密钥：客户端验证服务器的证书合法后，利用证书中的公钥加密客户端随机生成密钥，并通知 SSL 服务器</li><li>客户端发送密钥：客户端使用已交互的握手消息的 Hash 值，利用协商好的密钥和加密套件处理 Hash 值 (计算并添加 MAC 值、加密等) ，发送给 SSL 服务器。</li><li>服务器解密密钥：服务器利用同样的方法计算已交互的握手消息的 Hash 值，并与 Finished 消息的解密结果比较，如果二者相同，且 MAC 值验证成功，则证明密钥和加密套件协商成功。</li></ol><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ol><li>优点：<ul><li>使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器</li><li>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中不被窃取、修改，确保数据的完整性</li><li>HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本</li></ul></li><li>缺点：<ul><li>HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近</li><li>HTTPS 连接缓存不如 HTTP 高效，会增加数据开销，甚至已有的安全措施也会因此而受到影响</li><li>HTTPS 协议的安全是有范围的，在黑客攻击、拒绝服务攻击和服务器劫持等方面几乎起不到什么作用</li><li>SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗</li><li>部署 HTTPS 后，因为 HTTPS 协议的工作要增加额外的计算资源消耗，例如 SSL 协议加密算法和 SSL 交互次数将占用一定的计算资源和服务器成本</li><li>HTTPS 协议的加密范围也比较有限。最关键的，SSL 证书的信用链体系并不安全，特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行</li></ul></li></ol><h4 id="http-的风险"><a href="#http-的风险" class="headerlink" title="http 的风险"></a>http 的风险</h4><blockquote><p>安全性：http 超文本传输协议，信息是明文的，存在安全的问题</p><ul><li>窃听风险；号没</li><li>篡改风险；眼没</li><li>冒充风险；钱没</li></ul></blockquote><h4 id="https-是怎么解决这些问题的"><a href="#https-是怎么解决这些问题的" class="headerlink" title="https 是怎么解决这些问题的"></a>https 是怎么解决这些问题的</h4><blockquote><ul><li>CA 证书：解决“冒充风险”</li><li>信息加密：解决“窃听风险”</li><li>校验机制：解决“篡改风险”</li></ul></blockquote><h5 id="信息加密"><a href="#信息加密" class="headerlink" title="信息加密"></a>信息加密</h5><blockquote><p>混合加密</p><ul><li>对称加密，对称加密只有，一个秘钥。运算速度很快，但是不够安全。</li><li>非对称加密，两个秘钥。公钥和私钥，公钥可以任意分发，私钥保密。但是速度慢。</li></ul></blockquote><h5 id="CA-证书"><a href="#CA-证书" class="headerlink" title="CA 证书"></a>CA 证书</h5><blockquote><ul><li>公钥</li><li>持有者信息</li><li>证书认证机构信息</li><li>CA 对这份文件的数组签名以及使用方法</li><li>证书有效期</li><li>额外信息</li></ul></blockquote><p><img src="/images/front-base/http_1.png" alt=""></p><h5 id="校验机制"><a href="#校验机制" class="headerlink" title="校验机制"></a>校验机制</h5><ol><li>明文：提取摘要 =&gt; 摘要 + 明文 一起加密</li><li>服务端用摘要算法加密，得到明文用摘要算法加密</li><li>若两次摘要相同，则内容无缺失</li></ol><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><blockquote><p>WebSocket 协议是 HTML5 的一种新协议，可实现浏览器/移动端和服务器建立全双工通信。</p><p>原理：WebSocket 同 HTTP 一样也是应用层的协议，但是它是一种双向通信协议，是建立在 TCP 之上的<br>目的：即时通讯，替换轮询。比如网页的 QQ，聊天系统等。按照以往的技术能力通常是采用轮询、Comet 技术解决。</p></blockquote><h4 id="vs-http"><a href="#vs-http" class="headerlink" title="vs http"></a>vs http</h4><ol><li>相同点<ul><li>都是一样基于 TCP 的，都是可靠性传输协议。 都是应用层协议。</li></ul></li><li>区别：<ul><li>连接方式：WebSocket 是双向通信协议，模拟 Socket 协议，可以双向发送或接受信息，是一种持久连接的协议。HTTP 是单向的，基于请求-响应模式。WebSocket 是需要握手进行建立连接的。</li><li>数据格式：HTTP 协议传输的数据一般采用明文的 ASCII 文本格式，通常是 HTML、JSON、XML 等格式的数据。而 WebSocket 协议可以传输任意格式的数据，包括二进制数据，可以更灵活地处理各种类型的数据。</li><li>通信效率：由于 HTTP 协议每次通信都需要经过完整的请求-响应过程，包括建立连接、发送请求、服务器处理请求、发送响应等步骤，因此在频繁通信的场景下，HTTP 的开销较大。而 WebSocket 协议在建立连接后只需要发送少量的头部信息，然后就可以直接进行数据传输，通信效率较高。</li><li>服务器推送：HTTP 协议是一种客户端主动发起请求的协议，服务器只能在收到请求后才能返回响应。而 WebSocket 协议支持服务器主动推送数据给客户端，服务器可以随时向客户端发送数据，实现实时通信。</li><li>WebSocket 在建立握手时，数据是通过 HTTP 传输的。但是建立之后，在真正传输时候是不需要 HTTP 协议的。</li><li>性能比较：<ul><li>吞吐量：WebSocket 相较于 HTTP 协议，在单位时间内能处理的请求数目更多，具有更高的吞吐量。</li><li>延迟：由于 WebSocket 是基于持久连接的全双工通信，相比于每次都需要重新建立连接的 HTTP 协议，WebSocket 的延迟更低。</li><li>适用场景：如果应用需要实时性较高的通信，如在线游戏、实时聊天等，WebSocket 是更好的选择。而对于传统的网页请求和响应，仍然可以使用 HTTP 协议。</li></ul></li></ul></li></ol><h4 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h4><ol><li>Socket 其实并不是一个协议(传输控制层)，而是为了方便使用 TCP 或 UDP 而抽象出来的一层，是位于应用层和传输控制层之间的一组接口</li><li>当两台主机通信时，必须通过 Socket 连接，Socket 则利用 TCP/IP 协议建立 TCP 连接。TCP 连接则更依靠于底层的 IP 协议，IP 协议的连接则依赖于链路层等更低层次。</li></ol><h3 id="Cookie、Session、Token"><a href="#Cookie、Session、Token" class="headerlink" title="Cookie、Session、Token"></a>Cookie、Session、Token</h3><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><blockquote><p>浏览器发起 HTTP 请求，服务器会进行 Cookie 设置，也就是 Set-Cookie<br>Cookie 里有名和值两个重要属性，服务器会把键和值属性里的内容给填充完整，Cookie 发送给浏览器以后，浏览器会保存起来，之后每一个请求都会自动附上这个 Cookie<br>sameSite：是否允许发送 cookie</p><ul><li>none：允许，但需要使用 https，设置 secure</li><li>lax：默认值，组织发送 cookie，但对超链接放行</li><li>strict：组织发送</li></ul></blockquote><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><blockquote><p>会话：浏览器访问服务器就是会话的开始，如何界定会话结束 (并非关掉网页的时间) ？</p><ul><li>不同的网站对每个用户的回话都设定了时间以及唯一的 ID，就是通常所说的 Session ID， 这里的时间也就是结束会话的时间。保存在服务器中。</li></ul></blockquote><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><blockquote><ol><li>用户第一次登录网页以后，服务器就会生成一个 JWT，服务器不需要保存这个 JWT，只需要保存 JWT 签名的密文，接着把 JWT 发给浏览器</li><li>浏览器以 Cookie 或者 Storage 的形式进行存储</li></ol><p>JWT 组成</p><ul><li>header：声明需要用什么算法来生成签名</li><li>payload：一些特定的数据，比如有效期之类的。header 和 payload 会经由 Base64 加密。默认字段：iss (发行人) 、exp (到期时间) 、sub (主题) 、aud (用户) 、nbf (在某个时间前不可用) 、iat (发布时间) 、jti (jwt id)</li><li>signatuer：签名信息，由 服务器保存的一段密码(密钥) + header 的编码 + payload 的编码 通过第一步的算法生成</li></ul></blockquote><p><img src="/images/front-base/http_2.png" alt=""></p><h3 id="前端登录态保持"><a href="#前端登录态保持" class="headerlink" title="前端登录态保持"></a>前端登录态保持</h3><blockquote><p>缘由：</p><ul><li>最早的时候，web 的作用就是网页的浏览。 服务器只用提供简单的网页浏览器操作即可，不用记住刚刚谁发了请求，更没有登录，注册之类的操作</li><li>http 设计之初就是无状态的</li><li>http 无状态： http 不会记住每一次的请求 就跟公交车司机不会记住乘客一样</li></ul></blockquote><h4 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie+session"></a>cookie+session</h4><ol><li>服务端登录的时候，给分配一个 session 用于存储数据，同时将 sessionID 返回给浏览器</li><li>浏览器通过 cookie 把 sessionID 存储起来，下次访问时携带上</li><li>服务端就可以通过 sessionID 来确定用户是否登录</li></ol><blockquote><p>缺点：服务端压力</p></blockquote><ol><li>每个人登录都需要在服务端开辟一块空间来信息，如果访问的人越来越多了，该怎么办</li><li>浪费了大量的内存，对于服务器来说是一个很大的开销</li><li>手机端很多浏览器不支持 cookie 或者是禁用 cookie</li><li>集群化不好实现</li></ol><blockquote><p>解决方案：集群 + session 持久化</p></blockquote><ol><li>增加更多服务器进行服务</li><li>session 共享：在每一台服务器中都共享所有的用户信息</li><li>数据持久化：使用缓存 (redis/Memcached) ,将所有的 session 存储到数据库中，所有的 session 都统一去数据库中进行查找</li></ol><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><blockquote><p>优点：</p></blockquote><ol><li>token 无状态，服务端不用存储 token，服务端只需要签发和校验 token 即可</li><li>集群：token 是无状态，集群的时候，算法一致，无论访问哪台服务器，都是一样的</li><li>性能： 解析 token 效率比查询数据库高的多</li><li>跨站点：只要服务端算法一致，token 就可以夸站点登录</li><li>移动端：在移动端开发中，使用 cookie 非常麻烦，使用 token 验证非常常见</li></ol><blockquote><p>使用方法：</p></blockquote><ol><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage</li><li>此后，客户端每次与服务器通信，都要带上这个 JWT，放在 HTTP 请求的头信息 Authorization 字段里面 (放在 Cookie 里面不能跨域)</li></ol><h3 id="扫码登陆流程设计"><a href="#扫码登陆流程设计" class="headerlink" title="扫码登陆流程设计"></a>扫码登陆流程设计</h3><ol><li>生成二维码：首先，我们需要使用第三方库来生成二维码。在 JavaScript 中，可以使用 qrcode.js 库来生成二维码。具体使用方法可以参考该库的文档</li><li>后端生成登录标识：当用户扫描二维码后，我们需要后端生成一个唯一的登录标识，并将其存储到数据库中。这个登录标识将用于后续的登录验证</li><li>前端轮询检查登录状态：前端页面需要定时向后端发送请求，查询当前用户是否已经完成登录操作。可以使用 setInterval 函数来定时发送请求，并根据后端返回的登录状态进行相应的处理。</li><li>后端登录验证：当用户扫描二维码后，后端需要验证用户的登录操作。可以通过将登录标识与用户信息进行关联来进行验证</li><li>前端登录成功处理：当用户成功完成登录后，前端页面会收到后端返回的登录成功消息。此时，我们可以根据需要进行跳转或者其他相应的操作</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise</title>
      <link href="/articles/front_base/promise/"/>
      <url>/articles/front_base/promise/</url>
      
        <content type="html"><![CDATA[<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><ol><li><p>描述 promise 框架 - 规范</p><ul><li>promise 有哪些状态？对应值有哪些 - pending、fulfilled、rejected</li><li>new Promise 执行器 executor()，执行器参数是？ - resolve、reject</li><li>promise 的默认状态是？promise 状态的流转？ - 默认 pending，pf，pr</li><li>promise，value 保存成功状态的枚举？- undefined/thenable/promise</li><li>promise，失败状态值？- reason 保存失败</li></ul></li><li><p>描述 promise 接口</p><ul><li>promise 一定会有 then，then 接收来源，两个回调 onFulfilled(value) + onRejected(reason)</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MPromise</span> &#123;</span><br><span class="line">  #state = <span class="variable constant_">PENDING</span>;</span><br><span class="line">  #result = <span class="literal">undefined</span>;</span><br><span class="line">  #handlers = [];</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">FULFILLED</span>, data);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">changeState</span>(<span class="variable constant_">REJECTED</span>, reason);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">changeState</span>(<span class="params">state, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#state !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="variable language_">this</span>.#state = state;</span><br><span class="line">    <span class="variable language_">this</span>.#result = result;</span><br><span class="line">    <span class="variable language_">this</span>.#<span class="title function_">run</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">isPromiseLike</span>(<span class="params">value</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runMicroTask</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> process === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> process.<span class="property">nextTick</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      process.<span class="title function_">nextTick</span>(func);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(func);</span><br><span class="line">      <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">      ob.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">        <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      textNode.<span class="property">data</span> = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(func, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">runOne</span>(<span class="params">callback, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#<span class="title function_">runMicroTask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> settled = <span class="variable language_">this</span>.#state === <span class="variable constant_">FULFILLED</span> ? resolve : reject;</span><br><span class="line">        <span class="title function_">settled</span>(<span class="variable language_">this</span>.#result);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="title function_">callback</span>(<span class="variable language_">this</span>.#result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.#<span class="title function_">isPromiseLike</span>(data)) &#123;</span><br><span class="line">          data.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  #<span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.#state !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>.#handlers.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; onFulfilled, onRejected, resolve, reject &#125; =</span><br><span class="line">        <span class="variable language_">this</span>.#handlers.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.#state === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runOne</span>(onFulfilled, resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.#state === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#<span class="title function_">runOne</span>(onRejected, resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 异步</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#handlers.<span class="title function_">push</span>(&#123;</span><br><span class="line">        onFulfilled,</span><br><span class="line">        onRejected,</span><br><span class="line">        resolve,</span><br><span class="line">        reject,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">this</span>.#<span class="title function_">run</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">all</span>(<span class="params">proms</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> res, ref;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      res = resolve;</span><br><span class="line">      rej = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 设置 p 的状态</span></span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 数量</span></span><br><span class="line">    <span class="keyword">let</span> fulFilledCount = <span class="number">0</span>; <span class="comment">// 完成的数量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> prom <span class="keyword">of</span> proms) &#123;</span><br><span class="line">      <span class="keyword">const</span> i = count;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(prom).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将成功数据汇总result</span></span><br><span class="line">        result[i] = data;</span><br><span class="line">        <span class="comment">// 全部完成</span></span><br><span class="line">        fulFilledCount++;</span><br><span class="line">        <span class="keyword">if</span> (fulFilledCount === count) &#123;</span><br><span class="line">          <span class="title function_">res</span>(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, rej);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">res</span>(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下方法为 es6 添加的方法</span></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">onFinally</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onFinally</span>();</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onFinally</span>();</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="keyword">let</span> res, rej;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      res = resolve;</span><br><span class="line">      rej = reject;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (p.#<span class="title function_">isPromiseLike</span>(value)) &#123;</span><br><span class="line">      value.<span class="title function_">then</span>(res, rej);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">res</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="A-规范"><a href="#A-规范" class="headerlink" title="A+ 规范"></a>A+ 规范</h3><blockquote><p>判断一个值是否是 Promise Like</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPromiseLike</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    value !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    (<span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span>) &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> value.<span class="property">then</span> === <span class="string">&quot;function&quot;</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><div class="tip cogs"><p>为什么 promise resolve 了一个 value, 最后输出的 value 值确是 undefined</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">MPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>因为现在这种写法, 相当于在.then 里 return undefined, 所以最后的 value 是 undefined，如果显式 return 一个值, 就不是 undefined 了；比如 return value</p></blockquote><div class="tip cogs"><p>.then 返回的是一个新 Promise, 那么原来 promise 实现的时候, 用数组来存回调函数有什么意义？</p></div><ol><li><p>情况 1，链式调用的时候，此时每一个.then 返回的都是一个新 promise, 所以每次回调数组 FULFILLED_CALLBACK_LIST 都是空数组。针对这种情况, 确实用数组来存储回调没意义, 完全可以就用一个变量来存储。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>情况 2，promise 实例是同一个, 数组的存在就有了意义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">test.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">test.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">test.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure></li></ol><div class="tip cogs"><p>为什么在 catch 的回调里, 打印 promise, 显示状态是 pending</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">111</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;报错&quot;</span> + reason);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(test); <span class="comment">// pending</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(test); <span class="comment">// fulfilled</span></span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><ul><li>catch 函数会返回一个新的 promise, 而 test 就是这个新 promise</li><li>catch 的回调里, 打印 promise 的时候, 整个回调还并没有执行完成(所以此时的状态是 pending), 只有当整个回调完成了, 才会更改状态</li><li>catch 的回调函数, 如果成功执行完成了, 会改变这个新 Promise 的状态为 fulfilled</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ol><li>race：返回一个新的 Promise 实例<ul><li>const p = Promise.race([p1, p2, p3]);</li><li>只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</li></ul></li><li>all：返回一个新的 Promise 实例，适用于需要确保所有 Promise 成功完成才能继续执行的情况。<ul><li>const p = Promise.all([a、b、c]);</li><li>a、b、c 都是 Promise 实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理</li><li>参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例</li></ul></li><li>allSettled：适用于需要获取所有 Promise 的最终状态（无论成功或失败）的情况，而不是仅仅关注成功的结果<ul><li>状态只可能变成 fulfilled</li></ul></li><li>finally：（es2018）不接受任何参数，无法知道前面的 Promise 状态到底是 fulfilled 还是 rejected。这表明，finally 方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</li><li>any：只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</li></ol><h2 id="async-await-amp-generator"><a href="#async-await-amp-generator" class="headerlink" title="async await &amp; generator"></a>async await &amp; generator</h2><blockquote><p>promise 的语法糖，await 后面的语句放在 .then 回调里面</p><ul><li>被 async 定义的函数会默认返回一个 Promise 对象 resolve 的值</li><li>对 async 函数可以直接 then，返回值就是 then 方法传入的函数</li><li>async await 是在 generator 的基础上，promise 执行器内部处理了中间状态，返回最终状态</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> n = <span class="keyword">await</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); <span class="comment">// 输出 0  2  1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. async await</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wait500</span>(<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wait500&quot;</span>, input);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(input + <span class="number">500</span>);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wait500.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  wait500.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    wait500.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      wait500.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">asyncCall</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">wait500</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="keyword">await</span> <span class="title function_">wait500</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="keyword">await</span> <span class="title function_">wait500</span>(<span class="number">0</span>);</span><br><span class="line">  result = <span class="keyword">await</span> <span class="title function_">wait500</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;asyncCall&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncCall</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. generator 步进代替then</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) <span class="keyword">yield</span> index++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> gen = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>().<span class="property">value</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重点 - 结合流水线做自动化处理</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GEN_LINE</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>](<span class="variable constant_">GEN_LINE</span> || []).<span class="title function_">forEach</span>(<span class="function">(<span class="params">it</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>(it).<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了一个promise，用来模拟异步请求，作用是传入参数++</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动执行器，如果一个Generator函数没有执行完，则递归调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">asyncFun</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> gen = <span class="title function_">func</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = gen.<span class="title function_">next</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">return</span> result.<span class="property">value</span>;</span><br><span class="line">    result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所需要执行的Generator函数，内部的数据在执行完成一步的promise之后，再调用下一步</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">var</span> f1 = <span class="keyword">yield</span> <span class="title function_">getNum</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> f2 = <span class="keyword">yield</span> <span class="title function_">getNum</span>(f1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">asyncFun</span>(func);</span><br></pre></td></tr></table></figure><h3 id="generator-传值"><a href="#generator-传值" class="headerlink" title="generator 传值"></a>generator 传值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">simpleGen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 通过 next() 传入的值</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">simpleGen</span>();</span><br><span class="line">gen.<span class="title function_">next</span>(); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">gen.<span class="title function_">next</span>(<span class="number">10</span>); <span class="comment">// &#123; value: 2, done: false &#125;，且 a = 10</span></span><br><span class="line">gen.<span class="title function_">next</span>(<span class="number">20</span>); <span class="comment">// &#123; value: 30, done: true &#125;，且 b = 20</span></span><br></pre></td></tr></table></figure><ul><li>gen.next(): 暂停在 yield 1 处，等待下一次 next() 调用，返回值: { value: 1, done: false }，<code>此时变量 a 尚未被赋值</code></li><li>gen.next(10): 参数 10 被传递给 Generator，成为第一个 yield 表达式的结果，赋值操作完成：const a = 10，执行 console.log(a) 输出 10，<code>此时变量 b 尚未被赋值</code></li></ul><blockquote><p><code>yield</code> 表达式的双重角色</p><ul><li>向外部返回<code>右侧表达式</code>的值</li><li>从外部接收下一次 <code>next()</code> 调用传入的值</li></ul><p>参数传递时机</p><ul><li>第一次 next() 调用通常不带参数 (传入的参数会被忽略)</li><li>后续 next() 调用的参数会成为上一个 yield 表达式的结果值</li></ul><p>执行流程控制</p><ul><li>每次 next() 调用会使 Generator 执行到下一个 yield 或 return</li><li>yield 暂停执行，next() 恢复执行</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EcmaScript 6</title>
      <link href="/articles/front_base/es/"/>
      <url>/articles/front_base/es/</url>
      
        <content type="html"><![CDATA[<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="与普通函数区别"><a href="#与普通函数区别" class="headerlink" title="与普通函数区别"></a>与普通函数区别</h3><ul><li>箭头函数 this 不可修改（call、apply、bind），在定义时决定：指向外层第一个普通函数。</li><li>不能被 new</li><li>没有 prototype</li><li>没有 arguments</li></ul><h3 id="new-一个箭头函数"><a href="#new-一个箭头函数" class="headerlink" title="new 一个箭头函数"></a>new 一个箭头函数</h3><ul><li>会报错，提示： function is not a constructor;</li><li>babel 编译时，会把 this 转成 (void 0);</li></ul><h3 id="哪些不能用箭头函数"><a href="#哪些不能用箭头函数" class="headerlink" title="哪些不能用箭头函数"></a>哪些不能用箭头函数</h3><ul><li>arguments</li><li>yield</li><li>构造函数的原型方法上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">age, name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = &#123; <span class="number">0</span>: <span class="number">18</span>, <span class="number">1</span>: <span class="string">&quot;luyi&quot;</span>, <span class="number">2</span>: <span class="string">&quot;teacher&quot;</span>, <span class="number">3</span>: <span class="string">&quot;esnext&quot;</span> &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>);</span><br><span class="line">  obj.<span class="property">length</span> = <span class="number">4</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(obj, <span class="number">2</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p = new Person(18, &quot;luyi&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments / callee / caller</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fibonacci = <span class="keyword">function</span> (<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="title function_">caller</span>(num - <span class="number">1</span>) + <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="title function_">caller</span>(num - <span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> consoleList = <span class="keyword">function</span> (<span class="params">student, teacher</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;student&#125;</span>, I am <span class="subst">$&#123;teacher&#125;</span>, nice 2 meet U`</span>);</span><br><span class="line">  <span class="comment">// console.log(&quot;hello &quot; + student + &quot;, I am &quot; + teacher + &quot;, nice 2 meet U&quot;)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> consoleString = <span class="keyword">function</span> (<span class="params">stringTemplate, ...restVal</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    stringTemplate.<span class="title function_">reduce</span>(</span><br><span class="line">      <span class="function">(<span class="params">total, item, index</span>) =&gt;</span> total + item + (restVal[index] || <span class="string">&quot;&quot;</span>),</span><br><span class="line">      <span class="string">&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="string">&quot;my students&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> tea = <span class="string">&quot;luyi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// consoleString([&#x27;hello&#x27;, &#x27;, I am &#x27;, &#x27;, nice 2 meet U&#x27;], stu, tea);</span></span><br><span class="line"><span class="comment">// 复杂的模板字符串语法</span></span><br><span class="line">consoleString<span class="string">`hello <span class="subst">$&#123;stu&#125;</span>, I am <span class="subst">$&#123;tea&#125;</span>, nice 2 meet U`</span>;</span><br></pre></td></tr></table></figure><h2 id="数组和对象"><a href="#数组和对象" class="headerlink" title="数组和对象"></a>数组和对象</h2><h3 id="数组和对象的细节"><a href="#数组和对象的细节" class="headerlink" title="数组和对象的细节"></a>数组和对象的细节</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的细节</span></span><br><span class="line"><span class="comment">// 需要使用 Array.from 或者 .fill(0)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">funcGenerator</span> = (<span class="params">num</span>) =&gt;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(num)).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="function">(<span class="params">params</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(params));</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">funcGenerator</span> = (<span class="params">num</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Array</span>(num).<span class="title function_">fill</span>(<span class="number">0</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="function">(<span class="params">params</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(params));</span><br><span class="line"></span><br><span class="line"><span class="comment">// funcGenerator(10).map((func, index) =&gt; func(index));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的细节</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES next 采用了 SameValueZero() 的比较。是一个引擎内置的比较方式。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="title class_">NaN</span>].<span class="title function_">includes</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign</span></span><br><span class="line"><span class="comment">// 深拷贝还是浅拷贝？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dist = &#123; <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> bar = &#123; <span class="attr">bar</span>: &#123; <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> baz = &#123; <span class="attr">baz</span>: <span class="string">&quot;baz&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Object</span>.<span class="title function_">assign</span>(dist, bar, baz);</span><br><span class="line"></span><br><span class="line">bar.<span class="property">bar</span>.<span class="property">bar</span> = <span class="string">&quot;newBar&quot;</span>;</span><br><span class="line">baz.<span class="property">baz</span> = <span class="string">&quot;newBaz&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一层是深拷贝，第二层是浅拷贝；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// &#123; foo: &#x27;foo&#x27;, bar: &#123; bar: &#x27;newBar&#x27; &#125;, baz: &#x27;baz&#x27; &#125;；</span></span><br><span class="line"><span class="comment">// res -- dist；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res === dist); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="get-set"><a href="#get-set" class="headerlink" title="get / set"></a>get / set</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  _age = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">age</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`actually I am <span class="subst">$&#123;<span class="variable language_">this</span>._age&#125;</span> years old~`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;17&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; It is useless to set my age, I am 17!&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const luyi = new Person();</span></span><br><span class="line"><span class="comment">// luyi.age = &quot;35&quot;;</span></span><br><span class="line"><span class="comment">// console.log(&quot;luyi is&quot;, luyi.age);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// java -- mumber private</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Proxy 天生的代理模式</span></span><br><span class="line"><span class="comment">// Vue2 Vue3</span></span><br></pre></td></tr></table></figure><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luyi = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luyiProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(luyi, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GET:&quot;</span>, target, propKey);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SET:&quot;</span>, target, propKey, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propKey, value, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((luyiProxy.<span class="property">age</span> = <span class="number">35</span>));</span><br></pre></td></tr></table></figure><h4 id="断言函数"><a href="#断言函数" class="headerlink" title="断言函数"></a>断言函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如何去实现一个断言函数？</span></span><br><span class="line"><span class="keyword">const</span> assert = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, warning, value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(warning);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="string">&quot;luyi&quot;</span>;</span><br><span class="line"><span class="comment">// 如果断言的内容是假的，我就打印</span></span><br><span class="line">assert[<span class="string">&quot;The teacher is Luyi!!!&quot;</span>] = teacher === <span class="string">&quot;yunyin&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luyi = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> luyiProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(luyi, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> receiver;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SET:&quot;</span>, target, propKey, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propKey, value, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// receiver 指向原始的读操作所在的那个对象， 一般情况下，就是 Proxy 的实例。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(luyiProxy.<span class="property">age</span> === luyiProxy); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h4><ol><li>将 Object 上一些明显属于语言内部的方法，放到 Reflect 对象上，现在 Object 和 Reflect 一同部署；</li><li>修改某些 Object 方法的返回结果，让其更合理；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> teacher = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;luyi&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(teacher, <span class="string">&quot;lessions&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(teacher, <span class="string">&quot;lessions&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: [<span class="string">&quot;es6&quot;</span>, <span class="string">&quot;esnext&quot;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperty直接报错： Cannot redefine property: lessions</span></span><br><span class="line"><span class="comment">// Reflect.defineProperty 给 true or false</span></span><br></pre></td></tr></table></figure><h3 id="Map、Set、WeakMap、WeakSet"><a href="#Map、Set、WeakMap、WeakSet" class="headerlink" title="Map、Set、WeakMap、WeakSet"></a>Map、Set、WeakMap、WeakSet</h3><ul><li>Weak 表示作为唯一的部分，必须是一个对象；</li><li>Weak 是一个弱引用，不用考虑 GC；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foos = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    foos.<span class="title function_">add</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!foos.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot; Foo.prototype.method 只能在实例上调用&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;using methods&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="keyword">let</span> b = &#123;&#125;;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span>.<span class="title function_">call</span>(b);</span><br></pre></td></tr></table></figure><h3 id="迭代器，Iterator"><a href="#迭代器，Iterator" class="headerlink" title="迭代器，Iterator"></a>迭代器，Iterator</h3><ul><li>迭代器是一个接口，为各种不同的数据提供统一的访问机制。任何数据结构只要部署了 <code>Iterator</code> 接口，就可以完成遍历操作：<ul><li>本质：指针。</li><li>该 接口主要供 <code>for...of</code> 消费。</li><li><code>for...of</code>普通原始对象会报错：1. 类数组对象转成数组（…/Array.from/Array.prototype.slice.apply(arguments)）；2. 如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [k, obj[k]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [k, v] <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let m = new Map();</span></span><br><span class="line"><span class="comment">// m.set(&#x27;a&#x27;, &#x27;foo&#x27;);</span></span><br><span class="line"><span class="comment">// m.set(&#x27;b&#x27;, &#x27;bar&#x27;);</span></span><br><span class="line"><span class="comment">// m.set(&#x27;c&#x27;, &#x27;baz&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let k = m.keys();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(k.next());</span></span><br><span class="line"><span class="comment">// console.log(k.next());</span></span><br><span class="line"><span class="comment">// console.log(k.next());</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> k = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator</span></span><br></pre></td></tr></table></figure><ul><li>原生具备 Iterator 的数据结构有：<br>Array Map Set String TypedArray arguments NodeList</li></ul><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">11</span>, <span class="attr">b</span>: <span class="number">22</span>, <span class="attr">c</span>: <span class="number">33</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)); <span class="comment">// [ [ &#x27;a&#x27;, 11 ], [ &#x27;b&#x27;, 22 ], [ &#x27;c&#x27;, 33 ] ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)); <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)); <span class="comment">// [ 11, 22, 33 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非 generator 的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">entries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>([key, obj[key]]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator 的方法</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">entires</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> k = <span class="title function_">entires</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(k.next())</span></span><br><span class="line"><span class="comment">// console.log(k.next())</span></span><br><span class="line"><span class="comment">// console.log(k.next())</span></span><br><span class="line"><span class="comment">// console.log(k.next())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> k) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="promise-allSettled"><a href="#promise-allSettled" class="headerlink" title="promise.allSettled"></a>promise.allSettled</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">allSettled</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(array <span class="keyword">instanceof</span> <span class="title class_">Array</span>)) <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot; not Array!&quot;</span>));</span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    array.<span class="title function_">forEach</span>(<span class="function">(<span class="params">func, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(func)</span><br><span class="line">        .<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">            res[index] = &#123;</span><br><span class="line">              <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">              value,</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            res[index] = &#123;</span><br><span class="line">              <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>,</span><br><span class="line">              reason,</span><br><span class="line">            &#125;;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          ++count === array.<span class="property">length</span> &amp;&amp; <span class="title function_">resolve</span>(res);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="let-const-vs-var"><a href="#let-const-vs-var" class="headerlink" title="let/const vs var"></a>let/const vs var</h2><blockquote><p>let/const 和 var 的区别</p><ol><li>var 污染全局</li><li>块级作用域</li><li>重复声明</li><li>暂时性死区（变量提升）</li></ol></blockquote><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arg1 = <span class="string">&quot;云隐&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg1&quot;</span>, arg1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arg2 = <span class="string">&quot;云隐&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arg2&quot;</span>, arg2);</span><br><span class="line"><span class="comment">// 变量提升 + 块级作用域</span></span><br></pre></td></tr></table></figure><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><blockquote><p>全局执行上下文、函数执行上下文、eval 函数执行上下文。可理解为一个抽象的对象</p></blockquote><p><img src="/images/front-base/es_1.png" alt=""></p><ul><li>Variable object: 变量对象，存储被定义在执行上下文中的变量 (variables) 和函数声明 (function declarations)</li><li>Scope chain: 作用域链，对象列表 (list of objects)，检索上下文代码中出现的标识符 (identifiers)</li><li>thisValue: this 指针，上下文对象</li></ul><h4 id="理解变量提升"><a href="#理解变量提升" class="headerlink" title="理解变量提升"></a>理解变量提升</h4><blockquote><p>执行上下文的生命周期可以分为三个阶段：创建、执行、释放</p></blockquote><p><img src="/images/front-base/es_2.png" alt=""></p><ol><li><p>var</p><blockquote><p>所有使用 var 声明的变量都会在执行上下文的创建阶段时作为变量对象的属性被创建并初始化，从而保证在执行阶段能通过标识符在变量对象里找到对应变量进行赋值操作等</p><ul><li>由名称和对应值 (undefined) 组成一个变量对象的属性被创建 (创建并初始化)</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></blockquote></li><li><p>let</p><blockquote><p>其在执行上下文的创建阶段，只会创建变量而不会被初始化，并且 ES6 规定了其初始化过程是在执行上下文的执行阶段 (即直到它们的定义被执行时才初始化)，使用未被初始化的变量将会报错 (ReferenceError)</p></blockquote></li><li><p>const</p><blockquote><p>const 与 let 类似，都具有上面提到的 let 的特性，唯一区别就在于 const 声明的是一个只读变量，声明之后不允许改变其值。因此，const 一旦声明必须初始化，否则会报错</p><ul><li>所谓的不可变不是指变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动 (即栈内存在的值和地址)</li></ul></blockquote></li></ol><h3 id="dead-zone"><a href="#dead-zone" class="headerlink" title="dead zone"></a>dead zone</h3><blockquote><p>在变量初始化前访问该变量会导致 ReferenceError ，因此从进入作用域创建变量，到变量开始可被访问的一段时间 (过程)，称为暂存死区(Temporal Dead Zone)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1);</span><br><span class="line">  <span class="keyword">var</span> arg1 = <span class="string">&quot;云隐&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="let-or-const"><a href="#let-or-const" class="headerlink" title="let or const"></a>let or const</h3><ul><li>引用型 const</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">teacher</span>: <span class="string">&quot;云隐&quot;</span>,</span><br><span class="line">  <span class="attr">leader</span>: <span class="string">&quot;小可&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">leader</span> = <span class="string">&quot;部部&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;小可&quot;</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型的原理 - 指向地址</span></span><br><span class="line"><span class="comment">// 追问 破局 - object.freeze()</span></span><br><span class="line">object.<span class="title function_">freeze</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">teacher</span>: <span class="string">&quot;云隐&quot;</span>,</span><br><span class="line">  <span class="attr">leader</span>: <span class="string">&quot;小可&quot;</span>,</span><br><span class="line">  <span class="attr">zhuawa</span>: [<span class="string">&quot;黄小杨&quot;</span>, <span class="string">&quot;部部&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line">object.<span class="title function_">freeze</span>(obj2);</span><br><span class="line">obj2.<span class="property">zhuawa</span>[<span class="number">0</span>] = <span class="string">&quot;云隐&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// freeze只能冻结根层，嵌套引用类型需要遍历递归</span></span><br><span class="line"><span class="comment">// 引申</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepFreeze</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2. 确定主执行步骤</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line">  <span class="comment">// 3. 逐级深入</span></span><br><span class="line">  (<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj) || []).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// for in - hasOwnProperty</span></span><br><span class="line">    <span class="keyword">let</span> innerObj = obj[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> innerObj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 1. 递归模式确定</span></span><br><span class="line">      <span class="title function_">deepFreeze</span>(innerObj);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lodash: clone deepclone equal deepequal</span></span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统对象 - function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = teacher;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">course</span> = course;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getCourse</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`teacher is:<span class="subst">$&#123;<span class="variable language_">this</span>.teacher&#125;</span>, course: <span class="subst">$&#123;<span class="variable language_">this</span>.course&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;ES6&quot;</span>);</span><br><span class="line">course.<span class="title function_">getCourse</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Es6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="comment">// init 实例会默认执行</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">teacher</span> = teacher;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">course</span> = course;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拓展方法</span></span><br><span class="line">  <span class="title function_">getCourse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`teacher is:<span class="subst">$&#123;<span class="variable language_">this</span>.teacher&#125;</span>, course: <span class="subst">$&#123;<span class="variable language_">this</span>.course&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;ES6&quot;</span>);</span><br><span class="line">course.<span class="title function_">getCourse</span>();</span><br></pre></td></tr></table></figure><h3 id="class-的类型"><a href="#class-的类型" class="headerlink" title="class 的类型"></a>class 的类型</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(typeOf <span class="title class_">Course</span>); <span class="comment">// function</span></span><br></pre></td></tr></table></figure><h3 id="class-的-prototype"><a href="#class-的-prototype" class="headerlink" title="class 的 prototype"></a>class 的 prototype</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 有区分，但本质类型相同</span></span><br></pre></td></tr></table></figure><h3 id="class-amp-函数对象-属性"><a href="#class-amp-函数对象-属性" class="headerlink" title="class &amp; 函数对象 属性"></a>class &amp; 函数对象 属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(course.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;teacher&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="属性定义-构造器-amp-顶层定义-两种定义方式"><a href="#属性定义-构造器-amp-顶层定义-两种定义方式" class="headerlink" title="属性定义 构造器 &amp; 顶层定义 两种定义方式"></a>属性定义 构造器 &amp; 顶层定义 两种定义方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="comment">// init 实例会默认执行</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">teacher</span> = teacher;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">course</span> = course;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拓展方法</span></span><br><span class="line">  <span class="title function_">getCourse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`teacher is:<span class="subst">$&#123;<span class="variable language_">this</span>.teacher&#125;</span>, course: <span class="subst">$&#123;<span class="variable language_">this</span>.course&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">teacher</span>() &#123;</span><br><span class="line">    <span class="comment">// 留有空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">teacher</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">teacher</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="comment">// 留有空间</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">teacher</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 意义何在？</span></span><br><span class="line"><span class="comment">// 1. js如何建立只读变量</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="comment">// init 实例会默认执行</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_teacher</span> = teacher;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">course</span> = course;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拓展方法</span></span><br><span class="line">  <span class="title function_">getCourse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`teacher is:<span class="subst">$&#123;<span class="variable language_">this</span>.teacher&#125;</span>, course: <span class="subst">$&#123;<span class="variable language_">this</span>.course&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">teacher</span>() &#123;</span><br><span class="line">    <span class="comment">// 留有空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_teacher</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改只读变量，会报错么 - 无法改变但是不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. js如何建立一个私有属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_teacher</span> = teacher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在constructor作用域内定义一个局部变量</span></span><br><span class="line">    <span class="keyword">let</span> _course = <span class="string">&quot;es6&quot;</span>;</span><br><span class="line">    <span class="comment">// 内部通过闭包的形式去暴露该变量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getCourse</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _course;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  #course = <span class="string">&quot;es6&quot;</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">teacher, course</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_teacher</span> = teacher;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">course</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#course;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">course</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#course = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 封装核心 - 适配器模式</span></span><br><span class="line"><span class="comment">// 底层封装中台业务core</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">utils</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">core</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_main</span> = core;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = <span class="string">&quot;my-utils&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_id</span> = <span class="string">&quot;zhaowa专有&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fullName: &#123;firstName: &#x27;&#x27;, lastName: &#x27;&#x27;, name: &#x27;&#x27;&#125;</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...<span class="variable language_">this</span>.<span class="property">_main</span>.<span class="property">fullName</span>,</span><br><span class="line">      ...&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">`utils is <span class="subst">$&#123;<span class="variable language_">this</span>._name&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">id</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...<span class="variable language_">this</span>.<span class="property">_main</span>.<span class="property">id</span>,</span><br><span class="line">      <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">_id</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="comment">// valid saftey</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><blockquote><p>直接挂载在类上的方法无需实例化获取</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Course</span>.<span class="property">ring</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">ring</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">ring</span>();</span><br><span class="line"><span class="comment">// 全局对象变量问题</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Course</span>.<span class="property">ring</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Course</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;ES6&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">run</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//……</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">ring</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">send</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 工厂模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;ES6&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EcmaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/articles/front_base/this/"/>
      <url>/articles/front_base/this/</url>
      
        <content type="html"><![CDATA[<h3 id="作用域及作用域链"><a href="#作用域及作用域链" class="headerlink" title="作用域及作用域链"></a>作用域及作用域链</h3><blockquote><p>规定变量和函数的可使用范围称作作用域</p><p>当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止,，而作用域链，就是有当前作用域与上层作用域的一系列变量对象组成，它保证了当前执行的作用域对符合访问权限的变量和函数的有序访问。</p></blockquote><ul><li>在特定的场景下，特定范围内，查找变量的一套规则<ul><li>一般情况下特指：词法作用域、静态作用域</li><li>一般是代码层面上的</li><li>作用域链：内部可以访问外部的变量，反之不行</li><li>变量提升机制</li></ul></li><li><p>分类</p><ul><li>全局作用域</li><li>函数作用域 ：在函数内声明的所有变量，在函数体内是始终可见的，可以再整个函数范围内复用</li><li>块作用域 ：是一个用来对之前的最小授权原则进行扩展的工具，将代码在函数中隐藏信息扩展为在块中</li><li>eval 作用域</li></ul></li></ul><blockquote><p>优先级：声明变量 &gt; 声明普通函数 &gt; 参数 &gt; 变量提升</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 4</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题引入</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">course</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="string">&quot;zhaowa&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">session</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">session</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">&quot;this&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">teacher</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">teacher</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> d = <span class="string">&quot;yy&quot;</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test1&quot;</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test2&quot;</span>, b);</span><br><span class="line"><span class="title function_">course</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="number">111</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test3&quot;</span>, e);</span><br></pre></td></tr></table></figure><ul><li>对于作用域链直接通过创建态来定位作用域链</li><li>手动取消全局，使用块级作用域</li></ul><h4 id="块级作用域和暂时性死区"><a href="#块级作用域和暂时性死区" class="headerlink" title="块级作用域和暂时性死区"></a>块级作用域和暂时性死区</h4><ol><li><p>哪些会构成块级作用域</p><ul><li>if</li><li>for</li><li>{…}</li></ul></li><li><p>暂时性死区</p><ul><li>从 <code>let</code> 声明的变量的块的第一行，到声明变量之间的这个区域，被称为暂时性死区；</li><li>暂时性死区存在时，会让 <code>let</code> 绑定这个区域，在这个区域内，无法执行该变量的其他声明</li></ul></li><li><p>变量提升: 代码的预编译阶段</p><ul><li>会对变量的内存空间进行分配</li><li>对变量声明进行提升，但是值为 undefined</li><li>对所有的非表达式的声明进行提升</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于是 ----------&gt;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar;</span><br><span class="line">bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bar</span>(); <span class="comment">// bar2</span></span><br></pre></td></tr></table></figure><h3 id="垃圾回收机制的策略"><a href="#垃圾回收机制的策略" class="headerlink" title="垃圾回收机制的策略"></a>垃圾回收机制的策略</h3><ol><li>标记清除法：垃圾回收机制获取根并标记他们，然后访问并标记所有来自它们的引用，然后在访问这些对象并标记它们的引用…如此递进结束后若发现有没有标记的 (不可达的) 进行删除，进入执行环境的不能进行删除 (新生代/旧生代/generation/星历图)</li><li>引用计数法：当声明一个变量并给该变量赋值一个引用类型的值时候，该值的计数+1，当该值赋值给另一个变量的时候，该计数+1，当该值被其他值取代的时候，该计数-1，当计数变为 0 的时候，说明无法访问该值了，垃圾回收机制清除该对象<ul><li>缺点：当两个对象循环引用的时候，引用计数无计可施。如果循环引用多次执行的话，会造成崩溃等问题。所以后来被标记清除法取代</li></ul></li></ol><h3 id="this-上下文-context"><a href="#this-上下文-context" class="headerlink" title="this 上下文 context"></a>this 上下文 context</h3><blockquote><p>作用域关注的函数声明在何处，而上下文，主要关注的是，函数从何处开始调用。this 是在执行时动态读取上下文决定的，而不是创建时</p><p>优先级：new &gt; call/apply/bind &gt; 对象调用</p></blockquote><h4 id="函数直接调用中"><a href="#函数直接调用中" class="headerlink" title="函数直接调用中"></a>函数直接调用中</h4><blockquote><p>this 指向的是 window =&gt; 函数表达式、匿名函数、嵌套函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数内部this&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><h4 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h4><blockquote><p>this 的指向是调用堆栈的上一级 =&gt; 对象、数组等引用关系逻辑</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;隐式绑定&quot;</span>, <span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  fn,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">fn</span> = fn;</span><br><span class="line">obj.<span class="title function_">fn</span>(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题引入</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 取出</span></span><br><span class="line"><span class="keyword">let</span> fn1 = foo.<span class="property">fn</span>;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// this 为 window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 追问1， 如何改变指向</span></span><br><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;o1&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 直接使用上下文 - 传统分活</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">text</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;o2&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 呼叫领导执行 - 部门协作</span></span><br><span class="line">    <span class="keyword">return</span> o1.<span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o3 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;o3&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 直接内部构造 - 公共人</span></span><br><span class="line">    <span class="keyword">let</span> fn = o1.<span class="property">fn</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o1fn&quot;</span>, o1.<span class="title function_">fn</span>()); <span class="comment">// o1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o2fn&quot;</span>, o2.<span class="title function_">fn</span>()); <span class="comment">// o1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o3fn&quot;</span>, o3.<span class="title function_">fn</span>()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>在执行函数时，函数被上一级调用，上下文指向上一级</li><li>or 直接变成公共函数，指向 window</li></ul><div class="tip cogs"><p>进一步：将 console.log(‘o2fn’, o2.fn())的结果是 o2</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 人为干涉，改变this - bind/call/apply</span></span><br><span class="line"><span class="comment">// 2. 不许改变this</span></span><br><span class="line"><span class="keyword">const</span> o1 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;o1&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">text</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;o2&quot;</span>,</span><br><span class="line">  <span class="attr">fn</span>: o1.<span class="property">fn</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;o2fn&quot;</span>, o2.<span class="title function_">fn</span>());</span><br><span class="line"><span class="comment">// this指向最后调用他的对象，在fn执行时，o1.fn抢过来挂载在自己o2fn上即可</span></span><br></pre></td></tr></table></figure><h4 id="显式绑定-bind-apply-call"><a href="#显式绑定-bind-apply-call" class="headerlink" title="显式绑定 (bind | apply | call)"></a>显式绑定 (bind | apply | call)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数内部this&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">foo.<span class="title function_">call</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line">foo.<span class="title function_">apply</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bindFoo = foo.<span class="title function_">bind</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;);</span><br><span class="line"><span class="title function_">bindFoo</span>();</span><br></pre></td></tr></table></figure><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><blockquote><p>this 指向的是 new 之后得到的实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;构造函数中的this:&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;类方法中的this:&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;this&quot;</span>);</span><br><span class="line">course.<span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>类中异步方法，this 有区别吗</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;构造函数中的this:&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;类方法中的this:&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">asyncTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步方法外:&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步方法内:&quot;</span>, <span class="variable language_">this</span>); <span class="comment">// 指向window</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;this&quot;</span>);</span><br><span class="line">course.<span class="title function_">test</span>();</span><br><span class="line">course.<span class="title function_">asyncTest</span>();</span><br></pre></td></tr></table></figure><ul><li>执行 setTimeout 时，匿名方法执行时，效果和全局执行函数效果相同</li><li>如何解决：箭头函数</li></ul><h4 id="bind-的原理-手写-bind"><a href="#bind-的原理-手写-bind" class="headerlink" title="bind 的原理 / 手写 bind"></a>bind 的原理 / 手写 bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sum&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在不考虑 new 的优先级的情况下：</span></span><br><span class="line"><span class="comment">// 1. 需求：手写bind =&gt; bind位置 (挂在那里)  =&gt; Function.prototype</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span> =</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 2. bind是什么?</span></span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// args特点，第一项是新的this，第二项~最后一项函数传参</span></span><br><span class="line">    <span class="keyword">const</span> newThis = args.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// a. 返回一个函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// b. 返回原函数执行结果 c. 传参不变</span></span><br><span class="line">      <span class="keyword">return</span> _this.<span class="title function_">apply</span>(newThis, args);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果考虑到 new 的优先级</span></span><br><span class="line"><span class="comment">// bind 返回的函数如果作为构造函数，搭配 new 关键字出现的话，这种绑定，就需要被忽略，this要绑定在实例上，也就是说，new 操作符要高于bind 绑定：</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newBind</span> =</span><br><span class="line">  <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// get bind &#x27;s params</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">var</span> bound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> innerArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">      <span class="keyword">const</span> allArgs = [...args, ...innerArgs];</span><br><span class="line">      <span class="comment">// 如果存在new, 我绑定的对象不一样了。</span></span><br><span class="line">      <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> F ? <span class="variable language_">this</span> : context || <span class="variable language_">this</span>, allArgs);</span><br><span class="line">    &#125;;</span><br><span class="line">    bound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// call</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newCall</span> = <span class="keyword">function</span> (<span class="params">ctx, ...args</span>) &#123;</span><br><span class="line">  ctx = ctx === <span class="literal">null</span> || ctx === <span class="literal">undefined</span> ? globalThis : <span class="title class_">Object</span>.<span class="title function_">create</span>(ctx);</span><br><span class="line">  <span class="comment">// 用显式调用的方式，进行模拟。</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(ctx, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = ctx[key](...args);</span><br><span class="line">    <span class="keyword">delete</span> ctx[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">this</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">newApply</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="comment">// 边缘检测</span></span><br><span class="line">  <span class="comment">// 函数检测</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 参数检测</span></span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载执行函数</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行执行函数</span></span><br><span class="line">  <span class="keyword">let</span> result = <span class="variable language_">arguments</span>[<span class="number">1</span>] ? context.<span class="title function_">fn</span>(...<span class="variable language_">arguments</span>[<span class="number">1</span>]) : context.<span class="title function_">fn</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁临时挂载</span></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="call、apply、bind-的区别"><a href="#call、apply、bind-的区别" class="headerlink" title="call、apply、bind 的区别"></a>call、apply、bind 的区别</h4><ul><li>call、apply 是立即执行的: fun.call(obj) 即可，fun.bind(obj)() 与之不同，bind 返回的是函数</li><li>apply 第二个参数为数组，call 和 bind 需要挨个写</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, arr));</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>定义：闭包是一个函数加上到创建函数的作用域的连接，关闭了函数的自由变量，不会被垃圾回收。</p><ul><li>一个函数和他周围状态的引用捆绑在一起的组合 (函数嵌套函数时，内层函数引用了外层函数作用域下的变量，并且内层函数，在全局环境下可访问，就形成了闭包)</li></ul></blockquote><ol><li><p>优点：</p><ul><li>内部函数可以访问外部函数的局部变量</li><li>记录一些索引相关的问题</li></ul></li><li><p>缺点：</p><ul><li>变量保留在内存中，造成内存损耗 (内存泄漏只在低版本的 ie 浏览器中存在)<ul><li>解决：把闭包的函数设置为 null</li></ul></li></ul></li><li><p>闭包是否会导致内存泄漏：</p><ul><li>持有了不在需要的函数引用，会导致函数关联的词法环境无法销毁，导致内存泄漏</li><li>当多个函数共享词法环境时，会导致词法环境膨胀，从而导致出现无法触达也无法回收的内存空间</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">5</span>; <span class="comment">// 10 // 20</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">number</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">fn1</span>: (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里是一个立即执行函数，所以 JS 在解析的时候就会执行。</span></span><br><span class="line">    <span class="keyword">var</span> number; <span class="comment">// 持久化变量 3 -- 9 -- 27</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> *= <span class="number">2</span>; <span class="comment">// 全局定义的 number，会变成 10；</span></span><br><span class="line">    number = number * <span class="number">2</span>;</span><br><span class="line">    number = <span class="number">3</span>; <span class="comment">// 这里是3；</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="variable language_">this</span>.<span class="property">number</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">number</span> *= <span class="number">2</span>; <span class="comment">// 全局的又变成了 20</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// --》【10】 --〉 3</span></span><br><span class="line">      number *= <span class="number">3</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(number); <span class="comment">// --》 【9】。--〉 27</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn1 = obj.<span class="property">fn1</span>;</span><br><span class="line">fn1.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">// fn1();</span></span><br><span class="line">obj.<span class="title function_">fn1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">number</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10， 9， 3， 27 ，20 //</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;ul&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>&lt;ul&gt;</span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    lis[i] = <span class="literal">null</span>; <span class="comment">// 解决内存损耗</span></span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125; <span class="comment">// 依次打印索引</span></span><br></pre></td></tr></table></figure><h4 id="函数作为返回值的场景"><a href="#函数作为返回值的场景" class="headerlink" title="函数作为返回值的场景"></a>函数作为返回值的场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&quot;信&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> envelop = <span class="title function_">mail</span>();</span><br><span class="line"><span class="title function_">envelop</span>();</span><br></pre></td></tr></table></figure><ul><li>函数外部获取到了函数作用域内的变量值</li></ul><h4 id="函数作为参数的时候"><a href="#函数作为参数的时候" class="headerlink" title="函数作为参数的时候"></a>函数作为参数的时候</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单一职责</span></span><br><span class="line"><span class="keyword">let</span> content;</span><br><span class="line"><span class="comment">// 通用存储</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">envelop</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  content = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mail</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">envelop</span>(mail);</span><br></pre></td></tr></table></figure><h4 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">innerFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    counter++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(counter);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outerFn</span>()();</span><br></pre></td></tr></table></figure><h4 id="事件处理-异步执行-的闭包"><a href="#事件处理-异步执行-的闭包" class="headerlink" title="事件处理 (异步执行) 的闭包"></a>事件处理 (异步执行) 的闭包</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    lis[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="立即执行嵌套"><a href="#立即执行嵌套" class="headerlink" title="立即执行嵌套"></a>立即执行嵌套</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">immediateA</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> <span class="title function_">immediateB</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 0</span></span><br><span class="line">  &#125;)(<span class="number">1</span>);</span><br><span class="line">&#125;)(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="当立即执行遇上块级作用域"><a href="#当立即执行遇上块级作用域" class="headerlink" title="当立即执行遇上块级作用域"></a>当立即执行遇上块级作用域</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">immediate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">// 0</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="拆分执行"><a href="#拆分执行" class="headerlink" title="拆分执行"></a>拆分执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIncrement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> message = <span class="string">`count is <span class="subst">$&#123;count&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [increment, log];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> [increment, log] = <span class="title function_">createIncrement</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="title function_">increment</span>();</span><br><span class="line"><span class="title function_">log</span>(); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="实现私有变量"><a href="#实现私有变量" class="headerlink" title="实现私有变量"></a>实现私有变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createStack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">items</span>: [],</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">item</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stack = &#123;</span><br><span class="line">  <span class="attr">items</span>: [],</span><br><span class="line">  <span class="attr">push</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createStack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> items = [];</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">item</span>) &#123;</span><br><span class="line">      items.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Vuex store</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程</title>
      <link href="/articles/front_base/oop/"/>
      <url>/articles/front_base/oop/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向对象 —— 逻辑迁移更加灵活、代码复用性高、高度的模块化</p></blockquote><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><blockquote><p>实现 js 的面向对象。一个能面向对象的语言必须要做到：能判定一个实例的类型。原型的存在避免了类型的丢失。</p></blockquote><ul><li>new 不支持对象共享属性和方法，原型支持</li><li>函数拥有 prototype，对象拥有 <code>__proto__</code></li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>作用：让某一个构造函数实例化的所有对象可以找到公共的属性和方法</p><ul><li>每个对象都有一个原型，并从原型上继承属性和方法。原型本身也是一个对象，也有自己的原型，形成一个链式结构</li><li>把原型串联起来，最顶端是 null</li></ul></blockquote><p><img src="/images/front-base/oop_1.png" alt=""></p><p><img src="/images/front-base/oop_2.png" alt=""></p><h4 id="查找规则"><a href="#查找规则" class="headerlink" title="查找规则"></a>查找规则</h4><blockquote><p>对象本身 ==&gt; 构造函数 ==&gt; 对象原型 ==&gt; 构造函数原型 ==&gt; 对象上一层原型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&quot;查找第二步&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Fun</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;查找第四步&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&quot;查找第一步&quot;</span>;</span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">a</span> = <span class="string">&quot;查找第三步&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="string">&quot;查找第五步&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>);</span><br></pre></td></tr></table></figure><h4 id="object-proto-vs-object-prototype"><a href="#object-proto-vs-object-prototype" class="headerlink" title="object.__proto__ vs object.prototype"></a><code>object.__proto__</code> vs <code>object.prototype</code></h4><ol><li>js 中每个对象都有一个原型对象 prototype (null 除外)</li><li><code>object.__proto__</code> 为浏览器提供用于获取 prototype 的非标准方法，只读不可赋值，并且修改该属性会造成严重的性能问题，因为 JavaScript 通过隐藏类优化了很多原有的对象结构，直接修改 <code>__proto__</code> 会直接破坏现有已经优化的结构，触发 V8 重构该对象的隐藏类</li><li>es5 提供了获取原型的标准方法 Object.getPrototypeOf</li><li>每个构造函数都有一个 prototype 属性，指向实例对象的原型对象</li><li>object.prototype 可以为实例对象添加原型的属性和方法</li></ol><h3 id="js-对象"><a href="#js-对象" class="headerlink" title="js 对象"></a>js 对象</h3><blockquote><p>本质上并不是基于类，而是基于构造函数 + 原型链</p></blockquote><h4 id="创建-js-对象"><a href="#创建-js-对象" class="headerlink" title="创建 js 对象"></a>创建 js 对象</h4><blockquote><p>核心：<code>obj.__proto__</code> = Object.prototype</p></blockquote><h5 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">create</span> 创建了一个对象;</span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(q)  -&gt;  p.<span class="property">__proto__</span> = q; <span class="comment">// p 的原型，指向了 q;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当需要调用p对象的一个方法或者属性的时候，如果 p 上面没有，回去 q 上去找。</span></span><br></pre></td></tr></table></figure><h5 id="var-obj"><a href="#var-obj" class="headerlink" title="var obj = {}"></a>var obj = {}</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;);</span><br><span class="line"><span class="comment">// 相当于:</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj);</span><br><span class="line"><span class="comment">// 相当于: p.__proto__ = obj;</span></span><br><span class="line">p.<span class="property">__proto__</span>.<span class="property">__proto__</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#125; 相当于 Object.create(Object.prototype);</span></span><br></pre></td></tr></table></figure><h5 id="new-Function"><a href="#new-Function" class="headerlink" title="new Function()"></a>new Function()</h5><ul><li>创建了一个对象;</li><li>该对象的原型，指向了这个 Function（构造函数）的 prototype;</li><li>将当前实例对象赋给了内部 this</li><li>该对象实现了这个构造函数的方法;</li><li>根据一些特定情况返回对象<ul><li>如果没有返回值，则返回创建的对象；</li><li>如果有返回值，是一个对象，则返回该对象；</li><li>如果有返回值，不是个对象，则返回创建的对象；</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newObj</span>(<span class="params">Father</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Father</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">      <span class="string">&quot;new operator function the frist param must be a function!&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 步骤一个步骤二</span></span><br><span class="line">  <span class="comment">// var obj = &#123;&#125;; // 创建空对象</span></span><br><span class="line">  <span class="comment">// Object.setPrototypeOf(obj, Father.protytype); // 原型指向</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 一二步骤可合并，此方法可直接指定原型指向</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 步骤三：this指向</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="title class_">Father</span>.<span class="title function_">apply</span>(obj, <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result &amp;&amp; <span class="keyword">typeof</span> result === <span class="string">&quot;object&quot;</span> &amp;&amp; result !== <span class="literal">null</span> ? result : obj;</span><br><span class="line">  <span class="comment">// instanceof也可以</span></span><br><span class="line">  <span class="comment">// return result &amp;&amp; result instanceof Object ? result : obj;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// newObj(Person, name, age)</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// Person 是构造函数。</span></span><br><span class="line">p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>; <span class="comment">//  = &#123; ..., constructor: Person &#125;;</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>;</span><br><span class="line">p.<span class="property">constructor</span> === <span class="title class_">Person</span>;</span><br></pre></td></tr></table></figure><h4 id="constructor-prototype"><a href="#constructor-prototype" class="headerlink" title="constructor + prototype"></a>constructor + prototype</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params">teacher</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = teacher;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">leader</span> = <span class="string">&quot;小可&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startCourse</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`开始<span class="subst">$&#123;name&#125;</span>课`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;数学&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>Course 本质就是构造函数</p></blockquote><ul><li>函数体内使用的 this，指向所要生成的实例</li><li>生成对象用 new 来进行实例化</li><li>可以做初始化传参</li></ul><div class="tip cogs"><p>如果构造函数不初始化，可以使用吗？ - 无法使用<br>如果项目中需要使用，通常（不被外界感知）如何解决？</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _isClass = <span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Course</span>;</span><br><span class="line">  <span class="keyword">if</span> (!_isClass) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = <span class="string">&quot;胜利哥&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">leader</span> = <span class="string">&quot;小可&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startCourse</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`开始<span class="subst">$&#123;name&#125;</span>课`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用方</span></span><br><span class="line"><span class="keyword">const</span> course = <span class="title class_">Course</span>();</span><br></pre></td></tr></table></figure><ul><li>启发：如果编写底层的 api 代码时，尽量做到不需要让外部感知内部类型</li></ul><h4 id="constructor-是什么？"><a href="#constructor-是什么？" class="headerlink" title="constructor 是什么？"></a>constructor 是什么？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params">teacher, leader</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = teacher;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">leader</span> = leader;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;云隐&quot;</span>, <span class="string">&quot;小可&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>每个对象在创建时，会自动拥有一个构造函数属性 constructor</li><li>constructor 继承自原型对象，指向了构造函数的引用</li></ul><h4 id="构造函数的问题"><a href="#构造函数的问题" class="headerlink" title="构造函数的问题"></a>构造函数的问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = <span class="string">&quot;胜利&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">leader</span> = <span class="string">&quot;小可&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">startCourse</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`开始<span class="subst">$&#123;name&#125;</span>课`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course1 = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;es6&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> course2 = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;OOP&quot;</span>);</span><br><span class="line"><span class="comment">// 构造函数中的方法，会存在于每一个生成的实例里，重复的挂载其实是会导致资源浪费</span></span><br></pre></td></tr></table></figure><h5 id="解决方案：挂在原型对象上"><a href="#解决方案：挂在原型对象上" class="headerlink" title="解决方案：挂在原型对象上"></a>解决方案：挂在原型对象上</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> course1 = <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line"><span class="keyword">const</span> course2 = <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br></pre></td></tr></table></figure><ol><li>构造函数： 用来初始化创建对象的函数 - Course</li></ol><ul><li>自动给构造函数赋予一个属性 prototype，该属性等于实例对象的原型对象</li></ul><ol><li>实例对象：course1 是实例对象，根据原型对象创建出来的实例</li></ol><ul><li>每个对象中都有一个 <code>__proto__</code></li><li>每个实例对象都有一个 constructor</li><li>constructor 有继承而来，并指向当前的构造函数</li><li>原型对象：Course.prototype</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">teacher</span> = <span class="string">&quot;胜利&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> course1 = <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line"><span class="keyword">const</span> course2 = <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对上篇原型对象做优化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Course</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">teacher</span> = <span class="string">&quot;胜利&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">leader</span> = <span class="string">&quot;小可&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法挂载于prototype上</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">startCourse</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`开始<span class="subst">$&#123;name&#125;</span>课`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course1 = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;es6&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> course2 = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;OOP&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>在原型对象的所有属性和方法，都能被实例所共享</p><p><img src="/images/front-base/oop_3.png" alt=""></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Game类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// LOL类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">LOL</span>;</span><br><span class="line"><span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title function_">LOL</span>();</span><br><span class="line"><span class="comment">// 本质：重写原型对象方式，将父对象的属性方法，作为子对象原型对象的属性和方法</span></span><br></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skin</span> = [<span class="string">&quot;s&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LOL类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">LOL</span>;</span><br><span class="line"><span class="keyword">const</span> game1 = <span class="keyword">new</span> <span class="title function_">LOL</span>();</span><br><span class="line"><span class="keyword">const</span> game2 = <span class="keyword">new</span> <span class="title function_">LOL</span>();</span><br><span class="line">game1.<span class="property">skin</span>.<span class="title function_">push</span>(<span class="string">&quot;ss&quot;</span>);</span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>父类属性一旦赋值给子类的原型属性，此时属性属于子类的共享属性了，如果有属性是引用类型，一旦某个实例，修改了这个属性，所有的都会被改</li><li>实例化子类时，无法向父类做传参</li></ul><h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><blockquote><p>经典继承：在子类构造函数内部调用父类构造函数（把 Parent 上的属性和方法，添加到 Child 上面去，而不是都存在在原型对象上，防止被实例共享）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skin</span> = [<span class="string">&quot;s&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LOL类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="title class_">Game</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game3 = <span class="keyword">new</span> <span class="title function_">LOL</span>(<span class="string">&quot;arg&quot;</span>);</span><br><span class="line"><span class="comment">// 解决了共享属性的问题 + 子向父传参问题</span></span><br></pre></td></tr></table></figure><p>缺点：</p><ul><li>属性或者方法向被继承的话，只能在构造函数中定义</li><li>如果方法在构造函数中定义了，那么每次创建实例都会创建一遍方法</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><blockquote><p>解决原型链上的共享方法无法被读取继承</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skin</span> = [<span class="string">&quot;s&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LOL类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="title class_">Game</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">LOL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game3 = <span class="keyword">new</span> <span class="title function_">LOL</span>();</span><br></pre></td></tr></table></figure><p>缺点：</p><p>无论何种场景，都会调用两次父类构造函数。</p><ul><li>初始化子类原型时</li><li>子类调用函数内部 call 父类的时候</li></ul><h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skin</span> = [<span class="string">&quot;s&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LOL类</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="title class_">Game</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">LOL</span>;</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>看起来完美解决了继承，但是如何实现多重继承？</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lol&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skin</span> = [<span class="string">&quot;s&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Store</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">shop</span> = <span class="string">&quot;steam&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Store</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getPlatform</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">shop</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LOL</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="title class_">Game</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">  <span class="title class_">Store</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// LOL.prototype = Object.create(Store.prototype);</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Store</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable constant_">LOL</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="variable constant_">LOL</span>;</span><br><span class="line"><span class="comment">// LOL继承两类</span></span><br><span class="line"><span class="keyword">const</span> game3 = <span class="keyword">new</span> <span class="title function_">LOL</span>();</span><br></pre></td></tr></table></figure><h3 id="es6-继承"><a href="#es6-继承" class="headerlink" title="es6 继承"></a>es6 继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="comment">// this.xxx</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// super 作为函数调用时，要求自雷必须执行一次。</span></span><br><span class="line"><span class="comment">// 因为子类自己的 this 对象，必须通过父类的构造函数完成。</span></span><br><span class="line"><span class="comment">// es6 继承， 会继承静态的方法和属性。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式变编程</title>
      <link href="/articles/front_base/functional/"/>
      <url>/articles/front_base/functional/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="背景引入"><a href="#背景引入" class="headerlink" title="背景引入"></a>背景引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题： 上接浏览器原理 —— 参数 parse</span></span><br><span class="line"><span class="comment">// 1. 数组在url中展示形式</span></span><br><span class="line"><span class="comment">// location.search =&gt; &#x27;?name[]=progressive$%coding&amp;name[]=objective$%coding&amp;name[]=functional$%coding&#x27;</span></span><br><span class="line"><span class="comment">// 2. 参数提取拼接成数组</span></span><br><span class="line"><span class="comment">// [&#x27;progressive$%coding&#x27;, &#x27;objective$%coding&#x27;, &#x27;functional$%coding&#x27;]</span></span><br><span class="line"><span class="comment">// 3. 手写方法，转换成数组对象</span></span><br><span class="line"><span class="comment">// [&#123;name: &#x27;Progressive Coding&#x27;&#125;, &#123;name: &#x27;Objective Coding&#x27;&#125;, &#123;name: &#x27;Functional Coding&#x27;&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _array = [<span class="string">&#x27;progressive$%coding&#x27;</span>, <span class="string">&#x27;objective$%coding&#x27;</span>, <span class="string">&#x27;functional$%coding&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> _objArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">nameParser</span> = (<span class="params">array, objArr</span>) =&gt; &#123;</span><br><span class="line">    array.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> names = item.<span class="title function_">split</span>(<span class="string">&#x27;$%&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> newName = [];</span><br><span class="line"></span><br><span class="line">        names.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> nameItem = name[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + name.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            newName.<span class="title function_">push</span>(nameItem);</span><br><span class="line">        &#125;)</span><br><span class="line">        objArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: newName.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> objArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nameParser</span>(_array, _objArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题：</span></span><br><span class="line"><span class="comment">// 1. 过程中存在逻辑包裹 - 看完整段代码，才能明白在做啥</span></span><br><span class="line"><span class="comment">// 2. 存在临时变量，并且收尾封闭 - 迭代拓展难度高</span></span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step1. 需求分析 =&gt; 数组 &gt; 数组对象 =&gt; [字符串 &gt; 对象]</span></span><br><span class="line"><span class="comment">// nameParser =&gt; [objHelper :: string &gt; object]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step2. 模块功能明确 =&gt; objHelper = formatName + assembleObj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step3. 功能拆分 =&gt; objHelper = [(split + capitalize + join)] + assembleObj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step4. 代码实现</span></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">const</span> _array = [<span class="string">&#x27;progressive$%coding&#x27;</span>, <span class="string">&#x27;objective$%coding&#x27;</span>, <span class="string">&#x27;functional$%coding&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">assembleObj</span> = (<span class="params">key, x</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    obj[key] = x;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">capitalize</span> = name =&gt; name[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + name.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组装描述</span></span><br><span class="line"><span class="keyword">const</span> formatName = R.<span class="title function_">compose</span>(<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>), <span class="title function_">map</span>(capitalize), <span class="title function_">split</span>(<span class="string">&#x27;$%&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> objHelper = R.<span class="title function_">compose</span>(<span class="title function_">assembleObj</span>(<span class="string">&#x27;name&#x27;</span>), formatName);</span><br><span class="line"><span class="keyword">const</span> nameParser = <span class="title function_">map</span>(objHelper);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="title function_">nameParser</span>(_array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题：正确的遍历 - for forEach （map （filter sort））……</span></span><br><span class="line"><span class="comment">// 本质作用 =&gt; 通用遍历 | 遍历逻辑处理 | 生成数组 - 处理后 | 生成数组 - 处理后 - 过滤 | 生成数组 - 处理后 - 排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">class</span> = <span class="string">&#x27;functional&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> isOvered = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach</span></span><br><span class="line">classArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    isOvered = item === <span class="keyword">class</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">classArr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">name</span> === <span class="string">&#x27;functional&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数式编程特点"><a href="#函数式编程特点" class="headerlink" title="函数式编程特点"></a>函数式编程特点</h2><blockquote><p>函数: 一等公民，辑功能实现的落脚点<br>声明式编程 =&gt; 声明需求 =&gt; 语义化<br>惰性执行 - 无缝连接，性能节约</p></blockquote><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ul><li>加法结合律 | 因式分解 | 完全平方公式 =&gt;  a + b + c = (a + b) + c 原子组合的变化</li><li>水源 =&gt; 组合（水管 + 走线）=&gt; 浴缸</li></ul><h3 id="理论思想"><a href="#理论思想" class="headerlink" title="理论思想"></a>理论思想</h3><blockquote><ol><li>函数是一等公民：函数可以作为参数传递给其他函数或作为返回值返回。</li><li>纯函数：函数的输出仅由输入决定，不会对外部状态产生影响。</li><li>没有副作用：函数不会修改程序状态或全局变量，只会返回新的值。</li><li>高阶函数：函数可以接受其他函数作为参数，也可以返回一个函数。</li><li>数据不可变性：数据一旦创建就不能被修改。因此，函数式编程通常使用不可变数据结构，例如列表、字典、集合等。函数式编程还鼓励使用递归而不是循环，因为递归更符合函数式编程的思想。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 惰性函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">program</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&quot;progressive&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (program = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;progressive&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name === <span class="string">&quot;objective&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (program = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;objective&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (program = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;functional&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">program</span>(<span class="string">&quot;progressive&quot;</span>)();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;lazy&quot;</span>);</span><br><span class="line"><span class="title function_">program</span>(); <span class="comment">// 函数提升</span></span><br><span class="line"><span class="comment">// progressive lazy progressive</span></span><br></pre></td></tr></table></figure><h3 id="无状态与无副作用-rxjs"><a href="#无状态与无副作用-rxjs" class="headerlink" title="无状态与无副作用 - rxjs"></a>无状态与无副作用 - rxjs</h3><ul><li>无状态 - 幂等；数据不可变 - 不可操作改变源数据</li><li>无副作用 - 函数内部不应该直接对整个系统中任何参数变量做改动</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ol><li>优点：变量不可变，引用透明，天生适合并发。表达方式更加符合人类日常生活中的语法，代码可读性更强。实现同样的功能函数式编程所需要的代码比面向对象编程要少很多，代码更加简洁明晰。函数式编程广泛运用于科学研究中，因为在科研中对于代码的工程化要求比较低，写起来更加简单，所以使用函数式编程开发的速度比用面向对象要高很多，如果是对开发速度要求较高但是对运行资源要求较低同时对速度要求较低的场景下使用函数式会更加高效。</li><li>缺点：由于所有的数据都是不可变的，所以所有的变量在程序运行期间都是一直存在的，非常占用运行资源。同时由于函数式的先天性设计导致性能一直不够。虽然现代的函数式编程语言使用了很多技巧比如惰性计算等来优化运行速度，但是始终无法与面向对象的程序相比，当然面向对象程序的速度也不够快。函数式编程虽然已经诞生了很多年，但是至今为止在工程上想要大规模使用函数式编程仍然有很多待解决的问题，尤其是对于规模比较大的工程而言。如果对函数式编程的理解不够深刻就会导致跟面相对象一样晦涩难懂的局面。</li></ol><h3 id="vs-POP"><a href="#vs-POP" class="headerlink" title="vs POP"></a>vs POP</h3><ol><li>状态和副作用的处理方式不同：过程式编程中，通常会有多个全局变量，函数会修改这些全局变量的值，从而实现状态的更新和副作用的产生。而函数式编程中，函数通常不会修改传入的参数和外部状态，它们只是根据输入计算输出，避免了副作用。</li><li>数据结构的处理方式不同：过程式编程中，通常会使用诸如数组和链表等数据结构，这些数据结构可以在程序的执行过程中被修改和操作。而函数式编程中，通常会使用不可变的数据结构，例如列表和元组，这些数据结构在创建之后不可变，任何修改操作都会返回一个新的数据结构。</li><li>控制流的处理方式不同：过程式编程中，通常会使用循环、条件分支等控制流结构，这些结构会改变程序的执行顺序和流程。而函数式编程中，通常会使用递归和高阶函数等技术来控制程序的执行流程。</li><li>函数的作用不同：过程式编程中，函数通常被视为一系列指令的集合，用来完成某个具体的任务。而函数式编程中，函数通常被视为一种映射关系，用来将输入映射为输出，函数的作用是描述输入和输出之间的关系。</li></ol><h3 id="vs-OOP"><a href="#vs-OOP" class="headerlink" title="vs OOP"></a>vs OOP</h3><ol><li>数据和行为的处理方式：在 OOP 中，数据和行为通常是紧密耦合的，一个对象包含一些属性和方法来操作这些属性。在函数式编程中，数据和行为通常是分离的，函数只处理输入数据，而不改变它们的状态。</li><li>程序的设计和组织方式：在 OOP 中，程序通常是由一些对象组成，每个对象负责处理一些任务。在函数式编程中，程序通常是由一些函数组成，每个函数负责处理一个特定的问题。</li><li>程序的可读性和可维护性：函数式编程通常使用不可变的数据结构，这可以使程序更加可读和可维护。同时，函数式编程也通常使用纯函数，这可以使程序更加可靠和可测试。</li><li>各有优缺点：在处理递归问题时，函数式编程可以比面向对象编程更加简洁和自然；而在处理大规模、复杂的系统时，面向对象编程可以提供更好的组织和抽象能力。</li></ol><h2 id="实际开发"><a href="#实际开发" class="headerlink" title="实际开发"></a>实际开发</h2><h3 id="纯函数改造"><a href="#纯函数改造" class="headerlink" title="纯函数改造"></a>纯函数改造</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _class = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;objective&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 函数内部引入外部变量后 —— 违反了无状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">score</span> = (<span class="params">str</span>) =&gt; _class.<span class="property">name</span> + <span class="string">&quot;:&quot;</span> + str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改了传入参数 —— 无副作用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeClass</span> = (<span class="params">obj, name</span>) =&gt; (obj.<span class="property">name</span> = name);</span><br><span class="line"></span><br><span class="line"><span class="title function_">changeClass</span>(_class, <span class="string">&quot;functional&quot;</span>);</span><br><span class="line"><span class="title function_">score</span>(<span class="string">&quot;good!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// #######################</span></span><br><span class="line"><span class="keyword">const</span> _class = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;objective&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">score</span> = (<span class="params">obj, str</span>) =&gt; obj.<span class="property">name</span> + <span class="string">&quot;:&quot;</span> + str; <span class="comment">// 不依赖外部变量</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeClass</span> = (<span class="params">obj, name</span>) =&gt; (&#123; ...obj, name &#125;); <span class="comment">// 未修改外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">changeClass</span>(_class, <span class="string">&quot;functional&quot;</span>);</span><br><span class="line"><span class="title function_">score</span>(_class, <span class="string">&quot;good!&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="流水线组装-加工-amp-组装"><a href="#流水线组装-加工-amp-组装" class="headerlink" title="流水线组装 - 加工 &amp; 组装"></a>流水线组装 - 加工 &amp; 组装</h3><h4 id="a-加工-柯里化"><a href="#a-加工-柯里化" class="headerlink" title="a. 加工 - 柯里化"></a>a. 加工 - 柯里化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// f(x, y, z) -&gt; f(x)(y)(z)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">x, y</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现 体系 = 加工 + 组装，单个加工输入输出应当单值化 -&gt; 需求</span></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="title function_">ajax</span>(method, url, params);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="title function_">ajax</span>(method);</span><br><span class="line"><span class="keyword">const</span> fetch = <span class="title function_">request</span>(url);</span><br><span class="line"><span class="title function_">ajax</span>(method)(url)(params);</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题: 问题：手写构造可拆分传参的累加函数 add(1)(2)(3)……</p></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 构造科里化结构</span></span><br><span class="line"><span class="comment">// 2. 输入 处理外部arguments =&gt; 类数组形态处理</span></span><br><span class="line"><span class="comment">// 3. 传入参数无限拓展 =&gt; 递归 内层逻辑 =&gt; 返回函数</span></span><br><span class="line"><span class="comment">// 4. 主功能实现 =&gt; 累加</span></span><br><span class="line"><span class="comment">// 5. 输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 输入</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内层处理</span></span><br><span class="line">  <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>); <span class="comment">// 内外层参数合并</span></span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  inner.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev + cur;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> + <span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>); <span class="comment">// &#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>), <span class="number">10</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> args = [...<span class="variable language_">arguments</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> inner = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    args.<span class="title function_">push</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (![...<span class="variable language_">arguments</span>].<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prev + cur;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">10</span>, <span class="number">100</span>)(<span class="number">1000</span>)());</span><br></pre></td></tr></table></figure><h4 id="b-流水线-组装函数"><a href="#b-流水线-组装函数" class="headerlink" title="b. 流水线 - 组装函数"></a>b. 流水线 - 组装函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum1</span> = (<span class="params">x</span>) =&gt; x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sum2</span> = (<span class="params">x</span>) =&gt; x + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> sum12 = <span class="title function_">compose</span>(sum1, sum2);</span><br><span class="line"><span class="title function_">sum12</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><blockquote><p>实际实现使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令式</span></span><br><span class="line"><span class="title function_">trim</span>(<span class="title function_">reverse</span>(<span class="title function_">toUpperCase</span>(<span class="title function_">map</span>(arr))));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向对象</span></span><br><span class="line">arr.<span class="title function_">map</span>().<span class="title function_">toUpperCase</span>().<span class="title function_">reverse</span>().<span class="title function_">trim</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">compose</span>(trim, reverse, toUpperCase, map);</span><br><span class="line"><span class="title function_">pipe</span>(map, toUpperCase, reverse, trim); <span class="comment">// history | grep rm</span></span><br></pre></td></tr></table></figure><h2 id="BOX-与-函子"><a href="#BOX-与-函子" class="headerlink" title="BOX 与 函子"></a>BOX 与 函子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一封信</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mail</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = content;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">map</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Mail</span>(<span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">content</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 拆开信</span></span><br><span class="line"><span class="keyword">let</span> mail1 = <span class="keyword">new</span> <span class="title class_">Mail</span>(<span class="string">&quot;love&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 读了信</span></span><br><span class="line"><span class="keyword">let</span> mail2 = mail1.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">mail</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">read</span>(mail);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3. 烧了信</span></span><br><span class="line"><span class="keyword">let</span> mail3 = mail1.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">mail</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">burn</span>(mail);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 4. 老师查寝时候</span></span><br><span class="line">mail3.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">mail</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">check</span>(mail);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">mail</span>(<span class="string">&quot;love&quot;</span>).<span class="title function_">map</span>(read).<span class="title function_">map</span>(burn).<span class="title function_">map</span>(check);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typeScript</title>
      <link href="/articles/front_base/ts/"/>
      <url>/articles/front_base/ts/</url>
      
        <content type="html"><![CDATA[<h2 id="TS-的基础概念"><a href="#TS-的基础概念" class="headerlink" title="TS 的基础概念"></a>TS 的基础概念</h2><h3 id="什么是-TS"><a href="#什么是-TS" class="headerlink" title="什么是 TS"></a>什么是 TS</h3><ul><li>JS 的一个超集，在原有的语法基础上，添加强类型并切换为基于类的面向对象语言</li></ul><ol><li>面向项目<br>TS - 面向解决大型的复杂项目、架构、代码维护复杂场景<br>JS - 脚本化语言，用于面向简单页面场景</li><li>自主检测<br>TS - 编译时，主动发现并纠正错误<br>JS - 运行时，执行报错</li><li>类型检测<br>TS - 强类型语言，支持动态和静态的类型检测<br>JS - 弱类型语言，无静态类型选项</li><li>运行流程<br>TS - 依赖编译，依靠编译打包实现在浏览器端的运行<br>JS - 可直接在浏览器端运行</li><li>复杂特性<br>TS - 模块化、接口、泛型</li></ol><h3 id="TS-基础类型和语法"><a href="#TS-基础类型和语法" class="headerlink" title="TS 基础类型和语法"></a>TS 基础类型和语法</h3><ul><li>boolean、string、number、array、null、undefined</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es</span></span><br><span class="line"><span class="keyword">let</span> isEnable = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> className = <span class="string">&quot;baidu&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> classNum = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> u = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> classArr = [<span class="string">&quot;basic&quot;</span>, <span class="string">&quot;execute&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// TS</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">isEnable</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">className</span>: <span class="built_in">string</span> = <span class="string">&quot;baidu&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">classNum</span>: <span class="built_in">number</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 统一方式 &amp; &lt;&gt;方式</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">classArr</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;basic&quot;</span>, <span class="string">&quot;execute&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">classArr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;basic&quot;</span>, <span class="string">&quot;execute&quot;</span>];</span><br></pre></td></tr></table></figure><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tupleType</span>: [<span class="built_in">string</span>, <span class="built_in">boolean</span>] = [<span class="string">&quot;basic&quot;</span>, <span class="literal">false</span>];</span><br></pre></td></tr></table></figure><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字型枚举 - 默认从0开始，依次递增</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Score</span> &#123;</span><br><span class="line">  <span class="variable constant_">BAD</span>, <span class="comment">// 0</span></span><br><span class="line">  <span class="variable constant_">NG</span>, <span class="comment">// 1</span></span><br><span class="line">  <span class="variable constant_">GOOD</span>, <span class="comment">// 2</span></span><br><span class="line">  <span class="variable constant_">PERFECT</span>, <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">score</span>: <span class="title class_">Score</span> = <span class="title class_">Score</span>.<span class="property">BAD</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串类型枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Score</span> &#123;</span><br><span class="line">  <span class="variable constant_">BAD</span> = <span class="string">&quot;BAD&quot;</span>,</span><br><span class="line">  <span class="variable constant_">NG</span> = <span class="string">&quot;NG&quot;</span>,</span><br><span class="line">  <span class="variable constant_">GOOD</span> = <span class="string">&quot;GOOD&quot;</span>,</span><br><span class="line">  <span class="variable constant_">PERFECT</span> = <span class="string">&quot;PERFECT&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反向映射</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Score</span> &#123;</span><br><span class="line">  <span class="variable constant_">BAD</span>, <span class="comment">// 0</span></span><br><span class="line">  <span class="variable constant_">NG</span>, <span class="comment">// 1</span></span><br><span class="line">  <span class="variable constant_">GOOD</span>, <span class="comment">// 2</span></span><br><span class="line">  <span class="variable constant_">PERFECT</span>, <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> scoreName = <span class="title class_">Score</span>[<span class="number">0</span>]; <span class="comment">// BAD</span></span><br><span class="line"><span class="keyword">let</span> scoreVale = <span class="title class_">Score</span>[<span class="string">&quot;BAD&quot;</span>]; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异构</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Enum</span> &#123;</span><br><span class="line">  A, <span class="comment">// 0</span></span><br><span class="line">  B, <span class="comment">// 1</span></span><br><span class="line">  C = <span class="string">&quot;C&quot;</span>,</span><br><span class="line">  D = <span class="string">&quot;D&quot;</span>,</span><br><span class="line">  E = <span class="number">8</span>,</span><br><span class="line">  F, <span class="comment">// 9</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Enum</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="title class_">Enum</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 正向</span></span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;A&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;B&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;C&quot;</span>] = <span class="string">&quot;C&quot;</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;D&quot;</span>] = <span class="string">&quot;D&quot;</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;E&quot;</span>] = <span class="number">8</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="string">&quot;F&quot;</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 逆向</span></span><br><span class="line">  <span class="title class_">Enum</span>[<span class="number">0</span>] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="number">1</span>] = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="number">8</span>] = <span class="string">&quot;E&quot;</span>;</span><br><span class="line">  <span class="title class_">Enum</span>[<span class="number">9</span>] = <span class="string">&quot;F&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Enum</span> || (<span class="title class_">Enum</span> = &#123;&#125;));</span><br></pre></td></tr></table></figure><h4 id="any、unknown、void"><a href="#any、unknown、void" class="headerlink" title="any、unknown、void"></a>any、unknown、void</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any - 绕过所有类型检查 =&gt; 类型检测和编译筛查取消</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyValue</span>: <span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">anyValue = <span class="string">&quot;anyValue&quot;</span>;</span><br><span class="line">anyValue = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">value1</span>: <span class="built_in">boolean</span> = anyValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown -绕过赋值检查 =&gt; 禁止更改传递</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">unknownValue</span>: <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">unknownValue = <span class="literal">true</span>;</span><br><span class="line">unknownValue = <span class="number">123</span>;</span><br><span class="line">unknownValue = <span class="string">&quot;unknownValue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value1</span>: <span class="built_in">unknown</span> = unknownValue; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value2</span>: <span class="built_in">any</span> = unknownValue; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value3</span>: <span class="built_in">boolean</span> = unknownValue; <span class="comment">// NOK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// void - 声明返回为空</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">voidFunction</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;void&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// never - 永不能执行完 or 永远error</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">errorGen</span>(<span class="params"><span class="attr">msg</span>: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="object-Object"><a href="#object-Object" class="headerlink" title="object / Object / {}"></a>object / Object / {}</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object - 非原始类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ObjectConstructor</span> &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="attr">o</span>: <span class="built_in">object</span> | <span class="literal">null</span>): <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proto = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(proto);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">undefined</span>); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="comment">// Object.prototype 上的属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Function</span>;</span><br><span class="line">  <span class="title function_">toString</span>(): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">toLocaleString</span>(): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">valueOf</span>(): <span class="title class_">Object</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义了Object类属性</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ObjectConstructor</span> &#123;</span><br><span class="line">  <span class="title function_">new</span> (<span class="attr">value</span>: <span class="built_in">any</span>): <span class="title class_">Object</span>;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">prototype</span>: <span class="title class_">Object</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#125; - 定义空属性对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">prop</span> = <span class="string">&quot;props&quot;</span>; <span class="comment">// NOK</span></span><br><span class="line">obj.<span class="title function_">toString</span>(); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口 - interface"></a>接口 - interface</h2><blockquote><p>对行为模块的抽象，具体的行为是由类来实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 描述对象内容</span></span><br><span class="line">interface <span class="title class_">Class</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">time</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">baidu</span>: <span class="title class_">Class</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;typescript&#x27;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读</span></span><br><span class="line">interface <span class="title class_">Class</span> &#123;</span><br><span class="line">    readonly <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">time</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ro</span>: <span class="title class_">ReadonlyArray</span>&lt;number&gt; = arr;</span><br><span class="line"></span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>;         <span class="comment">// 赋值 - Error</span></span><br><span class="line">ro.<span class="title function_">push</span>(<span class="number">5</span>);          <span class="comment">// 增加 - Error</span></span><br><span class="line">ro.<span class="property">length</span> = <span class="number">10</span>;         <span class="comment">// 长度改写 - Error</span></span><br><span class="line">arr = ro;         <span class="comment">// 覆盖 - Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 任意可添加属性</span></span><br><span class="line">interface <span class="title class_">Class</span> &#123;</span><br><span class="line">    readonly <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">time</span>: number;</span><br><span class="line">    [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = &#123; <span class="attr">name</span>: <span class="string">&quot;JS&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c2 = &#123; <span class="attr">name</span>: <span class="string">&quot;browser&quot;</span>, <span class="attr">time</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> c3 = &#123; <span class="attr">name</span>: <span class="string">&quot;ts&quot;</span>, <span class="attr">level</span>: <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="interface-vs-type"><a href="#interface-vs-type" class="headerlink" title="interface vs type"></a>interface vs type</h3><ol><li>type 不能被继承或者实现 (&amp; 可不用理解为继承) ，interface 可以被继承或者实现，但可以合并</li><li>type 可以定义任何类型，包括联合类型、交叉类型、字面量类型、原始类型等。interface 只能定义对象类型，包括属性、方法、索引等</li><li>type 通常用于为复杂类型创建别名，以方便在代码中使用。interface 通常用于定义某个实体的结构，以及实现该结构的对象或类</li></ol><h2 id="交叉类型-amp"><a href="#交叉类型-amp" class="headerlink" title="交叉类型 - &amp;"></a>交叉类型 - &amp;</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">inner</span>: D;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">inner</span>: E;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">  <span class="attr">inner</span>: F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> D &#123;</span><br><span class="line">  <span class="attr">d</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> E &#123;</span><br><span class="line">  <span class="attr">e</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> F &#123;</span><br><span class="line">  <span class="attr">f</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">ABC</span> = A &amp; B &amp; C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">abc</span>: <span class="variable constant_">ABC</span> = &#123;</span><br><span class="line">  <span class="attr">inner</span>: &#123;</span><br><span class="line">    <span class="attr">d</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&quot;className&quot;</span>,</span><br><span class="line">    <span class="attr">f</span>: <span class="number">5</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并冲突</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">d</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">c</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">e</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">AB</span> = A &amp; B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">ab</span>: <span class="variable constant_">AB</span>;</span><br><span class="line"><span class="comment">// 合并的关系是&#x27;且&#x27; =&gt; c - never</span></span><br></pre></td></tr></table></figure><h2 id="断言-类型的声明和转换"><a href="#断言-类型的声明和转换" class="headerlink" title="断言 - 类型的声明和转换"></a>断言 - 类型的声明和转换</h2><blockquote><p>编译时作用</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尖括号形式</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyValue</span>: <span class="built_in">any</span> = <span class="string">&#x27;hi baidu&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;anyValue).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyValue</span>: <span class="built_in">any</span> = <span class="string">&#x27;hi baidu&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">anyLength</span>: <span class="built_in">number</span> = (anyValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空判断 - 只确定不是空</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ClassTime</span> = <span class="function">() =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = (<span class="title class_">ClassTime</span>: <span class="title class_">ClassTime</span> | <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    <span class="comment">// if (额外判断逻辑) &#123;</span></span><br><span class="line">        <span class="keyword">let</span> time = classTime!(); <span class="comment">// 具体类型待定，但是非空确认</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">tsClass</span>: <span class="built_in">number</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">baidu</span>: <span class="built_in">number</span> = tsClass!;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baidu);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转义成</span></span><br><span class="line"><span class="keyword">const</span> tsClass = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> baidu = tsClass;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baidu); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 肯定断言 - 肯定化保证赋值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">score</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="title function_">startClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&#x27;</span> + score); <span class="comment">// 使用前赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">    score = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let score!: number; - 提前告知</span></span><br></pre></td></tr></table></figure><h2 id="类型守卫"><a href="#类型守卫" class="headerlink" title="类型守卫"></a>类型守卫</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in - 定义属性场景下内容的确认</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">courses</span>: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">startTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Class</span> = <span class="title class_">Teacher</span> | <span class="title class_">Student</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startCourse</span>(<span class="params"><span class="attr">cls</span>: <span class="title class_">Class</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;courses&#x27;</span> <span class="keyword">in</span> cls) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Courses:&quot;</span> + cls.<span class="property">courses</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;startTime&#x27;</span> <span class="keyword">in</span> cls) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;startTime:&quot;</span> + cls.<span class="property">startTime</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof / instanceof - 类型分类场景下的身份确认</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">class</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">score</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> score === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;teacher:&quot;</span> + name + <span class="string">&quot;:&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> score === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;student:&quot;</span> + name + <span class="string">&quot;:&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params"><span class="attr">cls</span>: <span class="title class_">Class</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(cls <span class="keyword">instanceof</span> <span class="title class_">Teacher</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cls.<span class="property">courses</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cls <span class="keyword">instanceof</span> <span class="title class_">Student</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> cls.<span class="property">startTime</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">const</span> isTeacher = <span class="keyword">function</span> (<span class="params"><span class="attr">cls</span>: <span class="title class_">Teacher</span> | <span class="title class_">Student</span></span>): cls is <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;courses&#x27;</span> <span class="keyword">in</span> cls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params"><span class="attr">cls</span>: <span class="title class_">Teacher</span> | <span class="title class_">Student</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">isTeacher</span>(cls)) &#123;</span><br><span class="line">        <span class="keyword">return</span> cls.<span class="property">courses</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名 &amp; 联合类型</span></span><br></pre></td></tr></table></figure><h2 id="never-的作用"><a href="#never-的作用" class="headerlink" title="never 的作用"></a>never 的作用</h2><blockquote><p>类型收缩、检查错误</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Method</span> = <span class="string">&#x27;GET&#x27;</span> | <span class="string">&#x27;POST&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">method: Method, url: string</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span>(method) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">default</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">n</span>: never = method;</span><br><span class="line">      <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 后续若Method添加其他选项，函数会报错，利于检查</span></span><br></pre></td></tr></table></figure><h2 id="any、unknown"><a href="#any、unknown" class="headerlink" title="any、unknown"></a>any、unknown</h2><ol><li>any 和 unknown 都是顶级类型，但是 unknown 更加严格，不像 any 那样不做类型检查</li><li>unknown 因为未知性质，不允许访问属性，不允许赋值给给 any 和 unkown 之外的类型变量</li><li>联合类型中的 unkown 为 unkown，意外是 any 类型。如果至少一种组成类型是 any，联合类型会相当于 any</li><li>交叉类型中的 unkown 为其他</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: any = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">msg</span>); <span class="comment">// 符合TS的语法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a_value1</span>: unknown = foo; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a_value2</span>: any = foo; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a_value3</span>: string = foo; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bar</span>: unknown = <span class="number">222</span>; <span class="comment">// OK</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">msg</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">k_value1</span>: unknown = bar; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">K_value2</span>: any = bar; <span class="comment">// OK</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">K_value3</span>: string = bar; <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">UnionType1</span> = unknown | <span class="literal">null</span>; <span class="comment">// unknown</span></span><br><span class="line">type <span class="title class_">UnionType2</span> = unknown | <span class="literal">undefined</span>; <span class="comment">// unknown</span></span><br><span class="line">type <span class="title class_">UnionType3</span> = unknown | string; <span class="comment">// unknown</span></span><br><span class="line">type <span class="title class_">UnionType4</span> = unknown | number[]; <span class="comment">// unknown</span></span><br><span class="line">type <span class="title class_">UnionType5</span> = unknown | any; <span class="comment">// any</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">IntersectionType1</span> = unknown &amp; <span class="literal">null</span>; <span class="comment">// null</span></span><br><span class="line">type <span class="title class_">IntersectionType2</span> = unknown &amp; <span class="literal">undefined</span>; <span class="comment">// undefined</span></span><br><span class="line">type <span class="title class_">IntersectionType3</span> = unknown &amp; string; <span class="comment">// string</span></span><br><span class="line">type <span class="title class_">IntersectionType4</span> = unknown &amp; number[]; <span class="comment">// number[]</span></span><br><span class="line">type <span class="title class_">IntersectionType5</span> = unknown &amp; any; <span class="comment">// any</span></span><br></pre></td></tr></table></figure><h2 id="TS-进阶"><a href="#TS-进阶" class="headerlink" title="TS 进阶"></a>TS 进阶</h2><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="attr">name</span>: <span class="built_in">number</span>, <span class="attr">score</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">start</span>(<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">score</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">start</span>(<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">score</span>: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">start</span>(<span class="attr">name</span>: <span class="built_in">number</span>, <span class="attr">score</span>: <span class="built_in">string</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"><span class="attr">name</span>: <span class="title class_">Combinable</span>, <span class="attr">score</span>: <span class="title class_">Combinable</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&quot;string&quot;</span> || <span class="keyword">typeof</span> score === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;student:&quot;</span> + name + <span class="string">&quot;:&quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>();</span><br><span class="line">course.<span class="title function_">start</span>(<span class="string">&quot;yunyin&quot;</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ul><li>让模块可以支持多种类型数据 - 让类型声明和值一样，可以被赋值和传递</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> startClass&lt;T, U&gt;(<span class="attr">name</span>: T, <span class="attr">score</span>: U): T &#123;</span><br><span class="line">  <span class="keyword">return</span> name + score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(startClass&lt;<span class="title class_">String</span>, <span class="title class_">Number</span>&gt;(<span class="string">&quot;yunyin&quot;</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// T、U、K - 键值、V - 值、E - 节点、元素</span></span><br></pre></td></tr></table></figure><h4 id="获取对象键值约束"><a href="#获取对象键值约束" class="headerlink" title="获取对象键值约束"></a>获取对象键值约束</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cat = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;kitty&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">love</span>: <span class="string">&#x27;flower&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">loginId</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">  <span class="attr">loginPwd</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取某个对象的某个属性值</span></span><br><span class="line"><span class="keyword">function</span> getValue&lt;T <span class="keyword">extends</span> object, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">name</span>: K): T[K] &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制类型不为某个类型</span></span><br><span class="line">type <span class="title class_">BanType</span>&lt;T, E&gt; = T <span class="keyword">extends</span> E ? never : T</span><br><span class="line"><span class="keyword">function</span> log&lt;T&gt;(<span class="attr">x</span>: <span class="title class_">BanType</span>&lt;T, <span class="title class_">Date</span>&gt;) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器-decorator"><a href="#装饰器-decorator" class="headerlink" title="装饰器 - decorator"></a>装饰器 - decorator</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsc --target ES5 --experimentalDecorators</span></span><br><span class="line"><span class="comment">// &quot;experimentalDecorators&quot;: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Baidu</span>(<span class="params"><span class="attr">target</span>: <span class="title class_">Function</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">startClass</span> = <span class="keyword">function</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="comment">// 通用功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">propsWrapper</span>(<span class="params"><span class="attr">target</span>: <span class="title class_">Object</span>, <span class="attr">key</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 属性的统一操作</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法装饰器 - target: Object, propertyKey: string, descriptor: TypePropertyDescript</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Baidu</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@propsWrapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@methodDec</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-typeScript"><a href="#使用-typeScript" class="headerlink" title="使用 typeScript"></a>使用 typeScript</h2><h3 id="引入和使用"><a href="#引入和使用" class="headerlink" title="引入和使用"></a>引入和使用</h3><h4 id="webpack-打包配置"><a href="#webpack-打包配置" class="headerlink" title="webpack 打包配置"></a>webpack 打包配置</h4><blockquote><p>vue-cli - vue init/create ${myProject} ${template} =&gt; 配置 webpack =&gt; 编译时</p></blockquote><p>a. entry - 入口<br>b. extentions 加上 ts 文件 area - 用于处理尝试的数据尾缀列表<br>c. loaders - ts-loader，增加对于 ts 的处理  =&gt; 工程化</p><h4 id="TS-配置"><a href="#TS-配置" class="headerlink" title="TS 配置"></a>TS 配置</h4><blockquote><p>tsconfig.json</p></blockquote><h3 id="vue-vuex-typescript"><a href="#vue-vuex-typescript" class="headerlink" title="vue / vuex + typescript"></a>vue / vuex + typescript</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">vueComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  // 1. 定义组件的方式上： 形式上 - extends</span><br><span class="line">  // const Component = &#123;</span><br><span class="line">    // TS无法断定内部为vue组件，需要额外做申明处理 - Vue.prototype.xxxx</span><br><span class="line">  // &#125;</span><br><span class="line"></span><br><span class="line">  // 申明当前组件模块 Vue.component or Vue.extend</span><br><span class="line">  import Vue from &#x27;vue&#x27;</span><br><span class="line">  const Component = Vue.extend(&#123;</span><br><span class="line">    // 类型推断</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 2. 全面拥抱面向对象 - 官方vue-class-component</span><br><span class="line">  import Component from &#x27;vue-class-component&#x27;</span><br><span class="line"></span><br><span class="line">  // @Component 本质 —— 类装饰器 =&gt; 利用装饰器，统一描述vue模板等概念</span><br><span class="line">  @Component(&#123;</span><br><span class="line">    template: &#x27;&lt;vueComponent /&gt;&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  export default class myComponent extends Vue &#123;</span><br><span class="line">    message: string = &#x27;Hello&#x27;</span><br><span class="line">    onClick(): void &#123;</span><br><span class="line">      console.log(this.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 3. 申明 - 利用ts的额外补充模块declare =&gt; 实现独立模块的声明，使之可以被独立引用</span><br><span class="line">  declare module &#x27;*.vue&#x27; &#123;</span><br><span class="line">    import Vue from &#x27;vue&#x27;</span><br><span class="line">    export default Vue</span><br><span class="line">  &#125;</span><br><span class="line">  // 补充模块 - 通常使用.d.ts来做申明描述</span><br><span class="line">  declare module &#x27;/typings/vuePlugin.d.ts&#x27; &#123;</span><br><span class="line">    interface Vue  &#123;</span><br><span class="line">      myProps: string</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 实例中使用</span><br><span class="line">  let vm = new Vue()</span><br><span class="line">  console.log(vm.myProps)</span><br><span class="line"></span><br><span class="line">  // 4. props - 提供propType原地声明复合变量</span><br><span class="line">  import &#123; propType &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  interface customPayload &#123;</span><br><span class="line">    str: string,</span><br><span class="line">    number: number,</span><br><span class="line">    name: string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const Component = Vue.extend(&#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      name: String,  // 字符串类型</span><br><span class="line">      success: &#123; type: String &#125;, // 普通对象类型</span><br><span class="line">      payload: &#123;</span><br><span class="line">        type: Object as propType&lt;customPayload&gt;</span><br><span class="line">      &#125;,</span><br><span class="line">      callback: &#123;</span><br><span class="line">        type: Function as propType&lt;() =&gt; void&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 5. computed 以及 method中包含this且有return的方法 需要声明返回类型</span><br><span class="line">  computed: &#123;</span><br><span class="line">    getMsg(): string &#123;</span><br><span class="line">      return this.click() + &quot;!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    click(): string &#123;</span><br><span class="line">      return this.message + &#x27;baidu&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 6. vuex的接入ts - 声明使用</span><br><span class="line">  // vuex.d.ts 声明模块 - ComponentCustomProperties</span><br><span class="line">  import &#123; ComponentCustomProperties &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  declare module &#x27;@vue/runtime-core&#x27; &#123;</span><br><span class="line">    interface State &#123;</span><br><span class="line">      count: number</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    interface ComponentCustomProperties &#123;</span><br><span class="line">      $store: Store&lt;State&gt;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 7. api形式编码实现 - 官方推荐</span><br><span class="line">  // store.ts</span><br><span class="line">  import &#123; InjectionKey &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123;</span><br><span class="line">    createStore,</span><br><span class="line">    Store</span><br><span class="line">  &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  export interface State &#123;</span><br><span class="line">    count: number</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  export const key: InjectionKey&lt;Store&lt;State&gt;&gt; = Symbol()</span><br><span class="line"></span><br><span class="line">  export const store = createStore&lt;State&gt;(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // #######################</span><br><span class="line">  // main.ts</span><br><span class="line">  import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; store, key &#125; from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">  const app = createApp(&#123;</span><br><span class="line">    // 传入参数</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 利用了provider &amp; inject</span><br><span class="line">  app.use(store, key) // =&gt; 传入injection Key =&gt; vue高级使用里会提到vue.use</span><br><span class="line"></span><br><span class="line">  app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br><span class="line">  // ########################</span><br><span class="line">  // 消费方</span><br><span class="line">  import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">  import &#123; key &#125; from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    const store = useStore(key)</span><br><span class="line"></span><br><span class="line">    store.state.count</span><br><span class="line">  &#125;</span><br><span class="line">  // 标准接口形式的功能引入，核心利用了vue的provide&amp;inject</span><br><span class="line"></span><br><span class="line">  // 8. vuex面向对象 - 使用vuex-class</span><br><span class="line">  import &#123; State, Action, Getter &#125; from &quot;vuex-class&quot;</span><br><span class="line"></span><br><span class="line">  export default class App extends Vue &#123;</span><br><span class="line">    // 属性装饰器，整合了store状态</span><br><span class="line">    @State login: boolean;</span><br><span class="line"></span><br><span class="line">    // 事件装饰器，整合了store方法</span><br><span class="line">    @Action setInit: () =&gt; void;</span><br><span class="line"></span><br><span class="line">    get isLogin: boolean;</span><br><span class="line"></span><br><span class="line">    mounted() &#123;</span><br><span class="line">      this.setInit();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器详解</title>
      <link href="/articles/front_base/browser/"/>
      <url>/articles/front_base/browser/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/front-base/browser_8.png" alt=""></p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><blockquote><p>location.href: <code>https://www.baidu.com/search?class=browser&amp;id=2#comments</code></p></blockquote><ul><li>.orgin =&gt; ‘<a href="https://www.baidu.com">https://www.baidu.com</a>‘</li><li>.protocol =&gt; ‘https:’</li><li>.host =&gt; ‘www.baidu.com’</li><li>.port =&gt; ‘’.</li><li>.pathname =&gt; ‘/search/‘</li><li>.search =&gt; ‘?class=browser&amp;id=2’</li><li>.hash =&gt; ‘#comments’</li><li>.assign(‘’) // 跳转到指定 path =&gt; 替换 pathname</li><li>.replace(‘’) // 同上，同时替换浏览历史</li><li>.reload()</li><li>.toString() // 产出当前地址字符串</li></ul><blockquote><p>URI &amp; URL: uniform resource identifier / locator</p></blockquote><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><blockquote><p>路由相关</p></blockquote><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><blockquote><p>浏览器系统信息集合</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="property">userAgent</span>; <span class="comment">// 获取当前用户的环境信息</span></span><br></pre></td></tr></table></figure><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><blockquote><p>表征显示区域</p></blockquote><ol><li><p>window 视窗判断</p><ul><li>window.innerHeight</li><li>window.innerWidth</li><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li><li>document.body.clientWidth</li><li>document.body.clientWidth</li></ul></li><li><p>网页视图的 size -&gt; offsetHeight = clientHeight + 滚动条 + 边框</p><ul><li>document.documentElement.offsetHeight</li><li>document.documentElement.offsetWidth</li><li>document.body.offsetHeight</li><li>document.body.offsetWidth</li></ul></li><li><p>动态定位：</p><ul><li>scrollLeft / scrollTop - 距离常规左 / 上滚动距离</li><li>offsetLeft / offsetTop - 距离常规左 / 上距离</li></ul></li><li><p>el.getBoundingClientRect()</p><ul><li>el.getBoundingClientRect().top</li><li>el.getBoundingClientRect().left</li><li>el.getBoundingClientRect().bottom</li><li>el.getBoundingClientRect().right - 兼容性: IE 是会多出来 2 像素</li></ul></li></ol><h2 id="Event-事件模型"><a href="#Event-事件模型" class="headerlink" title="Event 事件模型"></a>Event 事件模型</h2><ol><li><p>addEventListener(event, function, useCapture): 默认冒泡 false</p></li><li><p>阻止默认事件:</p><ul><li>stopPropgation(): 阻止传递行为，无法阻止默认事件</li><li>preventDefault(): 阻止默认事件 - a</li><li>stopImmediatePropagation(): 阻止相同节点绑定多个同类事件</li></ul></li><li><p>兼容性: attachEvent vs addEventListener</p><ul><li>传参: attachEvent 对于事件名需要加上’on’</li><li>执行顺序: attachEvent - 后绑定先执行，addEventListener - 先绑定先执行</li><li>解绑: detachEvent vs removeEventListener</li><li>阻断: event.cancelBubble = true vs event.stopPropgation()</li><li>默认事件拦截: event.returnValue = false vs event.preventDefault()</li></ul></li><li><p>性能优化: 事件代理</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">bindEvent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">element</span> = element;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 绑定</span></span><br><span class="line">  addEventListener = <span class="function">(<span class="params">type, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">addEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        handler.<span class="title function_">call</span>(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 解绑</span></span><br><span class="line">  removeEventListener = <span class="function">(<span class="params">type, handler</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">removeEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">detachEvent</span>(<span class="string">&quot;on&quot;</span> + type, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        handler.<span class="title function_">call</span>(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">element</span>[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 阻断</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">stopPropgation</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">      e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 默认拦截</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">preventDefault</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">preventDefault</span>) &#123;</span><br><span class="line">      e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="ajax-fetch"><a href="#ajax-fetch" class="headerlink" title="ajax fetch"></a>ajax fetch</h3><blockquote><p>fetch</p><ul><li>默认不带 cookie</li><li>错误不会 reject</li><li>不支持超时设置</li><li>需要借用 AbortController 中止 fetch</li></ul></blockquote><h4 id="fetch-中断请求"><a href="#fetch-中断请求" class="headerlink" title="fetch 中断请求"></a>fetch 中断请求</h4><blockquote><p>场景：输入框输入触发多次请求，需要将之前发送的请求中断掉，保留最后一个</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> controller;</span><br><span class="line">input.<span class="property">oninput</span> = <span class="title function_">async</span> () =&gt;&#123;</span><br><span class="line">  controller &amp;&amp; controller.<span class="title function_">abort</span>();</span><br><span class="line">  controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> list = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">&quot;http://localhost:9527/api/search?key=&#x27; + input.value,</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        signal: controller.signal,</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    ).then((resp) =&gt;resp . json());</span></span><br><span class="line"><span class="string">    createSuggest(list);</span></span><br><span class="line"><span class="string">  &#125; catch &#123;</span></span><br><span class="line"><span class="string">    console. log ( &#x27;aborted &#x27; );</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="封装-fetch-超时"><a href="#封装-fetch-超时" class="headerlink" title="封装 fetch 超时"></a>封装 fetch 超时</h4><blockquote><p>请求超时则中断 fetch</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFetch</span>(<span class="params">timeout</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">resource, options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    options.<span class="property">signal</span> = controller.<span class="property">signal</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>((<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      controller.<span class="title function_">abort</span>():</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(resource，options))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createFetch</span>(<span class="number">300</span>)(<span class="string">&#x27;url&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="ajax-demo"><a href="#ajax-demo" class="headerlink" title="ajax demo"></a>ajax demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://domain/service&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// request state change event</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// request completed?</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// request successful - show response</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// request error</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;HTTP error&quot;</span>, xhr.<span class="property">status</span>, xhr.<span class="property">statusText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr.timeout = 3000; // 3 seconds</span></span><br><span class="line"><span class="comment">// xhr.ontimeout = () =&gt; console.log(&#x27;timeout&#x27;, xhr.responseURL);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// progress事件可以报告长时间运行的文件上传</span></span><br><span class="line"><span class="comment">// xhr.upload.onprogress = p =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(Math.round((p.loaded / p.total) * 100) + &#x27;%&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start request</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://domain/service&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;error:&quot;</span>, error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认不带cookie</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://domain/service&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误不会reject</span></span><br><span class="line"><span class="comment">// HTTP错误 (例如404 Page Not Found 或 500 Internal Server Error) 不会导致Fetch返回的Promise标记为reject；.catch()也不会被执行。</span></span><br><span class="line"><span class="comment">// 想要精确的判断 fetch是否成功，需要包含 promise resolved 的情况，此时再判断 response.ok是不是为 true</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://domain/service&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Network response was not ok.&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;error:&quot;</span>, error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持直接设置超时, 可以用promise</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchTimeout</span>(<span class="params">url, init, timeout = <span class="number">3000</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url, init).<span class="title function_">then</span>(resolve).<span class="title function_">catch</span>(reject);</span><br><span class="line">    <span class="built_in">setTimeout</span>(reject, timeout);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中止fetch</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://domain/service&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">signal</span>: controller.<span class="property">signal</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">json</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(json))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error));</span><br><span class="line"></span><br><span class="line">controller.<span class="title function_">abort</span>();</span><br></pre></td></tr></table></figure><h3 id="request-header"><a href="#request-header" class="headerlink" title="request header"></a>request header</h3><ul><li>method:</li><li>path:</li><li>scheme:</li><li>accept:</li><li>accept-encoding:</li><li>cache-control:</li><li>cookie:</li><li>origin:</li><li>referer:</li><li>user-agent:</li></ul><div class="tip cogs"><p>问题: 为什么常见的 cdn 域名和业务域名不一样？例如：www.baidu.com / cdn.baidu-a.com</p></div><ol><li>安全问题：域名一样会导致 request header 里带上业务域名的 cookie</li><li>cdn 常作为拉取静态资源，不需要 cookie 信息</li><li>并发请求数：资源请求和数据请求分开</li></ol><h3 id="response-header"><a href="#response-header" class="headerlink" title="response header"></a>response header</h3><ul><li>access-control-allow-credentials:</li><li>access-control-allow-origin:</li><li>content-encoding:</li><li>content-type:</li><li>date:</li><li>set-cookie：服务端返回的登录 cooki</li><li>set-cookie:</li><li>status:</li></ul><h3 id="常用状态码"><a href="#常用状态码" class="headerlink" title="常用状态码"></a>常用状态码</h3><ul><li>200 get 成功</li><li>201 post 成功</li><li>301 永久重定向</li><li>302 临时重定向</li><li>304 协商缓存 服务器文件未修改</li><li>400 客户端请求有语法错误，不能被服务器识别</li><li>403 服务器受到请求，但是拒绝提供服务，可能是跨域</li><li>404 请求的资源不存在</li><li>405 请求的 method 不允许</li><li>500 服务器发生不可预期的错误</li></ul><h3 id="ajax-实现"><a href="#ajax-实现" class="headerlink" title="ajax 实现"></a>ajax 实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">IOptions</span> &#123;</span><br><span class="line">    <span class="attr">url</span>: string;</span><br><span class="line">    type?: string;</span><br><span class="line">    <span class="attr">data</span>: any;</span><br><span class="line">    timeout?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatUrl</span>(<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> dataArr = [];</span><br><span class="line">    json.<span class="property">t</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> json) &#123;</span><br><span class="line">        dataArr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(json[key])&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataArr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options: IOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!options.<span class="property">url</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        options.<span class="property">type</span> = options.<span class="property">type</span> || <span class="string">&#x27;GET&#x27;</span>;</span><br><span class="line">        options.<span class="property">data</span> = options.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">        options.<span class="property">timeout</span> = options.<span class="property">timeout</span> || <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> dataToUrlstr = <span class="title function_">formatUrl</span>(options.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建</span></span><br><span class="line">        <span class="keyword">let</span> xhr;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable language_">window</span> <span class="keyword">as</span> any).<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">            xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr = <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.连接</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">`<span class="subst">$&#123;options.url&#125;</span>?<span class="subst">$&#123;dataToUrlstr&#125;</span>`</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 3.发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">type</span>.<span class="title function_">toUpperCase</span>() === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.连接</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, options.<span class="property">url</span>, <span class="literal">true</span>);</span><br><span class="line">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;ContentType&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">            <span class="comment">// 3.发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>(options.<span class="property">data</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.接收</span></span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span> || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">timeout</span>) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                xhr.<span class="title function_">abort</span>();</span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&#x27;超时&#x27;</span>);</span><br><span class="line">            &#125;, options.<span class="property">timeout</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xhr.timeout = options.timeout;</span></span><br><span class="line">        <span class="comment">// xhr.ontimeout = () =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     reject(&#x27;超时&#x27;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><h3 id="页面加载流程"><a href="#页面加载流程" class="headerlink" title="页面加载流程"></a>页面加载流程</h3><p><img src="/images/front-base/browser_1.png" alt=""></p><p><img src="/images/front-base/browser_2.png" alt=""></p><ol><li>用户输入 url 并回车：浏览器进程会根据用户输入的信息判断是搜索还是网址，如果是搜索内容，就将搜索内容+默认搜索引擎合成新的 URL；如果用户输入的内容符合 URL 规则，浏览器进程就会根据 URL 协议，在这段内容上加上协议合成合法的 URL。<ul><li>在此之前可执行 beforeunload 事件</li></ul></li><li>浏览器导航栏显示 loading 状态，但是页面还是呈现之前的页面不变，因为新页面的响应数据还没有获得。</li><li>浏览器进程构建请求行信息，通过进程间通信 (IPC) 把 url 请求发送给网络进程。</li><li>网络进程接收到 url 请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程。<ul><li>会根据强制缓存规则查找本地是否缓存了当前 URL 是否存在强缓存。如果有缓存资源，那么直接返回资源给浏览器进程</li><li>如果在缓存中没有查找到资源，那么再查找是否存在协商缓存信息，如果有把协商缓存信息写入请求头中，否则直接进入网络请求流程。</li></ul></li><li>如果没有，网络进程向 web 服务器发起 http 请求 (网络请求) ，请求流程如下：<ul><li>进行 DNS 解析，获取服务器 ip 地址 (先查找 DNS 缓存 (浏览器 -&gt; 操作系统缓存 -&gt; 路由器缓存 -&gt; ISP 缓存) ，再发起 DNS 网络请求)</li><li>利用 ip 地址和服务器建立 tcp 连接 (TCP 三次握手建立的连接并不是真实的物理连接，而是虚连接，连接的本质就是在客户端与服务端开辟本次连接所需要的资源 (内存、进程等) )</li><li>完成构建请求信息 (请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中) 并发送请求 (调用 Socket 利用 TCP 通过三次握手连接建立后，之前准备好的 HTTP 请求报文被送入发送队列，接下来就交给了 TCP 完成后续过程)</li><li>服务器响应后，网络进程接收响应头和响应信息，并解析响应内容</li></ul></li><li>网络进程解析响应流程：<ul><li>检查状态码，如果是 301/302，则需要重定向，从 Location 自动中读取地址，重新进行第三步，如果是 200，则继续处理请求</li><li>检查响应类型 Content-Type，如果是字节流类型，则将该请求提交给下载管理器，该导航流程结束，不再进行后续的渲染，如果是 html 等资源则将其转发给浏览器进程</li></ul></li><li>浏览器进程接收到网络进程的响应头数据之后，检查当前 url 是否和之前打开的渲染进程根域名是否相同 (同一个站点) ，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程 (process-per-site-instance 策略) 。</li><li>渲染进程准备好后，浏览器进程发送 CommitNavigation 消息到渲染进程，发送 CommitNavigation 时会携带响应头、等基本信息。渲染进程接收到消息和网络进程建立传输数据的“管道”。<ul><li>当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；</li><li>渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；</li><li>管道建立完成后，网络进程接收到数据后就往这个管道里面放，而渲染进程则从管道的另外一端不断地读取数据，并同时将读取的数据传给 HTML 解析器，解析器动态接收字节流，并将其解析为 DOM。</li><li>等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程；</li><li>浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面。</li></ul></li><li>渲染进程接收完数据后，向浏览器进程发送“确认提交”。</li><li>浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏 url、前进后退的历史状态、更新 web 页面。</li></ol><h3 id="浏览器是如何渲染页面的"><a href="#浏览器是如何渲染页面的" class="headerlink" title="浏览器是如何渲染页面的"></a>浏览器是如何渲染页面的</h3><blockquote><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><p>整个渲染流程分为多个阶段：HTML 解析、样式机算、布局、分层、绘制、分块、光栅化、画。</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p></blockquote><h4 id="HTML-解析-DomParser"><a href="#HTML-解析-DomParser" class="headerlink" title="HTML 解析(DomParser())"></a>HTML 解析(DomParser())</h4><ol><li>解析过程中遇到 CSS 解析 cSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 cSS 文件和外部的 JS 文件。</li><li>如果主线程解析到 link 位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 css 不会阻塞 HTML 解析的根本原因。</li><li>如果主线程解析到 script 位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML—解析的根本原因。</li><li>第一步完成后，会得到_DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</li></ol><h4 id="样式计算"><a href="#样式计算" class="headerlink" title="样式计算"></a>样式计算</h4><ol><li>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式 styleSheets，称之为 Computed Style。CSS 来源通常有三种：<ul><li>通过 link 引用的外部 CSS 文件</li><li><code>&lt;style&gt;</code> 标记内的 CSS</li><li>元素的 style 属性内嵌的 CSS</li></ul></li><li>在这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255,0,0)；相对单位会变成绝对单位，比如 em 会变成 px</li><li>这一步完成后，会得到一棵带有样式的 DOM 树</li></ol><h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><ol><li>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</li><li>大部分时候，DOM 树和布局树并非一一对应。比如 display：none 的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。 (<font style="color:#DF2A3F;">内容必须放在行盒中；行盒和块盒不能相邻</font>)</li></ol><p><img src="/images/front-base/browser_3.png" alt=""></p><h4 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h4><ol><li>主线程会使用一套复杂的策略对整个布局树中进行分层。</li><li>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</li><li>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过 will-change 属性更大程度的影响分层结果。一般的分层依据<ol><li>拥有层叠上下文属性的元素会被提升为单独的一层，z-index 等。扩展：z-index 失效的情况：<ul><li>父元素 position 为 relative 时，子元素的 z-index 失效。解决：父元素 position 改为 absolute 或 static；</li><li>元素没有设置 position 属性为非 static 属性。解决：设置该元素的 position 属性为 relative，absolute 或是 fixed 中的一种；</li><li>元素在设置 z-index 的同时还设置了 float 浮动。解决：float 去除，改为 display：inline-block；</li></ul></li><li>需要剪裁 (clip) 的地方也会被创建为图层</li></ol></li></ol><h4 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h4><ol><li>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</li><li>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程 (渲染进程中) 完成。</li></ol><h4 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h4><ol><li>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</li><li>它会从线程池中拿取多个线程来完成分块工作。</li></ol><h4 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h4><ol><li>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</li><li>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</li><li>光栅化的结果，就是一块一块的位图。</li></ol><h4 id="画-合成和显示"><a href="#画-合成和显示" class="headerlink" title="画 (合成和显示)"></a>画 (合成和显示)</h4><ol><li>合成线程拿到每个层、每个块的位图后，生成一个个「指引 (quad) 」信息。</li><li>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</li><li>变形发生在合成线程，与渲染主线程无关，这就是 transform 效率高的本质原因。</li><li>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</li></ol><p><img src="/images/front-base/browser_4.png" alt=""></p><h3 id="reflow"><a href="#reflow" class="headerlink" title="reflow"></a>reflow</h3><ol><li>reflow 的本质就是重新计算 layout 树。</li><li>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</li><li>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</li><li>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</li><li>浏览器在反复权衡下，最终决定在<font style="color:#DF2A3F;">获取属性</font>立即 reflow。</li></ol><h4 id="针对-reflow-优化项"><a href="#针对-reflow-优化项" class="headerlink" title="针对 reflow 优化项"></a>针对 reflow 优化项</h4><ol><li>使用 transform 和 opacity 代替 top、left 和 width 等属性来进行动画效果的实现。因为 transform 和 opacity 不会引起回流。</li><li>尽量使用绝对定位 (position: absolute) 来移动元素，而不是修改元素的布局属性。因为绝对定位会脱离文档流，不会引起其他元素的重新布局。</li><li>避免使用 table 布局，因为 table 的每个单元格的内容变化都会引起回流。可以使用 CSS 的 display: table 和 display: table-cell 来实现类似的效果。</li><li>避免在循环中多次修改 DOM 元素的样式，可以先把需要修改的样式保存在变量中，然后一次性地更新 DOM 元素的样式。</li><li>避免频繁地读取布局属性 (如 offsetWidth、offsetHeight 等) ，可以把这些属性的值缓存起来使用。</li><li>使用虚拟 DOM 技术，例如 React 和 Vue.js 等框架，在组件更新时只更新变化的部分，而不是整个 DOM 树。</li><li>使用 CSS 的 will-change 属性来提前告诉浏览器某个元素即将被修改，并且浏览器可以对该元素进行一些优化。</li><li>避免频繁地修改 DOM 树的结构，可以采用一些优化策略，例如使用文档片段 (DocumentFragment) 进行批量插入和删除操作，或者使用字符串拼接的方式生成 HTML 代码。</li><li>使用 debounce 或 throttle 来降低频繁调用回流的次数，例如使用 lodash 库中的 debounce 和 throttle 方法。</li><li>使用 requestAnimationFrame 替代 setInterval 可以提升浏览器的性能。</li><li>尽量减少页面中元素的数量和复杂度，可以对不需要展示的元素进行隐藏或延迟加载，减少回流的发生。</li></ol><h3 id="repaint"><a href="#repaint" class="headerlink" title="repaint"></a>repaint</h3><ol><li>repaint 的本质就是重新根据分层信息计算了绘制指令。</li><li>当改动了可见样式后，就需要重新计算,会引发 repaint。</li><li>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</li></ol><h3 id="transform-效率高原理"><a href="#transform-效率高原理" class="headerlink" title="transform 效率高原理"></a>transform 效率高原理</h3><ol><li>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</li><li>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</li></ol><h2 id="浏览器缓存方式"><a href="#浏览器缓存方式" class="headerlink" title="浏览器缓存方式"></a>浏览器缓存方式</h2><h3 id="http-缓存"><a href="#http-缓存" class="headerlink" title="http 缓存"></a>http 缓存</h3><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><blockquote><p>(memory cache 和 disk cache): 浏览器本地根据服务器设置的过期时间来判断是否使用缓存，未过期则从本地缓存里拿资源，已过期则重新请求服务器获取最新资源。</p><p>浏览器第一次请求远程服务器的某个资源时，如果服务器希望浏览器得到该资源后一段时间内不要再发送请求过来，直接从浏览器里的缓存里取，则服务器可以通过在响应头里设置 Cache-Control: max-age=31536000，max-age 代表缓存时间，单位为秒，这里的数据换算过来就是一年，意味着在一年内浏览器不会再向服务器发送请求。</p></blockquote><ol><li>不会向服务器发送请求，直接从缓存中读取资源。</li><li>在 chrome 控制台的 Network 选项中可以看到该请求返回 200 的状态码，并且 Size 显示 from disk cache 或 from memory cache。</li><li>Expires：缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。</li><li>Cache-Control：<font style="color:#DF2A3F;">请求头、响应头都可以设置 (ctrl + f5 请求头中会携带 no-cache) </font><ul><li>client 和 server 都不设置 Cache-Control：很简单，就不存在缓存。通通走网络请求</li><li>client 设置 Cache-Control，但是 server 没有设置 Cache-Control：无效，即无缓存。不过有个例外，『Cache-Control: max-age=0，则会向 server 请求，以检查一次是否有资源文件修改来决定是否仍然用本地已有的缓存。如果 server 查询有资源修改，则返回 状态码 200 及修改过的新资源；否则无任何修改，则返回 状态码 304 表示仍可使用缓存，即常说的 304 表示缓存重定向』</li><li>client 没有设置 Cache-Control，而 server 设置了 Cache-Control：有缓存，具体依照 server-response 里的 Cache-Control 具体设置值来走缓存。如：max-age=30，则下次 client 请求时，在 30s 内就直接从缓存中取，而不会从 server 请求；否则，过期就从网络请求。周而复始……</li><li>client 和 server 都设置 Cache-Control：有缓存，主要以 server 为准。例如，client-request 的 Cache-Control: max-age=60，server-response 的 Cache-Control: max-age=30，则最终的缓存有效期只会在 30s 内，此外即为过期则就会从网络请求了。即，以 server 的 max-age 过期时长为准。</li></ul></li></ol><p><img src="/images/front-base/browser_5.png" alt=""></p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><blockquote><p>浏览器本地每次都向服务器发起请求，由服务器来告诉浏览器是从缓存里拿资源还是返回最新资源给浏览器使用。</p><p>浏览器初次请求资源，服务器返回资源，同时生成一个 Etag 值携带在响应头里返回给浏览器，当浏览器再次请求资源时会在请求头里携带 If-None-Match，值是之前服务器返回的 Etag 的值，服务器收到之后拿该值与资源文件最新的 Etag 值做对比。</p></blockquote><ol><li>Last-Modified(response header) =&gt; If-Modified-Since(request header)</li><li>Etag(response header) =&gt; If-None-Match(request header)</li></ol><div class="tip success"><p>实际使用策略</p></div><ol><li>对与频繁变动的资源：使用 Cache-Control: no-cache，使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</li><li>对于不常变化的资源：通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。</li></ol><p><img src="/images/front-base/browser_6.png" alt=""></p><h3 id="websql"><a href="#websql" class="headerlink" title="websql"></a>websql</h3><blockquote><p>较新的版本 chrome 支持，有以下特点</p><ul><li>Web Sql 数据库 API 实际上不是 HTML5 规范的组成部分</li><li>在 HTML5 之前就已经存在了，是单独的规范</li><li>它是将数据以数据库的形式存储在客户端，根据需求去读取</li><li>跟 Storage 的区别是： Storage 和 Cookie 都是以键值对的形式存在的</li><li>Web Sql 更方便于检索，允许 sql 语句查询</li><li>让浏览器实现小型数据库存储功能</li><li>这个数据库是集成在浏览器里面的，目前主流浏览器基本都已支持</li></ul></blockquote><p>核心方法：</p><ol><li><code>openDatabase</code>: 使用现有数据库或创建新数据库创建数据库对象</li><li><code>transaction</code>: 根据情况控制事务提交或回滚</li><li><code>executeSql</code>: 执行真实的 SQL 查询</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openDatabase 五个参数：数据库名、版本号、描述、数据库大小、创建回调</span></span><br><span class="line"><span class="keyword">var</span> db = <span class="title function_">openDatabase</span>(<span class="string">&quot; mydatabase &quot;</span>, <span class="string">&quot;1.0&quot;</span>, <span class="string">&quot;Test DB&quot;</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">db.<span class="title function_">transaction</span>(<span class="keyword">function</span> (<span class="params">tx</span>) &#123;</span><br><span class="line">  tx.<span class="title function_">executeSql</span>(<span class="string">&quot;CREATE TABLE IF NOT EXISTS t1 (id unique, log)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="indexDB"><a href="#indexDB" class="headerlink" title="indexDB"></a>indexDB</h3><blockquote><p>浏览器可能对 indexDB 有 50M 大小的限制，一般用户保存大量用户数据并要求数据之间有搜索需要的场景</p></blockquote><ol><li>异步 API：Web Workers 内部和外部都可以使用。调用完后会立即返回，而不会阻塞调用线程。要异步访问数据库，要调用 window 对象 indexedDB 属性的 open() 方法。该方法返回一个 IDBRequest 对象 (IDBOpenDBRequest)；异步操作通过在 IDBRequest 对象上触发事件来和调用程序进行通信</li><li>同步 API：浏览器暂不支持，需要和 Web Workers 一起使用</li></ol><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><ul><li><p>指一般网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据 (通常经过加密) 。 cookie 一般通过 http 请求中在头部一起发送到服务器端。一条 cookie 记录主要由键、值、域、过期时间、大小组成，一般用户保存用户的认证信息</p></li><li><p>不同域名之间的 cookie 信息是独立的，如果需要设置共享可以在服务器端设置 cookie 的 path 和 domain 来实现共享。浏览器端也可以通过 document.cookie 来获取 cookie，并通过 js 浏览器端也可以方便地读取/设置 cookie 的值</p></li></ul><h3 id="localstorage"><a href="#localstorage" class="headerlink" title="localstorage"></a>localstorage</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value); <span class="comment">//设置记录</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key); <span class="comment">//获取记录</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key); <span class="comment">//删除该域名下单条记录</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><h3 id="sessionstorage"><a href="#sessionstorage" class="headerlink" title="sessionstorage"></a>sessionstorage</h3><h3 id="application-cache"><a href="#application-cache" class="headerlink" title="application cache"></a>application cache</h3><blockquote><p>将大部分图片资源、js、css 等静态资源放在 manifest 文件配置中。当页面打开时通过 manifest 文件来读取本地文件或是请求服务器文件</p><p>优势：</p><ul><li>离线浏览 – 用户可在离线时浏览完整网站 (window.ApplicationCache 接口和 window.applicationCache 对象)</li><li>速度 – 缓存资源为本地资源，因此加载速度较快</li><li>服务器负载更少 – 浏览器只会从发生了更改的服务器下载资源</li></ul></blockquote><h3 id="cacheStorage"><a href="#cacheStorage" class="headerlink" title="cacheStorage"></a>cacheStorage</h3><blockquote><p>在 ServiceWorker 的规范中定义，可以保存每个 serverWorker 申明的 cache 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 均返回 promise 对象</span></span><br><span class="line">cacheStorage.<span class="title function_">open</span>();</span><br><span class="line">cacheStorage.<span class="title function_">match</span>();</span><br><span class="line">cacheStorage.<span class="title function_">has</span>();</span><br><span class="line">cacheStorage.<span class="title function_">delete</span>();</span><br><span class="line">cacheStorage.<span class="title function_">keys</span>();</span><br></pre></td></tr></table></figure><h3 id="flash"><a href="#flash" class="headerlink" title="flash"></a>flash</h3><blockquote><p>基本不用，主要基于 flash 有读写浏览器端本地目录的功能，同时也可以向 js 提供调用的 api，则页面可以通过 js 调用 flash 去读写特定的磁盘目录，达到本地数据缓存的目的</p></blockquote><h2 id="浏览器缓存位置"><a href="#浏览器缓存位置" class="headerlink" title="浏览器缓存位置"></a>浏览器缓存位置</h2><blockquote><p>分为四种：如果都没有命中，就发起请求来获取资源</p><p>用户行为如何触发缓存：</p><ul><li>打开网页，地址栏输入地址：查找 disk cache 中是否有匹配。如有则使用；如没有则发送网络请求</li><li>普通刷新 (F5)：因为 TAB 并没有关闭，因此 memory cache 是可用的，会被优先使用(如果匹配的话)，其次才是 disk cache</li><li>强制刷新 (Ctrl + F5)：浏览器不使用缓存，因此发送的请求头部均带有 Cache-control：no-cache(为了兼容，还带了 Pragma: no-cache)，服务器直接返回 200 和最新内容</li></ul></blockquote><h3 id="memory-cache"><a href="#memory-cache" class="headerlink" title="memory cache"></a>memory cache</h3><blockquote><p>内存中的缓存：一般有脚本、字体、图片等</p></blockquote><ul><li>优点：读取速度快</li><li>缺点：一旦关闭 Tab 页面，内存中的缓存也就被释放了</li></ul><h3 id="disk-cache"><a href="#disk-cache" class="headerlink" title="disk cache"></a>disk cache</h3><blockquote><p>硬盘中的缓存：一般非脚本，比如 css 等</p></blockquote><ul><li>优点：容量大</li><li>缺点：读取速度慢</li></ul><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><blockquote><p>服务器与客户端之间的代理服务器，伴随着 PWA (渐进式 web 应用程序 Progressive Web App) 出现，主要作用是拦截请求，修改响应，从而控制页面加载</p></blockquote><ul><li>Service Worker 是运行在浏览器背后的独立线程，可以用来实现缓存功能，比如缓存静态资源等</li><li>只能被使用在 https 或者本地的 localhost 环境下</li><li>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</li></ul><blockquote><p>主要流程</p><ul><li>在 ServiceWorker 的启动过程中，若有任何环节出错，则 ServiceWorker 会被直接废弃，直到下次刷新页面，将重新启动</li></ul></blockquote><p><img src="/images/front-base/browser_7.png" alt=""></p><h3 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h3><ul><li>Push Cache (推送缓存) 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用</li><li>它只在会话 (Session) 中存在，一旦会话结束就被释放，并且缓存时间也很短暂</li></ul><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><blockquote><p>同源策略限制以下几种行为：</p><ul><li>Cookie、LocalStorage 和 IndexDB 无法读取</li><li>DOM 和 JS 对象无法获得</li><li>AJAX 请求不能发送</li></ul></blockquote><h3 id="JSONP-跨域"><a href="#JSONP-跨域" class="headerlink" title="JSONP 跨域"></a>JSONP 跨域</h3><blockquote><p>利用 <code>&lt;script&gt;</code> 标签没有跨域限制，通过 <code>&lt;script&gt;</code> 标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而拿到 callback 函数返回的数据</p><p>缺点：只能发送 get 请求</p></blockquote><ol><li><p>原生 JS 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调执行函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleCallback</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(res));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端返回如下</span></span><br><span class="line"><span class="title function_">handleCallback</span>(&#123;<span class="string">&quot;success&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;user&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>jquery Ajax 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>, <span class="comment">// 请求方式为jsonp</span></span><br><span class="line">  <span class="attr">jsonpCallback</span>: <span class="string">&quot;handleCallback&quot;</span>, <span class="comment">// 自定义回调函数名</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>Vue axios 实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span> = axios;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$http</span></span><br><span class="line">  .<span class="title function_">jsonp</span>(<span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&quot;handleCallback&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="跨域资源共享-CORS"><a href="#跨域资源共享-CORS" class="headerlink" title="跨域资源共享 (CORS)"></a>跨域资源共享 (CORS)</h3><blockquote><p>允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，克服了 AJAX 只能同源使用的限制。ie 不低于 ie10</p></blockquote><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ol><li><p>同时满足以下两个条件</p><ul><li>使用以下方法之一：head、get、post</li><li>请求的 header 是：Accept、Accept-Language、Content-Language、Content-Type (只限于三个值：application/x-www-form-urlencoded、multipart/form-data、text/plain)</li></ul><blockquote><p>对于简单请求，直接发出 CORS 请求，即在头信息中增加一个 Origin 字段，说明本次请求来自哪个源 (协议 + 域名 + 端口) ，服务器根据这个值，决定是否同意这次请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GET</span> /cors <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//api.bob.com</span></span><br><span class="line"><span class="title class_">Host</span>: api.<span class="property">alice</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: en-<span class="variable constant_">US</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span>...</span><br></pre></td></tr></table></figure></li><li><p>CORS 请求设置的响应头字段：</p><ul><li>Access-Control-Allow-Origin (必选) ：要么是请求时 Origin 字段的值，要么是一个 <code>\*</code>，表示接受任意域名的请求</li><li>Access-Control-Allow-Credentials (可选) ：表示是否允许发送 Cookie，默认无该字段，表示不允许</li><li>Access-Control-Expose-Headers (可选) ：CORS 请求时，XMLHttpRequest 对象的 getResponseHeader() 方法只能拿到 6 个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在 Access-Control-Expose-Headers 里面指定。上面的例子指定，getResponseHeader(‘FooBar’)可以返回 FooBar 字段的值。</li></ul></li></ol><h4 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h4><ol><li><p>put、delete 或者 Content-Type 字段：application/json</p><blockquote><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求 (preflight)</p></blockquote></li><li><p>预检请求：options 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">OPTIONS</span> /cors <span class="variable constant_">HTTP</span>/<span class="number">1.1</span></span><br><span class="line"><span class="title class_">Origin</span>: <span class="attr">http</span>:<span class="comment">//api.bob.com  // 表示请求来自哪个源</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Method</span>: <span class="variable constant_">PUT</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Request</span>-<span class="title class_">Headers</span>: X-<span class="title class_">Custom</span>-<span class="title class_">Header</span></span><br><span class="line"><span class="title class_">Host</span>: api.<span class="property">alice</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">Accept</span>-<span class="title class_">Language</span>: en-<span class="variable constant_">US</span></span><br><span class="line"><span class="title class_">Connection</span>: keep-alive</span><br><span class="line"><span class="title class_">User</span>-<span class="title class_">Agent</span>: <span class="title class_">Mozilla</span>/<span class="number">5.0</span>..</span><br></pre></td></tr></table></figure><ul><li>Access-Control-Request-Method (必选) ：用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，上例是 PUT</li><li>Access-Control-Request-Headers (可选) ：逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，上例是 X-Custom-Header</li></ul></li><li><p>预检请求的回应：服务器收到”预检”请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。回应中有以下字段</p><ul><li>Access-Control-Allow-Methods (必选) ：逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法</li><li>Access-Control-Allow-Headers：如果浏览器请求包括 Access-Control-Request-Headers 字段，则 Access-Control-Allow-Headers 字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段</li><li>Access-Control-Allow-Credentials (可选) ：与简单请求相同含义</li><li>Access-Control-Max-Age (可选) ：指定本次预检请求的有效期，单位为秒</li></ul></li></ol><h4 id="CORS-跨域示例"><a href="#CORS-跨域示例" class="headerlink" title="CORS 跨域示例"></a>CORS 跨域示例</h4><ul><li>前端设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>(); <span class="comment">// IE8/9需用window.XDomainRequest兼容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端设置是否带cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;post&quot;</span>, <span class="string">&quot;http://www.domain2.com:8080/login&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&quot;user=admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>后端设置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&quot;request&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> postData = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据块接收中</span></span><br><span class="line">  req.<span class="title function_">addListener</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">    postData += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据接收完毕</span></span><br><span class="line">  req.<span class="title function_">addListener</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    postData = qs.<span class="title function_">parse</span>(postData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跨域后台设置</span></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>: <span class="string">&quot;true&quot;</span>, <span class="comment">// 后端允许发送Cookie</span></span><br><span class="line">      <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="string">&quot;http://www.domain1.com&quot;</span>, <span class="comment">// 允许访问的域 (协议+域名+端口)</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 此处设置的cookie还是domain2的而非domain1，因为后端也不能跨域写cookie(nginx反向代理可以实现)，</span></span><br><span class="line"><span class="comment">       * 但只要domain2中写入一次cookie认证，后面的跨域接口都能从domain2中获取cookie，从而实现所有的接口都能跨域访问</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="string">&quot;Set-Cookie&quot;</span>: <span class="string">&quot;l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&quot;</span>, <span class="comment">// HttpOnly的作用是让js无法读取cookie</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(postData));</span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8080&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at port 8080...&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ningx-代理跨域"><a href="#ningx-代理跨域" class="headerlink" title="ningx 代理跨域"></a>ningx 代理跨域</h3><blockquote><p>本质与 CORS 原理相同</p></blockquote><ol><li><p>nginx 配置解决 iconfont 跨域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器跨域访问js、css、img等常规静态资源被同源策略许可，</span></span><br><span class="line"><span class="comment">// 但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> *;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nginx 反向代理接口跨域</p><blockquote><p>通过 Nginx 配置一个代理服务器域名与 domain1 相同，端口不同，做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域访问</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#proxy服务器</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">81</span>;</span><br><span class="line">    server_name  www.<span class="property">domain1</span>.<span class="property">com</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass   <span class="attr">http</span>:<span class="comment">//www.domain2.com:8080;  #反向代理</span></span><br><span class="line">        proxy_cookie_domain www.<span class="property">domain2</span>.<span class="property">com</span> www.<span class="property">domain1</span>.<span class="property">com</span>; #修改cookie里域名</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line"></span><br><span class="line">        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span> <span class="attr">http</span>:<span class="comment">//www.domain1.com;  #当前端只跨域不带cookie时，可为*</span></span><br><span class="line">        add_header <span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Credentials</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="ningx-中间件代理跨域"><a href="#ningx-中间件代理跨域" class="headerlink" title="ningx 中间件代理跨域"></a>ningx 中间件代理跨域</h3><ol><li><p>非 vue 框架的跨域：使用 node + express + http-proxy-middleware</p><ul><li>前端代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端开关：浏览器是否读写cookie</span></span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问http-proxy-middleware代理服务器</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://www.domain1.com:3000/login?user=admin&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><ul><li>中间件服务器代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="built_in">require</span>(<span class="string">&quot;http-proxy-middleware&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="title function_">proxy</span>(&#123;</span><br><span class="line">    <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://www.domain2.com:8080&quot;</span>,</span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应头信息，实现跨域并允许带cookie</span></span><br><span class="line">    <span class="attr">onProxyRes</span>: <span class="keyword">function</span> (<span class="params">proxyRes, req, res</span>) &#123;</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://www.domain1.com&quot;</span>);</span><br><span class="line">      res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改响应信息中的cookie域名</span></span><br><span class="line">    <span class="attr">cookieDomainRewrite</span>: <span class="string">&quot;www.domain1.com&quot;</span>, <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Proxy server is listen at port 3000...&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>vue 框架的跨域：使用 node + vue + webpack + webpack-dev-server</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;&#125;,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">proxy</span>: [&#123;</span><br><span class="line">            <span class="attr">context</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>,  <span class="comment">// 代理跨域目标接口</span></span><br><span class="line">            <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">secure</span>: <span class="literal">false</span>,  <span class="comment">// 当代理某些https服务报错时用</span></span><br><span class="line">            <span class="attr">cookieDomainRewrite</span>: <span class="string">&#x27;www.domain1.com&#x27;</span>  <span class="comment">// 可以为false，表示不修改</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="attr">noInfo</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="document-domain-iframe-跨域"><a href="#document-domain-iframe-跨域" class="headerlink" title="document.domain + iframe 跨域"></a>document.domain + iframe 跨域</h3><blockquote><p>此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过 js 强制设置 document.domain 为基础主域，就实现了同域</p></blockquote><ul><li>父窗口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>子窗口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>; <span class="comment">// 获取父窗口中变量 console.log(&#x27;get js data</span></span><br><span class="line">  <span class="keyword">from</span> parent ---<span class="string">&#x27; + window.parent.user);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="location-hash-iframe-跨域"><a href="#location-hash-iframe-跨域" class="headerlink" title="location.hash + iframe 跨域"></a>location.hash + iframe 跨域</h3><blockquote><p>实现原理： a 欲与 b 跨域相互通信，通过中间页 c 来实现。 三个页面，不同域之间利用 iframe 的 location.hash 传值，相同域之间直接 js 访问来通信。</p><p>具体实现：A 域：a.html -&gt; B 域：b.html -&gt; A 域：c.html，a 与 b 不同域只能通过 hash 值单向通信，b 与 c 也不同域也只能单向通信，但 c 与 a 同域，所以 c 可通过 parent.parent 访问 a 页面所有对象</p></blockquote><ul><li>a.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 向b.html传hash值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + <span class="string">&#x27;#user=admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 开放给同域c.html的回调方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">onCallback</span>(<span class="params">res</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;data from c.html ---&gt; &#x27;</span> + res);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>b.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain1.com/c.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听a.html传来的hash值，再传给c.html</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">src</span> = iframe.<span class="property">src</span> + location.<span class="property">hash</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>c.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 监听b.html传来的hash值</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onhashchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 再通过操作同域a.html的js回调，将结果传回</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">parent</span>.<span class="title function_">onCallback</span>(<span class="string">&#x27;hello: &#x27;</span> + location.<span class="property">hash</span>.<span class="title function_">replace</span>(<span class="string">&#x27;#user=&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="window-name-iframe-跨域"><a href="#window-name-iframe-跨域" class="headerlink" title="window.name + iframe 跨域"></a>window.name + iframe 跨域</h3><blockquote><p>window.name 属性的独特之处：name 值在不同的页面 (甚至不同域名) 加载后依旧存在，并且可以支持非常长的 name 值 (2MB)</p></blockquote><ul><li>a.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">function</span> (<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> state = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;iframe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载跨域页面</span></span><br><span class="line">  iframe.<span class="property">src</span> = url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span></span><br><span class="line">  iframe.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 第2次onload(同域proxy页)成功后，读取同域window.name中数据</span></span><br><span class="line">      <span class="title function_">callback</span>(iframe.<span class="property">contentWindow</span>.<span class="property">name</span>);</span><br><span class="line">      <span class="title function_">destoryFrame</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span></span><br><span class="line">      iframe.<span class="property">contentWindow</span>.<span class="property">location</span> = <span class="string">&quot;http://www.domain1.com/proxy.html&quot;</span>;</span><br><span class="line">      state = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取数据以后销毁这个iframe，释放内存；这也保证了安全 (不被其他域frame js访问)</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">destoryFrame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    iframe.<span class="property">contentWindow</span>.<span class="title function_">close</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(iframe);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求跨域b页面数据</span></span><br><span class="line"><span class="title function_">proxy</span>(<span class="string">&quot;http://www.domain2.com/b.html&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>proxy.html: (<a href="http://www.domain1.com/proxy.html">http://www.domain1.com/proxy.html</a>): 中间代理页，与 a.html 同域，内容为空即可</li><li>b.html: (<a href="http://www.domain2.com/b.html">http://www.domain2.com/b.html</a>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;This is domain2 data!&#x27;</span>;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="postMessage-跨域"><a href="#postMessage-跨域" class="headerlink" title="postMessage 跨域"></a>postMessage 跨域</h3><blockquote><p>postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的 iframe 消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>用法：postMessage(data,origin)方法接受两个参数：</p><ul><li>data: html5 规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用 JSON.stringify()序列化</li><li>origin: 协议+主机+端口号，也可以设置为 “*“，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为 “/“</li></ul></blockquote><ul><li>a.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://www.domain2.com/b.html&quot;</span> style=<span class="string">&quot;display:none;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    iframe.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> data = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;aym&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 向domain2传送跨域数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="string">&#x27;http://www.domain2.com&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 接受domain2返回数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;data from domain2 ---&gt; &#x27;</span> + e.<span class="property">data</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>b.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 接收domain1的数据</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;data from domain1 ---&gt; &#x27;</span> + e.<span class="property">data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>);</span><br><span class="line">        <span class="keyword">if</span> (data) &#123;</span><br><span class="line">            data.<span class="property">number</span> = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理后再发回domain1</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data), <span class="string">&#x27;http://www.domain1.com&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="WebSocket-协议跨域"><a href="#WebSocket-协议跨域" class="headerlink" title="WebSocket 协议跨域"></a>WebSocket 协议跨域</h3><blockquote><p>WebSocket protocol 是 HTML5 一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是 server push 技术的一种很好的实现。借助 Socket.io 封装的库可方便使用</p></blockquote><ul><li>前端代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;user input：&lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/socket.io/2.2.0/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> socket = <span class="title function_">io</span>(<span class="string">&#x27;http://www.domain2.com:8080&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 连接成功处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">socket.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data from server: ---&gt; &#x27;</span> + msg);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 监听服务端关闭</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server socket has closed.&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    socket.<span class="title function_">send</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>node 代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启http服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;text/html&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="string">&quot;8080&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is running at port 8080...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.<span class="title function_">listen</span>(server).<span class="title function_">on</span>(<span class="string">&quot;connection&quot;</span>, <span class="keyword">function</span> (<span class="params">client</span>) &#123;</span><br><span class="line">  <span class="comment">// 接收信息</span></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&quot;message&quot;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">    client.<span class="title function_">send</span>(<span class="string">&quot;hello：&quot;</span> + msg);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data from client: ---&gt; &quot;</span> + msg);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 断开处理</span></span><br><span class="line">  client.<span class="title function_">on</span>(<span class="string">&quot;disconnect&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Client socket has closed.&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="浏览器跨页签通信"><a href="#浏览器跨页签通信" class="headerlink" title="浏览器跨页签通信"></a>浏览器跨页签通信</h2><h3 id="LocalStorage-SessionStorage"><a href="#LocalStorage-SessionStorage" class="headerlink" title="LocalStorage/SessionStorage"></a>LocalStorage/SessionStorage</h3><blockquote><p>storage 事件仅在 不同标签页间的 LocalStorage 数据变化时才会触发，同一标签页内的 LocalStorage 变化不会触发该事件</p></blockquote><ol><li>写入数据：使用 localStorage.setItem(key, value) 方法将数据存储到 LocalStorage 中</li><li>监听数据变化：通过监听 LocalStorage 的 storage 事件来检测数据的变化，并进行相应的处理：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;storage&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">key</span> === <span class="variable constant_">STORAGE_KEY</span>) &#123;</span><br><span class="line">    <span class="title function_">creatMessageElement</span>(e.<span class="property">newValue</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="BroadcastChannel"><a href="#BroadcastChannel" class="headerlink" title="BroadcastChannel"></a>BroadcastChannel</h3><blockquote><p>发送者将消息广播到所有订阅该频道的标签页，该频道在同源下的所有浏览器上下文共用，一个名称只对应一个频道。</p></blockquote><h3 id="SharedWorker"><a href="#SharedWorker" class="headerlink" title="SharedWorker"></a>SharedWorker</h3><blockquote><p>SharedWorker 是一种在多个标签页之间共享的后台线程。</p><p>Web Workers 分为两种：</p><p>专用线程 Dedicated worker：一个专用 worker 仅能被生成它的脚本所使用，也就是只能在当前窗口当前页面使用。</p><p>共享线程 Shared worker：一个共享 worker 可以被多个脚本使用，即使这些脚本正在被不同的 window、iframe 或者 worker 访问，所以 SharedWorker 允许不同标签页之间共享一个后台线程，从而实现数据和消息的共享。</p></blockquote><h3 id="window-open-window-opener"><a href="#window-open-window-opener" class="headerlink" title="window.open + window.opener"></a>window.open + window.opener</h3><blockquote><p>当我们使用 window.open 打开页面时，将返回一个被打开页面 window 的引用。被打开的页面可以通过 window.opener 获取到打开它的页面的引用，通过这种方式我们就将这些页面建立起联系。</p></blockquote><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><blockquote><p>浏览器和服务器之间建立持久连接的协议，可以实现双向通信。通过 WebSocket，我们可以在不同的标签页之间进行实时的数据传输和通信。</p><p>在跨标签通信方面，我们可以在每个标签页中都创建一个 WebSocket 连接，并通过 WebSocket 发送和接收消息。当一个标签页发送消息时，其他标签页可以通过监听 WebSocket 事件来接收消息，并做出相应的处理。</p></blockquote><h3 id="Service-Worker-1"><a href="#Service-Worker-1" class="headerlink" title="Service Worker"></a>Service Worker</h3><blockquote><p>Service Worker 是一种独立于网页的脚本，可以在后台运行，提供离线缓存和消息传递等功能。标签页可以通过 Service Worker 进行通信，发送消息和接收消息。</p></blockquote><h3 id="Window-postMessage"><a href="#Window-postMessage" class="headerlink" title="Window.postMessage()"></a>Window.postMessage()</h3><blockquote><p>通过调用 postMessage() 方法并指定目标窗口的 origin，可以将消息发送到其他标签页，并通过监听 message 事件来接收消息。</p></blockquote><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><blockquote><p>当一个标签页更新数据时，将数据写入到 Cookies 中，其他标签页可以通过监听 Cookies 变化事件或定时读取 Cookies 来获取最新的数据。</p><p>使用 Cookies 进行通信是一种简单的方法，但它主要用于在客户端和服务器之间传递数据，而不是直接实现跨标签页通信。Cookies 会自动在客户端和服务器之间进行传递，因此可以在不同的标签页之间共享数据。</p></blockquote><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><blockquote><p>IndexedDB 是浏览器提供的一个客户端数据库，可以在不同的标签页之间存储和读取数据。一个标签页可以将数据写入 IndexedDB，其他标签页可以监听 IndexedDB 的变化事件或定时从 IndexedDB 中读取数据来实现数据的共享和状态的同步。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端开发</title>
      <link href="/articles/front-tech/mobile/"/>
      <url>/articles/front-tech/mobile/</url>
      
        <content type="html"><![CDATA[<h2 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h2><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">960px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff6699</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#00ff66</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">550px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6633ff</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">320px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ffff00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3><blockquote><p>难统一，使用较少</p><ul><li>计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。</li><li>各个属性中如果使用百分比，相对父元素的属性并不是唯一的。比如 width 和 height 相对于父元素的 width 和 height，而 margin、padding 不管垂直还是水平方向都相对比父元素的宽度、border-radius 则是相对于元素自身等等，造成我们使用百分比单位容易使布局问题变得复杂。</li></ul></blockquote><h3 id="flex-弹性盒子布局"><a href="#flex-弹性盒子布局" class="headerlink" title="flex 弹性盒子布局"></a>flex 弹性盒子布局</h3><h3 id="rem-动态-font-size"><a href="#rem-动态-font-size" class="headerlink" title="rem + 动态 font-size"></a>rem + 动态 font-size</h3><blockquote><p>针对不同的屏幕，设置 html 不同的 font-size</p></blockquote><ul><li>媒体查询：通过媒体查询来设置不同尺寸范围内的屏幕 html 的 font-size 尺寸，有以下缺点<ul><li>需要针对不同的屏编写大量的媒体查询</li><li>如果动态改变尺寸，不会实时的进行更新</li></ul></li><li>用 js 动态获取设备宽度：根据 html 的宽度计算出 font-size 的大小，并且设置到 html 上；监听页面的实时改变，并且重新设置 font-size 的大小到 html 上</li><li>利用第三方库 lib-flexible 动态 font-size</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    @media screen <span class="title function_">and</span> (min-<span class="attr">width</span>:320px) &#123;</span><br><span class="line">        html&#123;</span><br><span class="line">            font-<span class="attr">size</span>: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>将原来要设置的尺寸，转化成 rem 单位</p></blockquote><ul><li>less 的混合 scss 的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">pxToRem</span>(<span class="params">@px</span>) &#123;</span><br><span class="line">  <span class="attr">result</span>: 1rem * (@px / <span class="number">37.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: .<span class="title function_">pxToRem</span>(<span class="number">100</span>)[result];</span><br><span class="line">  <span class="attr">height</span>: .<span class="title function_">pxToRem</span>(<span class="number">100</span>)[result];</span><br><span class="line">  background-<span class="attr">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  font-<span class="attr">size</span>: .<span class="title function_">pxToRem</span>(<span class="number">14</span>)[result];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>postcss-pxtorem</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">rootValue</span>: <span class="number">37.5</span>,</span><br><span class="line">      <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>VSCode 插件: px to rem</p></blockquote><h3 id="Viewport-单位"><a href="#Viewport-单位" class="headerlink" title="Viewport 单位"></a>Viewport 单位</h3><blockquote><p>vh、vw，相对于视口的单位，对比于 rem 的优点:</p><ul><li>用去计算 html 的 font-size 大小，也不需要给 html 设置这样一个 font-size</li><li>不会因为设置 html 的 font-size 大小，而必须给 body 再设置一个 font-size，防止继承</li><li>因为不依赖 font-size 的尺寸，所以不用担心某些原因 html 的 font-size 尺寸被篡改，页面尺寸混乱</li><li>vw 相比于 rem 更加语义化，1vw 刚好是 1/100 的 viewport 的大小</li><li>可以具备 rem 之前所有的优点</li></ul></blockquote><ul><li>less/scss 函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="attr">vwUnit</span>:<span class="number">3.75</span>;</span><br><span class="line"></span><br><span class="line">.<span class="title function_">pxToVw</span>(<span class="params">@px</span>) &#123;</span><br><span class="line">  <span class="attr">result</span>: 1vw * (@px / @vwUnit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">box</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: .<span class="title function_">pxToVw</span>(<span class="number">100</span>)[result];</span><br><span class="line">  <span class="attr">height</span>: .<span class="title function_">pxToVw</span>(<span class="number">100</span>)[result];</span><br><span class="line">  background-<span class="attr">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  font-<span class="attr">size</span>: .<span class="title function_">pxToVw</span>(<span class="number">14</span>)[result];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>postcss-px-to-viewport</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">375</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Css-预处理器的-mixin-和函数"><a href="#Css-预处理器的-mixin-和函数" class="headerlink" title="Css 预处理器的 mixin 和函数"></a>Css 预处理器的 mixin 和函数</h3><h2 id="JSBridge"><a href="#JSBridge" class="headerlink" title="JSBridge"></a>JSBridge</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li>以 JavaScript 引擎或 Webview 容器作为媒介，通过协定协议进行通信，实现 Native 端和 Web 端双向通信的一种机制</li><li>双向通信的通道<ul><li>JS 向 Native 发送消息: 调用相关功能、通知 Native 当前 JS 的相关状态等</li><li>Native 向 JS 发送消息: 回溯调用结果、消息推送、通知 JS 当前 Native 的状态等</li></ul></li></ol><h3 id="Webview"><a href="#Webview" class="headerlink" title="Webview"></a>Webview</h3><ol><li>WebView 是移动端提供的运行 JavaScript 的环境，是系统渲染 Web 网页的一个控件，可与页面 JavaScript 交互，实现混合开发</li><li>WebView 是手机中内置了一款高性能 Webkit 内核浏览器，在 SDK 中封装的一个组件。不过没有提供地址栏和导航栏，只是单纯的展示一个网页界面。</li><li>WebView 可以简单理解为页面里的 iframe 。原生 app 与 WebView 的交互可以简单看作是页面与页面内 iframe 页面进行的交互。就如页面与页面内的 iframe 共用一个 Window 一样，原生与 WebView 也共用了一套原生的方法</li></ol><p><img src="/images/front-tech/mobile_1.png" alt=""></p><ul><li>webview 加载 url 过程：webview 存在一个初始化的过程。为了提升 init 时间，通常做法是 app 启动时初始化一个隐藏的 webview 等待使用，当用户点击需要加载 URL，直接使用这个 webview 来加载，从而减少 webview init 初始化时间。弊端就是带来了额外的内存开销</li></ul><h3 id="JSBridge-运行原理"><a href="#JSBridge-运行原理" class="headerlink" title="JSBridge 运行原理"></a>JSBridge 运行原理</h3><blockquote><p>目前主流的 JSBridge 实现中，都是通过拦截 URL 请求来达到 native 端和 webview 端相互通信的效果</p></blockquote><h4 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h4><ol><li>在 webview 侧和 native 侧分别注册 bridge，其实就是用一个对象把所有函数储存起来</li><li>在 webview 里面注入初始化代码：<ul><li>创建一个名为 WVJBCallbacks 的数组，将传入的 callback 参数放到数组内</li><li>创建一个 iframe，设置不可见，设置 src 为 <code>https://__bridge_loaded__</code></li><li>设置定时器移除这个 iframe</li></ul></li><li>在 native 端监听 url 请求：<ul><li>拦截了所有的 URL 请求并拿到 url</li><li>首先判断 isWebViewJavascriptBridgeURL，判断这个 url 是不是 webview 的 iframe 触发的，具体可以通过 host 去判断</li><li>继续判断，如果是 isBridgeLoadedURL，那么会执行 injectJavascriptFile 方法，会向 webview 中再次注入一些逻辑，其中最重要的逻辑就是，在 window 对象上挂载一些全局变量和 WebViewJavascriptBridge 属性</li><li>继续判断，如果是 isQueueMessageURL，那么这就是个处理消息的回调，需要执行一些消息处理的方法</li></ul></li></ol><h4 id="webview-调用-native-能力"><a href="#webview-调用-native-能力" class="headerlink" title="webview 调用 native 能力"></a>webview 调用 native 能力</h4><ol><li>native 端注册 JsBridge</li><li>webview 侧创建 iframe，设置 src 为<code>__bridge_load__</code></li><li>native 端捕获请求，注入 jsb 初始化代码，在 window 上挂载相关对象和方法</li><li>webview 侧调用 callHandler 方法，并在 responseCallback 上添加 callbackId: responseCallback，并修改 iframe 的 src，触发捕获</li><li>native 收到 message，生成一个 responseCallback，并执行 native 侧注册好的方法</li><li>native 执行完毕后，通过 webview 执行 _handleMessageFromObjC 方法，取出 callback 函数，并执行</li></ol><p><img src="/images/front-tech/mobile_2.png" alt=""></p><h4 id="native-调用-webview-能力"><a href="#native-调用-webview-能力" class="headerlink" title="native 调用 webview 能力"></a>native 调用 webview 能力</h4><blockquote><p>native 可以直接调用 webview 注册的 JsBridge 方法，不需要通过触发 iframe 的 src 触发执行</p></blockquote><ol><li>native 侧调用 callHandler 方法，并在 responseCallback 上添加 callbackId: responseCallback</li><li>native 侧主动调用 _handleMessageFromObjC 方法，在 webview 中执行对应的逻辑</li><li>webview 侧执行结束后，生成带有 responseId 的 message，添加到 sendMessageQueue 中，并修改 iframe 的 src 为 <code>__wvjb_queue_message__</code></li><li>native 端拦截到 url 变化，调用 webview 的逻辑获取到 message，拿到 responseId，并执行对应的 callback 函数</li></ol><h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="RN-相对于原生-IOS、Android-有哪些优势"><a href="#RN-相对于原生-IOS、Android-有哪些优势" class="headerlink" title="RN 相对于原生 IOS、Android 有哪些优势"></a>RN 相对于原生 IOS、Android 有哪些优势</h4><ul><li>性能方面媲美原生 App</li><li>绝大部分代码同时适用 IOS/Android，一套代码两系统适用</li><li>使用 Javascript 编码，上手容易</li><li>组件式开发，易于管理维护，代码复用率高</li><li>代码更改后会自动刷新，节省等待时间</li><li>支持热更新，更新无需重新安装 App</li></ul><h4 id="调用-setState-之后发生了什么"><a href="#调用-setState-之后发生了什么" class="headerlink" title="调用 setState 之后发生了什么"></a>调用 setState 之后发生了什么</h4><ol><li>将传入的参数对象与当前的状态合并，然后触发调和过程</li><li>在调和过程中 react 会根据新的状态以相对高效的方式构建 react 元素树</li><li>react 会对新旧元素树进行 diff 算法计算出差异，然后根据差异进行最小化渲染</li></ol><h4 id="JS-如何与原生相互调用"><a href="#JS-如何与原生相互调用" class="headerlink" title="JS 如何与原生相互调用"></a>JS 如何与原生相互调用</h4><ol><li>JS 调用原生方法<ul><li>和原生约定好，通过原生劫持 JS 发出的请求进行原生调用</li><li>webView 添加要调用的原生方法接口，直接调用</li><li>利用第三方库实现，如 Andriod 第三方库 JSBridge。安全便捷</li></ul></li><li>原生调用 JS 方法<ul><li>直接使用 webView.evaluateJavacript()实现</li><li>利用三方库，如 JSBridge 来实现</li></ul></li></ol><h4 id="缓存用的是什么"><a href="#缓存用的是什么" class="headerlink" title="缓存用的是什么"></a>缓存用的是什么</h4><ul><li>AsyncStorage 它是一个简单的、异步的、持久化的键值对存储系统，它对于 App 来说是全局的。可以用来替代 LocalStorage</li><li>官网推荐在此基础上封装一层，不要直接使用</li><li>在 IOS 上，AsyncStorage 在原生端的实现是把较小值存放在序列化的字典中，而把较大值写入单独的文件</li><li>在 Android 上，AsyncStorage 会尝试使用 RocksDB,或退而选择 SQLite</li></ul><h2 id="单页应用和多页应用"><a href="#单页应用和多页应用" class="headerlink" title="单页应用和多页应用"></a>单页应用和多页应用</h2><blockquote><p>单页应用 (SPA) 只在初始化时加载主要资源，通过路由控制页面内容切换，提供流畅用户体验。多页应用 (MPA) 每次请求新页面都重新加载完整资源，适合内容丰富、SEO 要求高的应用。</p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>页面加载方式<ul><li>单页应用：只在应用初始化时加载页面的主要资源，之后页面内容的切换通过异步加载实现，不会重新加载整个页面。</li><li>多页应用：每次用户请求新页面时，服务器都会返回一个完整的页面，包括新的 HTML、CSS 和 JavaScript。</li></ul></li><li>页面切换<ul><li>单页应用：页面切换时通常是通过路由进行控制，以及通过前端框架 (如 Vue Router) 来管理视图的变化，不会导致整个页面的重新加载。</li><li>多页应用：页面切换会触发整个页面的重新加载，因为每个页面都是独立的。</li></ul></li><li>用户体验<ul><li>单页应用：提供更流畅的用户体验，因为页面切换时无需等待整个页面的重新加载。</li><li>多页应用：可能存在页面切换时的延迟，因为需要重新加载整个页面。</li></ul></li><li>开发复杂度<ul><li>单页应用：相对于多页应用，单页应用通常需要更多的前端技术栈和复杂的路由管理。</li><li>多页应用：每个页面都是独立的，开发相对简单，但随着页面增多，维护成本可能会增加。</li></ul></li><li>SEO<ul><li>单页应用：需要特殊处理才能更好地支持搜索引擎优化 (SEO) ，因为页面内容是动态加载的。</li><li>多页应用：每个页面都是独立的，更容易被搜索引擎索引。</li></ul></li></ol><h3 id="单页应用的理解"><a href="#单页应用的理解" class="headerlink" title="单页应用的理解"></a>单页应用的理解</h3><blockquote><p>SPA (Single Page Application) 单页面应用指的是在加载页面时，只需加载一次 HTML、CSS 和 JavaScript。在用户与应用程序交互时，页面不会重新加载，而是通过 AJAX 技术动态地更新页面内容。通常，SPA 通过路由管理来实现页面内容的切换，从而提供更流畅的用户体验。</p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>快速响应: 由于页面只在初始化时加载一次，之后的页面切换都是通过异步加载数据和更新 DOM，因此能够提供更快的响应速度。</li><li>良好的用户体验: SPA 能够提供类似原生应用的用户体验，避免了页面刷新带来的延迟，同时也避免了页面闪烁。</li><li>前后端分离: 前端负责 UI 和交互逻辑，后端则负责数据处理和接口的提供，使得开发更加清晰和高效。</li><li>减少服务器负担: 由于减少了页面的加载次数，可以减轻服务器的负担，提高服务器性能。</li><li>适合 Web 应用: 对于需要频繁交互和动态更新的 Web 应用来说，SPA 是一个非常合适的选择。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>首次加载时间较长: 首次加载可能会包含大量的 JavaScript、CSS 和模板文件，导致首次加载时间较长。<ul><li>代码分割 (Code Splitting) </li><li>懒加载 (Lazy Loading) </li><li>资源压缩和优化</li><li>CDN 加速</li><li>预加载 (Preloading) </li><li>服务端渲染 (Server-Side Rendering) </li><li>性能监控与优化</li></ul></li><li>SEO 难度: 对于搜索引擎来说，由于内容都是通过 JavaScript 动态加载的，爬虫不易获取到完整的页面内容，影响 SEO 优化。<ul><li>服务端渲染 (SSR) 或预渲染</li><li>动态路由和静态路由混合使用：对于一些静态内容，可以采用静态路由，这样搜索引擎爬虫更容易抓取这部分内容。对于需要动态加载的内容，可以采用动态路由，以保持良好的用户体验。</li><li>合理的 URL 结构</li><li>合理的元数据：meta 标签，包括 title、description 和关键字等</li><li>Sitemap 和 Robots.txt：创建并提交 Sitemap，同时配置 Robots.txt 文件，以指导搜索引擎爬虫更有效地抓取和索引网站内容。</li><li>使用动态渲染服务</li><li>监控和测试</li></ul></li><li>内存占用: 长时间运行的单页面应用可能会导致内存占用过多，特别是在移动设备上。<ul><li>组件销毁与内存管理</li><li>懒加载与按需加载</li><li>虚拟列表与无限滚动</li><li>性能监控与优化</li><li>资源释放与缓存管理</li><li>定期升级与优化框架</li></ul></li><li>安全性: 因为 SPA 通常需要从服务端一次性加载所有的代码，可能存在一些安全隐患。<ul><li>客户端数据可被窃取</li><li>跨站脚本攻击 (XSS) </li><li>数据篡改</li><li>安全策略：在 SPA 中，需要特别注意跨域资源共享 (CORS) 和安全头部设置，以防止恶意站点利用客户端漏洞攻击服务端或其他站点。</li></ul></li></ol><blockquote><p>针对以上问题，有以下改进措施</p></blockquote><ol><li>合理的权限控制: 对于敏感操作和数据，需要进行严格的权限控制，确保只有经过授权的用户才能访问和操作。</li><li>数据加密</li><li>输入验证与过滤</li><li>安全头部设置：使用适当的 HTTP 头部设置，如 Content Security Policy (CSP)、X-Content-Type-Options、X-XSS-Protection 等，以增强安全性。</li><li>定期安全审计</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端</title>
      <link href="/articles/front-tech/microFront/"/>
      <url>/articles/front-tech/microFront/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="微前端概念"><a href="#微前端概念" class="headerlink" title="微前端概念"></a>微前端概念</h3><ul><li>微前端的概念来自于后端微服务。</li><li>微服务是一种开发软件的<strong>架构和组织方法</strong>，</li><li>其中软件由明确定义的 API 进行通信的<strong>小型独立服务</strong>组成。</li></ul><blockquote><p>微服务的主要思想</p></blockquote><ul><li>将应用分解为小的，互相连接的微服务，一个微服务完成某个特定功能。</li><li>每个微服务都有自己的业务逻辑和适配器，不同的微服务，可以使用不同的技术去实现。</li><li>使用统一的网关 进行调用。</li></ul><blockquote><p>微服务的主要思路是化繁为简，通过更加细致的划分，使得服务内容更加内聚，服务之间耦合性降低，有利于项目的团队开发和后期维护。把微服务的概念应用到前端就是微前端。</p></blockquote><h3 id="微前端的发展史"><a href="#微前端的发展史" class="headerlink" title="微前端的发展史"></a>微前端的发展史</h3><p><img src="/images/front-tech/mFront_1.png" alt=""></p><ul><li>2014 年 MartinFowler 和 JamesLewis 共同提出了微服务的概念</li><li>2018 年 第一个基于微前端的工具 single-spa 在 github 上开源</li><li>2019 年 基于 single-spa 的 qiankun 框架问世</li><li>2020 年 Module Federation（Webpack5）把项目中的模块分为本地模块和远程模块，远程模块在运行时异步从所谓的容器中加载。</li></ul><h3 id="微前端的特点"><a href="#微前端的特点" class="headerlink" title="微前端的特点"></a>微前端的特点</h3><ul><li><strong>技术栈无关</strong> 主框架不限制接入应用的技术栈，子应用可自主选择技术栈</li><li><strong>独立开发/部署</strong> 各团队之间，仓库独立，单独部署，互不依赖</li><li><strong>增量升级</strong> 当一个应用庞大之后，技术升级或重构相当麻烦，而为应用具备渐进式升级的特性</li><li><strong>独立运行时</strong> 微应用之间运行时互补依赖，有独立的状态管理。</li><li><strong>提升效率</strong> 应用越庞大 -&gt;越难以维护 &amp;协作低下，微应用可以很好拆分，提升效率</li></ul><h3 id="微前端要考虑的问题"><a href="#微前端要考虑的问题" class="headerlink" title="微前端要考虑的问题"></a>微前端要考虑的问题</h3><p>或者说具备哪些能力</p><ul><li><strong>CSS 隔离</strong> 子应用之间样式互不影响，切换时装载和卸载</li><li><strong>JS 沙箱</strong> 子应用之间互不影响，包括全局变量和事件</li><li><strong>HTML Entry</strong> 匹配到子应用路由，先加载子应用入口的 html，解析 html 加载其他静态资源（CSS/JS）<ul><li>Config Entry 的进阶版，但解析消耗留给了用户</li></ul></li><li><strong>按需加载</strong> 切换页面才加载相应的资源，进入子应用路由，再去装载运行子应用</li><li><strong>公共依赖加载</strong> 将一些通用的工具方法、组件、甚至 npm 包抽取出来作为公共依赖，这样可以提升整体项目的体验</li><li><strong>父子应用通信</strong> 抽离公共依赖后，子应用如何调用父应用方法，父应用如何下发事件</li></ul><h2 id="微前端有哪些解决方案"><a href="#微前端有哪些解决方案" class="headerlink" title="微前端有哪些解决方案"></a>微前端有哪些解决方案</h2><p>抛开<code>single-spa</code>和<code>qiankun</code>我们来看一下微前端有哪些实现方案。</p><p><img src="/images/front-tech/mFront_2.png" alt=""></p><h3 id="基于-Iframe-完全隔离的方案"><a href="#基于-Iframe-完全隔离的方案" class="headerlink" title="基于 Iframe 完全隔离的方案"></a>基于 Iframe 完全隔离的方案</h3><p>优点：</p><ul><li>非常简单，几乎无需任何改造</li><li>完美隔离，JS/CSS 都是独立的运行环境</li><li>不限制使⽤，⻚⾯上可以放多个 iframe 来组合业务</li></ul><p>缺点：</p><ul><li>页面或状态切换，每次进来都要重新加载，状态不能保留</li><li>完全的隔离导致与子应用的交互变得极其困难，无法与主应用进行资源共享</li><li>iframe 中的弹窗无法突破其自身，比如无法实现全屏弹窗</li><li>整个应用全量资源加载，加载太慢</li></ul><h3 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h3><p>将子应用封装成 npm 包，通过组件的方式引入，在性能和兼容性上是最优的方案，但却有一个致命的缺点，每次发版需要通知接入方同步更新，管理非常困难</p><h3 id="webpack-构建时方案"><a href="#webpack-构建时方案" class="headerlink" title="webpack 构建时方案"></a>webpack 构建时方案</h3><p><img src="/images/front-tech/mFront_3.png" alt=""></p><h3 id="纯-Web-Component-构建方案"><a href="#纯-Web-Component-构建方案" class="headerlink" title="纯 Web Component 构建方案"></a>纯 Web Component 构建方案</h3><ol><li>google 推出的浏览器的原子组件，这里简单介绍下。它由三部分组成</li></ol><ul><li><code>Custom elements</code>: 自定义元素</li><li><code>Shadow DOM</code>: 用于将 DOM 树附加到元素上 (与主文档 DOM 分开) 并控制其关联的功能，不用担心与文档其他部分发生冲突。</li><li><code>HTML templates</code>: <code>&lt;template&gt;</code> 和 &lt;<code>slot&gt;</code>元素可以编写不在页面中显示的标记模板，可以作为自定义元素的基础被多次重用</li></ul><ol><li>Web Component 有以下优势</li></ol><ul><li>技术栈无关 是浏览器原生的组件，任何框架都可以用</li><li>独立开发 开发的应用无需与其他任何应用关联</li><li>应用间隔离： ShadowDOM 的特性，各个引⼊的微应⽤间可以达到相互隔离的效果</li></ul><ol><li>Web Component 不足之处</li></ol><ul><li>兼容性 WebComponent 是一组技术的组合，部分特性还是存在一些兼容性问题</li><li>成本高 虽然 WebComponent 是浏览器的 API，天生与技术栈无关，但目前使用的范围比较窄，改造起来成本大</li><li>开发体验上相对差一些 这里是尤大总结的，<a href="https://cn.vuejs.org/guide/extras/web-components.html#web-components-vs-vue-components">WC VS Vue 组件</a><ul><li>一个声明式的、高效的模版系统<ul><li>WC 不支持 作用域插槽</li></ul></li><li>一个响应式的，利于逻辑提取和重用的状态管理系统</li><li>高性能的 SSR （服务端渲染，客户端激活）<ul><li>WC 暂无服务端渲染方案</li></ul></li></ul></li></ul><h2 id="主流的微前端框架"><a href="#主流的微前端框架" class="headerlink" title="主流的微前端框架"></a>主流的微前端框架</h2><h3 id="基于sigle-spa-的路由劫持方法"><a href="#基于sigle-spa-的路由劫持方法" class="headerlink" title="基于sigle-spa  的路由劫持方法"></a>基于<code>sigle-spa</code>  的路由劫持方法</h3><p><a href="https://zh-hans.single-spa.js.org/docs/getting-started-overview">sigle-spa 官网</a></p><ul><li>微前端系统有一个主应用和 N 个子应用组成。子应用要在主应用中注册（路由规则、各种资源、公共依赖等）</li><li>路由劫持 跳转或首屏进入匹配到子应用路由，先加载主应用，主应用运行后再加载子应用，</li><li><strong>提供子应用生命周期管理 （注册、挂在、卸载）其中加载微应用的方法要自己写</strong></li></ul><p>生命周期</p><p><img src="/images/front-tech/mFront_4.png" alt=""></p><ul><li>load 当应用匹配路由时就会加载脚本（非函数，只是一种状态）</li><li>bootstrap 引导函数 （对接 html，应用内容首次挂载到页面前调用）</li><li>mount 挂在函数</li><li>unmount 卸载函数（移除事件绑定等内容）</li><li>unload 非必要（unload 之后会重新启动 bootstrap 流程；借助 unload 可实现热更新）。</li></ul><h3 id="qiankun"><a href="#qiankun" class="headerlink" title="qiankun"></a><code>qiankun</code></h3><p><a href="https://qiankun.umijs.org/zh/guide">官方文档</a></p><p><img src="/images/front-tech/mFront_5.png" alt=""></p><ul><li>qiankun 是一个基于 single-spa 的微前端实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。</li><li>通过<code>import-html-entry</code>包解析<code>HTML</code>获取对资源进行解析、加载。</li><li>通过对执行环境的修改，它实现了 JS 沙箱、样式隔离等特性。</li></ul><p>乾坤的运行流程</p><p><img src="/images/front-tech/mFront_6.png" alt=""></p><h4 id="脚手架搭建"><a href="#脚手架搭建" class="headerlink" title="脚手架搭建"></a>脚手架搭建</h4><blockquote><ul><li><code>npx create-react-app micro-main-app</code> 创建主应用</li><li><code>npx vue create micro-sub-app-vue</code> 创建子应用</li></ul></blockquote><h4 id="主应用接入"><a href="#主应用接入" class="headerlink" title="主应用接入"></a>主应用接入</h4><blockquote><ul><li><code>src/index.js</code> 增加以下内容</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&quot;qiankun&quot;</span>;</span><br><span class="line"><span class="title function_">registerMicroApps</span>([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;vueApp&quot;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;//localhost:3001&quot;</span>,</span><br><span class="line">    <span class="attr">container</span>: <span class="string">&quot;#micro-container&quot;</span>,</span><br><span class="line">    <span class="attr">activeRule</span>: <span class="string">&quot;/app-vue&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>src/app.jsx</code> mock 路由跳转</li></ul></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Menu</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./App.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> menus = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;主页&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>React主应用<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&quot;/app-vue&quot;</span>,</span><br><span class="line">    <span class="attr">route</span>: <span class="string">&quot;/app-vue&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;vue微应用&quot;</span>,</span><br><span class="line">    <span class="attr">label</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/app-vue&quot;</span>&gt;</span>vue微应用<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [selectedKey, setSelectKey] = <span class="title function_">useState</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> style = &#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;100vw&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;100vh&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* <span class="tag">&lt;<span class="name">h1</span>&gt;</span>主应用启动成功<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">selectedKeys</span>=<span class="string">&#123;[selectedKey]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width:</span> <span class="attr">256</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">theme</span>=<span class="string">&quot;dark&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">mode</span>=<span class="string">&quot;inline&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">items</span>=<span class="string">&#123;menus&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onSelect</span>=<span class="string">&#123;(e)</span> =&gt;</span> setSelectKey(e.key)&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;<span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;selectedKey === &quot;/&quot; ? (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;Object.assign(</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">display:</span> &quot;<span class="attr">flex</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">marginTop:</span> &quot;<span class="attr">10vh</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">fontSize:</span> &quot;<span class="attr">40px</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            )&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            React主应用</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ) : (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;micro-container&quot;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h4 id="vue-子应用接入"><a href="#vue-子应用接入" class="headerlink" title="vue 子应用接入"></a>vue 子应用接入</h4><blockquote><ul><li><code>vue.config.js</code> 增加 <code>devServer:&#123;port: &#39;3001&#39;&#125;</code></li><li><code>src/app.js</code></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="variable language_">window</span>.<span class="property">__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 独立运行时</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[vue] app bootstraped&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">mount</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[vue] props from main framework mount&quot;</span>, props);</span><br><span class="line">  <span class="title function_">render</span>(props);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  instance.$destroy();</span><br><span class="line">  instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动主应用和子应用"><a href="#启动主应用和子应用" class="headerlink" title="启动主应用和子应用"></a>启动主应用和子应用</h4><h4 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h4><p>在生产环境中，我们一般通过 nginx 配置静态资源的访问，</p><ul><li>配置主应用资源及子应用资源可访问</li><li>所有前端路由都找主应用的 index.html</li><li>匹配到子应用路由，主应用去加载子应用的 index.html，解析 html 并运行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> serve = <span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主应用</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">serve</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./example/micro-main-app/build&quot;</span>)));</span><br><span class="line"><span class="comment">// 子应用 资源文件</span></span><br><span class="line"><span class="keyword">const</span> app1Files = <span class="title function_">serve</span>(</span><br><span class="line">  path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./example/micro-sub-app-vue/dist/&quot;</span>)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^\/app-vue\//</span>.<span class="title function_">test</span>(ctx.<span class="property">req</span>.<span class="property">url</span>) &amp;&amp; path.<span class="title function_">extname</span>(ctx.<span class="property">req</span>.<span class="property">url</span>)) &#123;</span><br><span class="line">    <span class="comment">// 加载子应用资源</span></span><br><span class="line">    ctx.<span class="property">req</span>.<span class="property">url</span> = ctx.<span class="property">req</span>.<span class="property">url</span>.<span class="title function_">replace</span>(<span class="regexp">/\/app-vue/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> app1Files.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [ctx, next]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 前端路由都走主应用</span></span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      fs.<span class="title function_">readFile</span>(</span><br><span class="line">        path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./example/micro-main-app/build/index.html&quot;</span>),</span><br><span class="line">        <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">error, data</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">          <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    ctx.<span class="property">body</span> = text;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;app start at port 8000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="动态加-卸载"><a href="#动态加-卸载" class="headerlink" title="动态加/卸载"></a>动态加/卸载</h5><blockquote><p>主应用通过 loadMicroApp / unloadMicroApp 方法，子应用直接导出异步函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; loadMicroApp, unloadMicroApp &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadMicroApp</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;sub-app&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">  <span class="attr">container</span>: <span class="string">&#x27;#sub-app-container&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">unloadMicroApp</span>(<span class="string">&#x27;sub-app&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> mount / <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 子应用的挂载逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="主子通信"><a href="#主子通信" class="headerlink" title="主子通信"></a>主子通信</h5><blockquote><p>主应用通过 <code>onGlobalStateChange</code>方法来监听子应用的状态变化<br>子应用通过 <code>window.__POWERED_BY_QIANKUN__</code> 全局变量判断当前应用是否运行在 qiankun 微前端环境中，通过 <code>window.parent</code> 访问主应用的全局对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; onGlobalStateChange &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state, prev</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 子应用状态变化的回调函数</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__POWERED_BY_QIANKUN__</span>) &#123;</span><br><span class="line">  <span class="comment">// 子应用运行在 qiankun 微前端环境中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;message&#x27;</span>, <span class="attr">data</span>: <span class="string">&#x27;hello&#x27;</span> &#125;, <span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="子子通信"><a href="#子子通信" class="headerlink" title="子子通信"></a>子子通信</h5><blockquote><p>子应用中，通过 <code>window.dispatchEvent</code>方法触发自定义事件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;message&#x27;</span>, &#123; <span class="attr">detail</span>: <span class="string">&#x27;hello&#x27;</span> &#125;));</span><br><span class="line"><span class="comment">// 在其他子应用中，可以通过 window.addEventListener 方法来监听自定义事件，例如：</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">detail</span>); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h5><blockquote><p>主应用中，可以通过 <code>setMatchedPath</code> 方法设置当前子应用的路由路径，通过 <code>onGlobalStateChange</code> 方法来监听子应用的路由变化<br>子应用通过 <code>history.pushState</code> 方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; setMatchedPath, onGlobalStateChange &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setMatchedPath</span>(<span class="string">&#x27;/path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onGlobalStateChange</span>(<span class="function">(<span class="params">state, prev</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">matchedPath</span>); <span class="comment">// &#x27;/path&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用</span></span><br><span class="line">history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;/path&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="样式隔离"><a href="#样式隔离" class="headerlink" title="样式隔离"></a>样式隔离</h5><blockquote><p>主应用通过 <code>prefetch</code> 方法来预加载子应用的样式，通过 mount 方法的 <code>sandbox</code> 参数来开启样式隔离<br>子应用通过 <code>CSS Modules</code> 或 <code>CSS-in-JS</code> 等技术来实现样式隔离</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主应用</span></span><br><span class="line"><span class="keyword">import</span> &#123; prefetch, loadMicroApp &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">prefetch</span>(<span class="string">&#x27;//localhost:8080/index.css&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadMicroApp</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;sub-app&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;//localhost:8080&#x27;</span>,</span><br><span class="line">  <span class="attr">container</span>: <span class="string">&#x27;#sub-app-container&#x27;</span>,</span><br><span class="line">  <span class="attr">sandbox</span>: &#123; <span class="attr">strictStyleIsolation</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子应用</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Micro-App"><a href="#Micro-App" class="headerlink" title="Micro App"></a>Micro App</h3><blockquote><p>京东出的一款基于 <code>Web Component</code> 原生组件进行渲染的微前端框架</p></blockquote><p><strong>优点：</strong></p><ul><li>简单：只需一行代码，实现微前端，如此简单；</li><li>无关技术栈：任何框架皆可使用；</li><li>静态资源补全；</li><li>JS 沙箱；</li><li>样式隔离；</li><li>Qiankun 微前端框架的优势他都有；</li></ul><h3 id="EMP"><a href="#EMP" class="headerlink" title="EMP"></a>EMP</h3><blockquote><p>基于 <code>Webpack5 Module Federation</code> 搭建的微前端方案</p></blockquote><p><strong>优点：</strong></p><ul><li>依赖自动管理，可以共享 Host 中的依赖，版本不满足要求时自动 fallback 到 Remote 中依赖；</li><li>共享模块粒度自由掌控，小到一个单独组件，大到一个完整应用。既实现了组件级别的复用，又实现了微服务的基本功能；</li><li>共享模块非常灵活，模块中所有组件都可以通过异步加载调用；</li></ul><p><strong>缺点：</strong></p><ul><li>无法做到多框架兼容等微前端方案的痛点；</li><li>基于 <strong>Webpack5 Module Federation</strong>，需要统一 Webpack5 技术；</li><li>文档资料，社区不够活跃；</li></ul><h3 id="Garfish"><a href="#Garfish" class="headerlink" title="Garfish"></a>Garfish</h3><blockquote><p>字节跳动</p></blockquote><p><strong>框架特性：</strong></p><ul><li>🌈 <strong>丰富高效的产品特征</strong><ul><li>Garfish 微前端子应用支持任意多种框架、技术体系接入</li><li>Garfish 微前端子应用支持「<strong>独立开发</strong>」、「<strong>独立测试</strong>」、「<strong>独立部署</strong>」</li><li>强大的预加载能力，自动记录用户应用加载习惯增加加载权重，应用切换时间极大缩短</li><li>支持依赖共享，极大程度的降低整体的包体积，减少依赖的重复加载</li><li>内置数据收集，有效的感知到应用在运行期间的状态</li><li>支持多实例能力，可在页面中同时运行多个子应用提升了业务的拆分力度</li></ul></li><li>📦 <strong>高扩展性的核心模块</strong><ul><li>通过 Loader 核心模块支持 HTML entry、JS entry 的支持，接入微前端应用简单易用</li><li>Router 模块提供了路由驱动、主子路由隔离，用户仅需要配置路由表应用即可完成自主的渲染和销毁，无需关心内部逻辑</li><li>Sandbox 模块为应用的 Runtime 提供运行时隔离能力，能有效隔离 JS、Style 对应用的副作用影响</li><li>Store 提供了一套简单的通信数据交换机制</li></ul></li><li>🎯 <strong>高度可扩展的插件机制</strong><ul><li>提供业务插件满足各种定制需求</li></ul></li></ul><p><img src="/images/front-tech/mFront_7.png" alt=""></p><h2 id="微前端的原理"><a href="#微前端的原理" class="headerlink" title="微前端的原理"></a>微前端的原理</h2><h3 id="监听路由变化"><a href="#监听路由变化" class="headerlink" title="监听路由变化"></a>监听路由变化</h3><blockquote><ul><li>路由变化时匹配子应用</li><li>执行子应用的生命周期</li><li>加载子应用</li></ul></blockquote><p>路由有两种模式 hash 路由和 history 路由</p><h4 id="hash-路由"><a href="#hash-路由" class="headerlink" title="hash 路由"></a>hash 路由</h4><ul><li>hash 路由，路由改变不请求服务端，监听 <code>window.addEventListener(&#39;hashchange&#39;, onHashChange)</code></li><li>改变 URL 的方式有以下几种 ，都会触发 hashchange 事件<ul><li>通过浏览器前进后退改变 URL</li><li>通过标签改变 URL<ul><li>补充：在 vue-router 中通过 router-link 跳转不会出发 hashchange 事件，这里要想其它办法，</li></ul></li><li>通过 window.location 改变 URL</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听hashchange</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, handleUrlChange);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleUrlChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">doLifeCycle</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doLifeCycle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">  判断路由改变是否从一个微服务到另一个微服务,</span></span><br><span class="line"><span class="string">  如果是，则卸载当前应用，加载下一个应用，执行前后应用的生命周期</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上述方法不支持拦截 vue-router 中的 router-link</span></span><br><span class="line"><span class="comment">// 采用事件代理处理a标签</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> !== <span class="string">&quot;A&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> href = e.<span class="property">target</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/#\//</span>.<span class="title function_">test</span>(href)) &#123;</span><br><span class="line">    <span class="title function_">doLifeCycle</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="history-路由"><a href="#history-路由" class="headerlink" title="history 路由"></a>history 路由</h4><blockquote><p>history 有 <code>.pushState</code> <code>.replaceState</code> <code>.go</code> <code>.forward</code> <code>.back</code>五个方法，single-spa 只对前两个方法做了代理。</p><p>history 提供类似 hashchange 事件的 popstate 事件，但 popstate 事件有些不同：</p><ul><li>通过浏览器前进后退改变 URL 时会触发 popstate 事件，</li><li>通过<code>pushState</code>和<code>replaceState</code>或标签改变 URL 不会出发 popstate 事件。好在可以拦截<code>pushState</code>和<code>replaceState</code>的调用和标签点击事件来检测 URL 变化</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截浏览器前进后退</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;popstate&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="title function_">doLifeCycle</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截history跳转</span></span><br><span class="line"><span class="keyword">const</span> originPush = history.<span class="property">pushState</span>;</span><br><span class="line">history.<span class="property">pushState</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  originPush.<span class="title function_">apply</span>(<span class="variable language_">window</span>.<span class="property">history</span>, args);</span><br><span class="line">  <span class="title function_">doLifeCycle</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="property">replaceState</span> = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">  originReplace.<span class="title function_">apply</span>(<span class="variable language_">window</span>.<span class="property">history</span>, args);</span><br><span class="line">  <span class="title function_">doLifeCycle</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doLifeCycle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">    <span class="string">&quot;todo&quot;</span>,</span><br><span class="line">    <span class="string">`</span></span><br><span class="line"><span class="string">  判断路由改变是否从一个微服务到另一个微服务,</span></span><br><span class="line"><span class="string">  如果是，则卸载当前应用，加载下一个应用，执行前后应用的生命周期</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/front-tech/mFront_8.png" alt=""></p><h3 id="HTML-解析"><a href="#HTML-解析" class="headerlink" title="HTML 解析"></a>HTML 解析</h3><p>html 解析使用的是一个 npm 包 <code>import-html-entry</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">loadHTML</span> = <span class="keyword">async</span> (<span class="params">app</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; container, entry &#125; = app;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; template, getExternalScripts, getExternalStyleSheets &#125; =</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">importEntry</span>(entry);</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(container);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dom) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;容器不存在&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dom.<span class="property">innerHTML</span> = template;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">getExternalStyleSheets</span>();</span><br><span class="line">  <span class="keyword">const</span> jsCode = <span class="keyword">await</span> <span class="title function_">getExternalScripts</span>();</span><br><span class="line"></span><br><span class="line">  jsCode.<span class="title function_">forEach</span>(<span class="function">(<span class="params">script</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lifeCycle = <span class="title function_">runJS</span>(script, app);</span><br><span class="line">    <span class="keyword">if</span> (lifeCycle) &#123;</span><br><span class="line">      app.<span class="property">bootstrap</span> = lifeCycle.<span class="property">bootstrap</span>;</span><br><span class="line">      app.<span class="property">mount</span> = lifeCycle.<span class="property">mount</span>;</span><br><span class="line">      app.<span class="property">unmount</span> = lifeCycle.<span class="property">unmount</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="样式隔离-1"><a href="#样式隔离-1" class="headerlink" title="样式隔离"></a>样式隔离</h3><p>在 qiankun 中有如下配置可以设置子应用的样式隔离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">start</span>(&#123;</span><br><span class="line">  <span class="attr">sandbox</span>: &#123;</span><br><span class="line">    <span class="attr">strictStyleIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">experimentalStyleIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>strictStyleIsolation</code> 为每一个子应用包裹<code>ShadowDOM</code>节点，从而确保微应用的样式不会对全局造成影响。</li><li><code>experimentalStyleIsolation</code> 改写子应用的样式为所有样式规则增加一个特殊的选择器规则来限定其影响范围<ul><li><code>.hello</code> ——&gt; <code>div[data-qiankun=&quot;vueApp&quot;] .hello</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>使用Web Component 隔离样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.hello</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>主应用<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub-hello&quot;</span>&gt;</span>使用了子应用的class<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">appContent</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        container.<span class="property">innerHTML</span> = appContent;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> appElement = container.<span class="property">firstElementChild</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; innerHTML &#125; = appElement;</span></span><br><span class="line"><span class="language-javascript">        appElement.<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> shadow;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (appElement.<span class="property">attachShadow</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          shadow = appElement.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&quot;open&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          shadow = appElement.<span class="title function_">createShadowRoot</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        shadow.<span class="property">innerHTML</span> = innerHTML;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> appElement;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> subApp = <span class="string">`&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;style&gt;.sub-hello &#123;color: blue&#125;&lt;/style&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;p class=&quot;sub-hello&quot;&gt;子应用&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;`</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// document.getElementById(&#x27;container&#x27;).innerHTML = subApp;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>).<span class="title function_">appendChild</span>(<span class="title function_">createElement</span>(subApp));</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS-沙盒环境"><a href="#JS-沙盒环境" class="headerlink" title="JS 沙盒环境"></a>JS 沙盒环境</h3><blockquote><p>在 qiankun 的实现中，包含了两种沙箱，分别为</p><ul><li>Proxy 沙箱</li><li>快照沙箱<br>当浏览器不支持 Proxy 会降级为快照沙箱</li></ul></blockquote><p><img src="/images/front-tech/mFront_9.png" alt=""></p><h4 id="快照沙箱-SnapshotSandbox"><a href="#快照沙箱-SnapshotSandbox" class="headerlink" title="快照沙箱 SnapshotSandbox"></a>快照沙箱 SnapshotSandbox</h4><ul><li>基于数据 diff 备份和还原 window。</li><li>性能较差，主要用于不支持 Proxy 的低版本浏览器，而且也只适应单个子应用</li></ul><h4 id="单例沙箱-legacySandbox"><a href="#单例沙箱-legacySandbox" class="headerlink" title="单例沙箱 legacySandbox"></a>单例沙箱 legacySandbox</h4><blockquote><p>legacySandbox 设置了三个参数记录全局变量</p><ul><li>addedPropsMapInSandbox 沙箱新增的全局变量</li><li>modifiedPropsOriginalValueMapInSandbox 沙箱更新的全局变量</li><li>currentUpdatedPropsValueMap 持续记录更新的（新增和修改的）全局变量。</li></ul></blockquote><p><img src="/images/front-tech/mFront_10.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">LegacySandbox</span> = <span class="keyword">new</span> <span class="title class_">Legacy</span>();</span><br><span class="line">(<span class="function">(<span class="params"><span class="variable language_">window</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 激活沙箱</span></span><br><span class="line">  <span class="title class_">LegacySandbox</span>.<span class="title function_">active</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">age</span> = <span class="string">&quot;22&quot;</span>;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">sex</span> = <span class="string">&quot;女&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;激活&quot;</span>, <span class="variable language_">window</span>.<span class="property">sex</span>, <span class="variable language_">window</span>.<span class="property">age</span>, <span class="title class_">LegacySandbox</span>);</span><br><span class="line">&#125;)(<span class="title class_">LegacySandbox</span>.<span class="property">proxy</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Legacy</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">addedPropsMapInSandbox</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modifiedPropsOriginalValueMapInSandbox</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentUpdatedPropsValueMap</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> rawWindow = <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">const</span> fakeWindow = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sandboxRunning</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">target, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sandboxRunning</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!rawWindow.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">addedPropsMapInSandbox</span>[prop] = value;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">modifiedPropsOriginalValueMapInSandbox</span>[prop]) &#123;</span><br><span class="line">            <span class="keyword">const</span> originValue = rawWindow[prop];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">modifiedPropsOriginalValueMapInSandbox</span>[prop] = originValue;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentUpdatedPropsValueMap</span>[prop] = value;</span><br><span class="line">          rawWindow[prop] = value;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">(<span class="params">target, prop</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rawWindow[prop];</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">proxy</span> = proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">active</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">sandboxRunning</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">currentUpdatedPropsValueMap</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>[key] = <span class="variable language_">this</span>.<span class="property">currentUpdatedPropsValueMap</span>[key];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sandboxRunning</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inactive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">modifiedPropsOriginalValueMapInSandbox</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>[key] = <span class="variable language_">this</span>.<span class="property">modifiedPropsOriginalValueMapInSandbox</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">addedPropsMapInSandbox</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sandboxRunning</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多例沙箱-proxySandbox"><a href="#多例沙箱-proxySandbox" class="headerlink" title="多例沙箱 proxySandbox"></a>多例沙箱 proxySandbox</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxySandbox</span> &#123;</span><br><span class="line">  <span class="title function_">active</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sandboxRunning</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inactive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sandboxRunning</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rawWindow = <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">const</span> fakeWindow = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(fakeWindow, &#123;</span><br><span class="line">      <span class="attr">set</span>: <span class="function">(<span class="params">target, prop, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sandboxRunning</span>) &#123;</span><br><span class="line">          target[prop] = value;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">get</span>: <span class="function">(<span class="params">target, prop</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果fakeWindow里面有，就从fakeWindow里面取，否则，就从外部的window里面取</span></span><br><span class="line">        <span class="keyword">let</span> value = prop <span class="keyword">in</span> target ? target[prop] : rawWindow[prop];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">proxy</span> = proxy;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sex</span> = <span class="string">&quot;男&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> proxy1 = <span class="keyword">new</span> <span class="title class_">ProxySandbox</span>();</span><br><span class="line">(<span class="function">(<span class="params"><span class="variable language_">window</span></span>) =&gt;</span> &#123;</span><br><span class="line">  proxy1.<span class="title function_">active</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改前proxy1的sex&quot;</span>, <span class="variable language_">window</span>.<span class="property">sex</span>);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">sex</span> = <span class="string">&quot;111&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改后proxy1的sex&quot;</span>, <span class="variable language_">window</span>.<span class="property">sex</span>);</span><br><span class="line">&#125;)(proxy1.<span class="property">proxy</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;外部window.sex&quot;</span>, <span class="variable language_">window</span>.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 组件通信</title>
      <link href="/articles/vue/communication/"/>
      <url>/articles/vue/communication/</url>
      
        <content type="html"><![CDATA[<h3 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a>props / $emit</h3><h3 id="parent-children"><a href="#parent-children" class="headerlink" title="$parent / $children"></a>$parent / $children</h3><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="$dispatch"></a>$dispatch</h3><blockquote><p>一直递归找父组件，然后执行父组件中对应的 $emit 方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$dispatch</span> = <span class="keyword">function</span> (<span class="params">eventName, newValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span>;</span><br><span class="line">  <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">    parent.$emit(eventName, newValue);</span><br><span class="line">    parent = parent.<span class="property">$parent</span>; <span class="comment">// 继续递归接着往上找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="broadcast"><a href="#broadcast" class="headerlink" title="$broadcast"></a>$broadcast</h3><blockquote><p>一直往归找子元素，执行对应的方法执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$broadcast</span> = <span class="keyword">function</span> (<span class="params">eventName, newValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> children = <span class="variable language_">this</span>.<span class="property">$children</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">broad</span>(<span class="params">children</span>) &#123;</span><br><span class="line">    children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> &#123;</span><br><span class="line">      child.$emit(eventName, newValue);</span><br><span class="line">      <span class="keyword">if</span> (child.<span class="property">$children</span>) &#123;</span><br><span class="line">        <span class="title function_">broad</span>(child.<span class="property">$children</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">broad</span>(children);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sync-v-model"><a href="#sync-v-model" class="headerlink" title=".sync / v-model"></a>.sync / v-model</h3><blockquote><p>props 和 $emit 的语法糖</p><ul><li>只需要将 $emit(fn) 中的 fn 改为 update:xxx 就可以了，其中 xxx 为父组件传递给子组件的数据名</li><li>在子组件中调用 $emit(fn, val) 的时候 fn 的名字一定是这样的格式的 update:xxx</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Son</span> @<span class="attr">update</span>:number=<span class="string">&quot;newValue =&gt;number = newValue&quot;</span> :number=<span class="string">&quot;number&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>更新父组件的方法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;update:number&#x27;</span>, <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Son</span> @<span class="attr">update</span>:number=<span class="string">&quot;newValue =&gt; number = newValue&quot;</span> :number=<span class="string">&quot;number&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Son</span> <span class="attr">:number.sync</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="attrs-和-listeners"><a href="#attrs-和-listeners" class="headerlink" title="$attrs 和 $listeners"></a>$attrs 和 $listeners</h3><blockquote><p>$attrs 和 v-bind</p><ul><li>场景: 要将父组件的数据传递给孙组件，但是我们的子组件又没有使用到这些数据，这个时候可以使用 $attrs 了</li><li>局限性: 子组件不可以接收父组件的数据，也就是不可以有 props 钩子</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Son</span> :number=<span class="string">&quot;number&quot;</span> :count=<span class="string">&quot;count&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Grandson.vue</span></span><br><span class="line">&#123;&#123; $attrs &#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>$listeners 和 v-on</p><ul><li>通过 $listeners 和 v-on 的配合可以将全部事件传递给孙组件，子组件也是可以通过 $listeners 来接收父组件传递的全部事件</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;<span class="title class_">Son</span> :number=<span class="string">&quot;number&quot;</span> @change=<span class="string">&quot;change&quot;</span> @say=<span class="string">&quot;say&quot;</span> :count=<span class="string">&quot;count&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Grandson.vue</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$listeners</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="eventbus"><a href="#eventbus" class="headerlink" title="eventbus"></a>eventbus</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bug</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Vue</span>(); <span class="comment">// Vue本身就是具有发布订阅能力的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件A - 在组件A中发布事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;change&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件B - 在组件B中可以订阅这个事件实现通信</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;change&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 订阅事件</span></span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">push</span>(callback);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 发布事件</span></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">eventName, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">cb</span>(...args);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消订阅</span></span><br><span class="line">  <span class="title function_">off</span>(<span class="params">eventName, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[eventName]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[eventName] = <span class="variable language_">this</span>.<span class="property">events</span>[eventName].<span class="title function_">filter</span>(</span><br><span class="line">        <span class="function">(<span class="params">cb</span>) =&gt;</span> cb !== callback</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> ee = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">ee.<span class="title function_">on</span>(<span class="string">&quot;sayHi&quot;</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">ee.<span class="title function_">emit</span>(<span class="string">&quot;sayHi&quot;</span>); <span class="comment">// Hello!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cb</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">ee.<span class="title function_">on</span>(<span class="string">&quot;sayHi&quot;</span>, cb);</span><br><span class="line">ee.<span class="title function_">off</span>(<span class="string">&quot;sayHi&quot;</span>, cb);</span><br><span class="line">ee.<span class="title function_">emit</span>(<span class="string">&quot;sayHi&quot;</span>); <span class="comment">// 没有输出</span></span><br></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">vm</span>: <span class="variable language_">this</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;vm&#x27;</span>],</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">vm</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 keep-alive</title>
      <link href="/articles/vue/keepAlive/"/>
      <url>/articles/vue/keepAlive/</url>
      
        <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><ul><li>include: 字符串或正则表达式。只有名称匹配的组件会被缓存</li><li>exclude: 字符串或正则表达式。任何名称匹配的组件都不会被缓存</li><li>max: 数字。最多可以缓存多少组件实例</li></ul></blockquote><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><blockquote><ul><li>匹配时首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)，也就是组件的标签值。匿名组件不能被匹配</li><li>max 表示最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉 (LRU)</li><li><code>&lt;keep-alive&gt;</code> 只处理第一个子元素，所以一般和它搭配使用的有 component 动态组件或者是 router-view</li></ul></blockquote><div class="tip warning"><p>删除缓存组件并且为什么命中缓存了需要调整组件 key 的顺序：<br>缓存淘汰策略 LRU (Least recently used，最近最少使用) ，如果数据最近被访问过，那么将来被访问的几率也更高</p></div><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><blockquote><ul><li>组件一旦被 <code>&lt;keep-alive&gt;</code> 缓存，那么再次渲染的时候就不会执行 created、mounted 等钩子函数</li><li>activated 和 deactivated，执行时机是 <code>&lt;keep-alive&gt;</code> 包裹的组件激活时调用和停用时调用</li></ul></blockquote><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><blockquote><p>缓存机制</p><ul><li>将新数据从尾部插入到 this.keys 中</li><li>每当缓存命中 (即缓存数据被访问)，则将数据移到 this.keys 的尾部</li><li>当 this.keys 满的时候，将头部的数据丢弃</li></ul></blockquote><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式组件，执行 &lt;keep-alive&gt; 组件渲染的时候，就会执行 render 函数</span></span><br><span class="line">() =&gt; (&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="attr">abstract</span>: <span class="literal">true</span>,</span><br><span class="line">  </span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">include</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],</span><br><span class="line">      <span class="attr">max</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">created</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>) <span class="comment">// 存储需要缓存的组件，this.cache = &#123; &#x27;key1&#x27;:&#x27;组件1&#x27;, &#x27;key2&#x27;:&#x27;组件2&#x27;, // ... &#125;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">keys</span> = [] <span class="comment">// 存储每个需要缓存的组件的key，即对应this.cache对象中的键值</span></span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">destroyed</span> () &#123;</span><br><span class="line">        <span class="comment">// 将那些被缓存的并且当前没有处于被渲染状态的组件都销毁掉并将其从this.cache对象中剔除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">cache</span>) &#123;</span><br><span class="line">            <span class="title function_">pruneCacheEntry</span>(<span class="variable language_">this</span>.<span class="property">cache</span>, key, <span class="variable language_">this</span>.<span class="property">keys</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pruneCacheEntry函数</span></span><br><span class="line">    <span class="title function_">pruneCacheEntry</span> (cache,key,keys,current) &#123;</span><br><span class="line">        <span class="keyword">const</span> cached = cache[key]</span><br><span class="line">        <span class="comment">/* 判断当前没有处于被渲染状态的组件，将其销毁*/</span></span><br><span class="line">        <span class="keyword">if</span> (cached &amp;&amp; (!current || cached.<span class="property">tag</span> !== current.<span class="property">tag</span>)) &#123;</span><br><span class="line">        cached.<span class="property">componentInstance</span>.$destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        cache[key] = <span class="literal">null</span></span><br><span class="line">        <span class="title function_">remove</span>(keys, key)</span><br><span class="line">    &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果include 或exclude 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行pruneCache函数</span></span><br><span class="line">    <span class="title function_">mounted</span> () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$watch(<span class="string">&#x27;include&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">pruneCache</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> <span class="title function_">matches</span>(val, name))</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.$watch(<span class="string">&#x27;exclude&#x27;</span>, <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">pruneCache</span>(<span class="variable language_">this</span>, <span class="function"><span class="params">name</span> =&gt;</span> !<span class="title function_">matches</span>(val, name))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该函数内对this.cache对象进行遍历，取出每一项的name值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，</span></span><br><span class="line">    <span class="comment">// 则调用pruneCacheEntry函数将这个已经不需要缓存的组件实例先销毁掉，然后再将其从this.cache对象中剔除</span></span><br><span class="line">    <span class="title function_">pruneCache</span> (keepAliveInstance, filter) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; cache, keys, _vnode &#125; = keepAliveInstance</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> cache) &#123;</span><br><span class="line">          <span class="keyword">const</span> cachedNode = cache[key]</span><br><span class="line">          <span class="keyword">if</span> (cachedNode) &#123;</span><br><span class="line">            <span class="keyword">const</span> name = <span class="title function_">getComponentName</span>(cachedNode.<span class="property">componentOptions</span>)</span><br><span class="line">            <span class="keyword">if</span> (name &amp;&amp; !<span class="title function_">filter</span>(name)) &#123;</span><br><span class="line">              <span class="title function_">pruneCacheEntry</span>(cache, key, keys, _vnode)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      </span><br><span class="line">    <span class="title function_">pruneCacheEntry</span> (cache,key,keys,current) &#123;</span><br><span class="line">        <span class="keyword">const</span> cached = cache[key]</span><br><span class="line">        <span class="keyword">if</span> (cached &amp;&amp; (!current || cached.<span class="property">tag</span> !== current.<span class="property">tag</span>)) &#123;</span><br><span class="line">          cached.<span class="property">componentInstance</span>.$destroy()</span><br><span class="line">        &#125;</span><br><span class="line">        cache[key] = <span class="literal">null</span></span><br><span class="line">        <span class="title function_">remove</span>(keys, key)</span><br><span class="line">      &#125;,</span><br><span class="line">  </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">/* 获取默认插槽中的第一个组件节点 */</span></span><br><span class="line">      <span class="keyword">const</span> slot = <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span></span><br><span class="line">      <span class="keyword">const</span> vnode = <span class="title function_">getFirstComponentChild</span>(slot)</span><br><span class="line">      <span class="comment">/* 获取该组件节点的componentOptions */</span></span><br><span class="line">      <span class="keyword">const</span> componentOptions = vnode &amp;&amp; vnode.<span class="property">componentOptions</span></span><br><span class="line">  </span><br><span class="line">      <span class="keyword">if</span> (componentOptions) &#123;</span><br><span class="line">        <span class="comment">/* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span><br><span class="line">        <span class="keyword">const</span> name = <span class="title function_">getComponentName</span>(componentOptions)</span><br><span class="line">        <span class="comment">/* 优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">getComponentName</span> (<span class="params">opts</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> opts &amp;&amp; (opts.<span class="property">Ctor</span>.<span class="property">options</span>.<span class="property">name</span> || opts.<span class="property">tag</span>)</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">const</span> &#123; include, exclude &#125; = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">/* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          (include &amp;&amp; (!name || !<span class="title function_">matches</span>(include, name))) ||</span><br><span class="line">          <span class="comment">// excluded</span></span><br><span class="line">          (exclude &amp;&amp; name &amp;&amp; <span class="title function_">matches</span>(exclude, name))</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">return</span> vnode</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">const</span> &#123; cache, keys &#125; = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">/* 获取组件的key */</span></span><br><span class="line">        <span class="keyword">const</span> key = vnode.<span class="property">key</span> == <span class="literal">null</span></span><br><span class="line">          <span class="comment">// same constructor may get registered as different local components</span></span><br><span class="line">          <span class="comment">// so cid alone is not enough (##3269)</span></span><br><span class="line">          ? componentOptions.<span class="property">Ctor</span>.<span class="property">cid</span> + (componentOptions.<span class="property">tag</span> ? <span class="string">`::<span class="subst">$&#123;componentOptions.tag&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">          : vnode.<span class="property">key</span></span><br><span class="line">        <span class="comment">/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */</span></span><br><span class="line">        <span class="keyword">if</span> (cache[key]) &#123;</span><br><span class="line">          vnode.<span class="property">componentInstance</span> = cache[key].<span class="property">componentInstance</span></span><br><span class="line">          <span class="comment">/* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */</span></span><br><span class="line">          <span class="title function_">remove</span>(keys, key)</span><br><span class="line">          keys.<span class="title function_">push</span>(key)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 如果没有命中缓存，则将其设置进缓存 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          cache[key] = vnode</span><br><span class="line">          keys.<span class="title function_">push</span>(key)</span><br><span class="line">          <span class="comment">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">max</span> &amp;&amp; keys.<span class="property">length</span> &gt; <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">max</span>)) &#123;</span><br><span class="line">            <span class="title function_">pruneCacheEntry</span>(cache, keys[<span class="number">0</span>], keys, <span class="variable language_">this</span>.<span class="property">_vnode</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">/* 最后设置keepAlive标记位 */</span></span><br><span class="line">        vnode.<span class="property">data</span>.<span class="property">keepAlive</span> = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> vnode || (slot &amp;&amp; slot[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 指令</title>
      <link href="/articles/vue/directive/"/>
      <url>/articles/vue/directive/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>全局: Vue.directive —-&gt; 存放在 <code>Vue.options[&#39;directives&#39;]</code>中<br>局部: 组件内的 directive 选项中定义 —-&gt; 存放在 <code>vm.$options[&#39;directives&#39;]</code> 中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-focus&gt;&lt;/input&gt;;</span><br><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;focus&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="监听时机"><a href="#监听时机" class="headerlink" title="监听时机"></a>监听时机</h3><h4 id="钩子触发时机"><a href="#钩子触发时机" class="headerlink" title="钩子触发时机"></a>钩子触发时机</h4><blockquote><p>init</p><ul><li>触发时机: 已创建 VNode，在 patch 期间发现新的虚拟节点时被触发</li><li>回调参数: VNode</li></ul><p>create</p><ul><li>触发时机: 已基于 VNode 创建了 DOM 元素</li><li>回调参数: emptyNode 和 VNode</li></ul><p>activate</p><ul><li>触发时机: keep-alive 组件被创建</li><li>回调参数: emptyNode 和 VNode</li></ul><p>insert</p><ul><li>触发时机: VNode 对应的 DOM 元素被插入到父节点中时被触发</li><li>回调参数: VNode</li></ul><p>prepatch</p><ul><li>触发时机: 一个 VNode 即将被 patch 前触发</li><li>回调参数: oldVNode 和 VNode</li></ul><p>update</p><ul><li>触发时机: 一个 VNode 更新时触发</li><li>回调参数: oldVNode 和 VNode</li></ul><p>postpatch</p><ul><li>触发时机: 一个 VNode 被 patch 完毕时触发</li><li>回调参数: oldVNode 和 VNode</li></ul><p>destory</p><ul><li>触发时机: 一个 VNode 对应的 DOM 元素从 DOM 中移除时或者它的父元素从 DOM 中移除时触发</li><li>回调参数: VNode</li></ul><p>remove</p><ul><li>触发时机: 一个 VNode 对应的 DOM 元素从 DOM 中移除时触发。与 destory 不同的是，如果是直接将该 VNode 的父元素从 DOM 中移除导致该元素被移除，那么不会触发</li><li>回调参数: VNode 和 removeCallback</li></ul></blockquote><div class="tip success"><p>在 create、update、destory 三个阶段监听自定义指令</p></div><h3 id="指令钩子函数"><a href="#指令钩子函数" class="headerlink" title="指令钩子函数"></a>指令钩子函数</h3><blockquote><p>Vue 对于自定义指令定义对象提供了几个钩子函数，这几个钩子函数分别对应着指令的几种状态，一个指令从第一次被绑定到元素上到最终与被绑定的元素解绑，它会经过以下几种状态</p><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>inserted: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前</li><li>componentUpdated: 指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind: 只调用一次，指令与元素解绑时调用</li></ul><p>updateDirectives: 在合适的时机执行定义指令时所设置的钩子函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">updateDirectives</span>(<span class="params">oldVnode, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldVnode.<span class="property">data</span>.<span class="property">directives</span> || vnode.<span class="property">data</span>.<span class="property">directives</span>) &#123;</span><br><span class="line">    <span class="title function_">_update</span>(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_update</span>(<span class="params">oldVnode, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isCreate = oldVnode === emptyNode; <span class="comment">// 判断当前节点vnode对应的旧节点oldVnode是不是一个空节点，如果是的话，表明当前节点是一个新创建的节点</span></span><br><span class="line">  <span class="keyword">const</span> isDestroy = vnode === emptyNode; <span class="comment">// 判断当前节点vnode是不是一个空节点，如果是的话，表明当前节点对应的旧节点将要被销毁</span></span><br><span class="line">  <span class="keyword">const</span> oldDirs = <span class="title function_">normalizeDirectives</span>(</span><br><span class="line">    oldVnode.<span class="property">data</span>.<span class="property">directives</span>,</span><br><span class="line">    oldVnode.<span class="property">context</span></span><br><span class="line">  ); <span class="comment">// 旧的指令集合，即oldVnode中保存的指令</span></span><br><span class="line">  <span class="keyword">const</span> newDirs = <span class="title function_">normalizeDirectives</span>(vnode.<span class="property">data</span>.<span class="property">directives</span>, vnode.<span class="property">context</span>); <span class="comment">// 新的指令集合，即vnode中保存的指令</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dirsWithInsert = []; <span class="comment">// 保存需要触发inserted指令钩子函数的指令列表</span></span><br><span class="line">  <span class="keyword">const</span> dirsWithPostpatch = []; <span class="comment">// 保存需要触发componentUpdated指令钩子函数的指令列表</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> key, oldDir, dir;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> newDirs) &#123;</span><br><span class="line">    oldDir = oldDirs[key];</span><br><span class="line">    dir = newDirs[key];</span><br><span class="line">    <span class="keyword">if</span> (!oldDir) &#123;</span><br><span class="line">      <span class="comment">// 判断当前循环到的指令名key在旧的指令列表oldDirs中是否存在，如果不存在，说明该指令是首次绑定到元素上的一个新指令，此时调用callHook触发指令中的bind钩子函数</span></span><br><span class="line">      <span class="title function_">callHook</span>(dir, <span class="string">&quot;bind&quot;</span>, vnode, oldVnode);</span><br><span class="line">      <span class="comment">// 判断如果该新指令在定义时设置了inserted钩子函数，那么将该指令添加到dirsWithInsert中，以保证执行完所有指令的bind钩子函数后再执行指令的inserted钩子函数</span></span><br><span class="line">      <span class="keyword">if</span> (dir.<span class="property">def</span> &amp;&amp; dir.<span class="property">def</span>.<span class="property">inserted</span>) &#123;</span><br><span class="line">        dirsWithInsert.<span class="title function_">push</span>(dir);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 当前循环到的指令名key在旧的指令列表oldDirs中存在时，说明该指令在之前已经绑定过了，那么这一次的操作应该是更新指令</span></span><br><span class="line">      dir.<span class="property">oldValue</span> = oldDir.<span class="property">value</span>;</span><br><span class="line">      dir.<span class="property">oldArg</span> = oldDir.<span class="property">arg</span>;</span><br><span class="line">      <span class="comment">// 保存上一次指令的value属性值和arg属性值，然后调用callHook触发指令中的update钩子函数</span></span><br><span class="line">      <span class="title function_">callHook</span>(dir, <span class="string">&quot;update&quot;</span>, vnode, oldVnode);</span><br><span class="line">      <span class="comment">// 判断如果该指令在定义时设置了componentUpdated钩子函数，那么将该指令添加到dirsWithPostpatch中，以保证让指令所在的组件的VNode及其子VNode全部更新完后再执行指令的componentUpdated钩子函数</span></span><br><span class="line">      <span class="keyword">if</span> (dir.<span class="property">def</span> &amp;&amp; dir.<span class="property">def</span>.<span class="property">componentUpdated</span>) &#123;</span><br><span class="line">        dirsWithPostpatch.<span class="title function_">push</span>(dir);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断dirsWithInsert数组中是否有元素，如果有，则循环dirsWithInsert数组，依次执行每一个指令的inserted钩子函数</span></span><br><span class="line">  <span class="keyword">if</span> (dirsWithInsert.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="comment">// 并没有直接去循环执行每一个指令的inserted钩子函数，而是新创建了一个callInsert函数，当执行该函数的时候才会去循环执行每一个指令的inserted钩子函数</span></span><br><span class="line">    <span class="comment">// ==&gt; 1. 因为指令的inserted钩子函数必须在被绑定元素插入到父节点时调用，那么如果是一个新增的节点，如何保证它已经被插入到父节点了呢</span></span><br><span class="line">    <span class="comment">// 2. 当DOM节点在被插入到父节点时会触发insert函数，当虚拟DOM渲染更新的insert钩子函数被调用的时候就标志着当前节点已经被插入到父节点了，所以要在虚拟DOM渲染更新的insert钩子函数内执行指令的inserted钩子函数</span></span><br><span class="line">    <span class="comment">// 3. 当一个新创建的元素被插入到父节点中时虚拟DOM渲染更新的insert钩子函数和指令的inserted钩子函数都要被触发</span></span><br><span class="line">    <span class="comment">// 4. 可以把这两个钩子函数通过调用mergeVNodeHook方法进行合并，然后统一在虚拟DOM渲染更新的insert钩子函数中触发，就保证了元素确实被插入到父节点中才执行的指令的inserted钩子函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">callInsert</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dirsWithInsert.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">callHook</span>(dirsWithInsert[i], <span class="string">&quot;inserted&quot;</span>, vnode, oldVnode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (isCreate) &#123;</span><br><span class="line">      <span class="title function_">mergeVNodeHook</span>(vnode, <span class="string">&quot;insert&quot;</span>, callInsert);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">callInsert</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要保证指令所在的组件的VNode及其子VNode全部更新完后再执行指令的componentUpdated钩子函数，所以将虚拟DOM渲染更新的postpatch钩子函数和指令的componentUpdated钩子函数进行合并触发</span></span><br><span class="line">  <span class="keyword">if</span> (dirsWithPostpatch.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">mergeVNodeHook</span>(vnode, <span class="string">&quot;postpatch&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dirsWithPostpatch.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">callHook</span>(dirsWithPostpatch[i], <span class="string">&quot;componentUpdated&quot;</span>, vnode, oldVnode);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当newDirs循环完毕后，再循环oldDirs，如果某个指令存在于旧的指令列表oldDirs而在新的指令列表newDirs中不存在，那说明该指令是被废弃的，所以则触发指令的unbind钩子函数对指令进行解绑</span></span><br><span class="line">  <span class="keyword">if</span> (!isCreate) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> oldDirs) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!newDirs[key]) &#123;</span><br><span class="line">        <span class="comment">// no longer present, unbind</span></span><br><span class="line">        <span class="title function_">callHook</span>(oldDirs[key], <span class="string">&quot;unbind&quot;</span>, oldVnode, oldVnode, isDestroy);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// normalizeDirectives 用来模板中使用到的指令从存放指令的地方取出来，并将其格式进行统一化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeDirectives</span>(<span class="params">dirs, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (!dirs) &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> i, dir;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; dirs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    dir = dirs[i];</span><br><span class="line">    <span class="keyword">if</span> (!dir.<span class="property">modifiers</span>) &#123;</span><br><span class="line">      dir.<span class="property">modifiers</span> = emptyModifiers;</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="title function_">getRawDirName</span>(dir)] = dir;</span><br><span class="line">    dir.<span class="property">def</span> = <span class="title function_">resolveAsset</span>(vm.<span class="property">$options</span>, <span class="string">&quot;directives&quot;</span>, dir.<span class="property">name</span>, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------&gt;  转化后结果</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &#x27;v-focus&#x27;:&#123;</span></span><br><span class="line"><span class="comment">//         name : &#x27;focus&#x27; ,  // 指令的名称</span></span><br><span class="line"><span class="comment">//         value : &#x27;&#x27;,       // 指令的值</span></span><br><span class="line"><span class="comment">//         arg:&#x27;&#x27;,           // 指令的参数</span></span><br><span class="line"><span class="comment">//         modifiers:&#123;&#125;,     // 指令的修饰符</span></span><br><span class="line"><span class="comment">//         def:&#123;</span></span><br><span class="line"><span class="comment">//             inserted:fn</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 过滤器</title>
      <link href="/articles/vue/filter/"/>
      <url>/articles/vue/filter/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>质上就是一个 JS 函数</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>双花括号插值中和在 v-bind 表达式中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">v-bind:id=&quot;rawId | formatId&quot;</span><br></pre></td></tr></table></figure><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>组件的选项中定义局部过滤器，优先级高</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">capitalize</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      value = value.<span class="title function_">toString</span>();</span><br><span class="line">      <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>创建 Vue 实例之前使用全局 API，Vue.filter 定义全局过滤器</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;capitalize&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  value = value.<span class="title function_">toString</span>();</span><br><span class="line">  <span class="keyword">return</span> value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="串联过滤器"><a href="#串联过滤器" class="headerlink" title="串联过滤器"></a>串联过滤器</h3><blockquote><p><code>&#123;&#123; message | filterA | filterB &#125;&#125;</code></p><ul><li>message 做为参数传给 A，运算结果在穿过 B</li></ul><p><code>&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</code></p><ul><li>filterA 被定义为接受 3 个参数，message 为第一个参数</li></ul></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><blockquote><p><code>src/core/instance/render-helpers.js</code></p><ul><li>模板编译阶段会生成 _f 函数调用字符串，即 resolveFilter 函数，当执行渲染函数的时候，就会执行 _f 函数，从而让过滤器生效</li><li>根据过滤器 id 获取到对应的过滤器函数，然后传入参数调用即可</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveFilter</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resolveAsset</span>(<span class="variable language_">this</span>.<span class="property">$options</span>, <span class="string">&quot;filters&quot;</span>, id, <span class="literal">true</span>) || identity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">identity</span> = (<span class="params">_</span>) =&gt; _;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; options 当前实例的$options属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; type 为filters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; id 当前过滤器的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">warnMissing</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 根据过滤器id获取到用户定义的对应的过滤器函数并返回，拿到用户定义的过滤器函数之后，就可以调用该函数并传入参数使其生效了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params">options, type, id, warnMissing</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id !== <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 两种方式定义的过滤器都会被收集到当前实例的 $options 中，其中使用 Vue.filter 定义的过滤器会被添加到 $options 中的 filters 属性中</span></span><br><span class="line">  <span class="keyword">const</span> assets = options[type];</span><br><span class="line">  <span class="comment">// 先从本地注册中查找</span></span><br><span class="line">  <span class="comment">// 1. 检查assets自身中是否存在</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(assets, id)) <span class="keyword">return</span> assets[id];</span><br><span class="line">  <span class="comment">// 2. 将过滤器id转化成驼峰式后再次查找</span></span><br><span class="line">  <span class="keyword">const</span> camelizedId = <span class="title function_">camelize</span>(id);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(assets, camelizedId)) <span class="keyword">return</span> assets[camelizedId];</span><br><span class="line">  <span class="comment">// 3. 将过滤器id转化成首字母大写后再次查找</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">PascalCaseId</span> = <span class="title function_">capitalize</span>(camelizedId);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(assets, <span class="title class_">PascalCaseId</span>)) <span class="keyword">return</span> assets[<span class="title class_">PascalCaseId</span>];</span><br><span class="line">  <span class="comment">// 4. 再从原型链中查找，还不存在，则在非生产环境下抛出警告</span></span><br><span class="line">  <span class="keyword">const</span> res = assets[id] || assets[camelizedId] || assets[<span class="title class_">PascalCaseId</span>];</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; warnMissing &amp;&amp; !res) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&quot;Failed to resolve &quot;</span> + type.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>) + <span class="string">&quot;: &quot;</span> + id, options);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="串联过滤器-1"><a href="#串联过滤器-1" class="headerlink" title="串联过滤器"></a>串联过滤器</h2><blockquote><p>与单个过滤器有所区别的是: 对于多个串联过滤器，在调用过滤器函数传递参数时，后一个过滤器的输入参数是前一个过滤器的输出结果</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line">// ===&gt; 编译成 _f(&quot;capitalize&quot;)(message)</span><br><span class="line">// 1. 截取字符串拿到 _f(&quot;capitalize&quot;) 中定义的 capitalize 函数</span><br><span class="line">// 2. 传入 message 参数执行 capitalize 函数</span><br><span class="line"></span><br><span class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</span><br><span class="line">// ===&gt; 编译成 _f(&quot;filterB&quot;)(_f(&quot;filterA&quot;)(message))</span><br><span class="line"></span><br><span class="line">&#123;&#123; message | filterA | filterB(arg) &#125;&#125;</span><br><span class="line">// ===&gt; 编译成 _f(&quot;filterB&quot;)(_f(&quot;filterA&quot;)(message), arg)</span><br><span class="line">// 当过滤器接收其余参数时，它的参数都是从第二个参数开始往后传入的</span><br></pre></td></tr></table></figure><h2 id="解析过滤器"><a href="#解析过滤器" class="headerlink" title="解析过滤器"></a>解析过滤器</h2><blockquote><p><code>src/complier/parser/filter-parser.js</code><br>解析花括号中的</p><ul><li>当作标签文本解析，在 parseHTML 过程中的 chars 钩子函数里调用 parseText，在此调用 parseFilters</li></ul><p>解析 v-bind 中的</p><ul><li>当作标签属性解析，在 parseHTML 过程中的 processAttrs 里调用 parseFilters</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &gt; 将过滤器形式转化成 _f(&quot;capitalize&quot;)(message) 形式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseFilters</span>(<span class="params">exp</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> inSingle = <span class="literal">false</span>; <span class="comment">// exp是否在 &#x27;&#x27; 中</span></span><br><span class="line">  <span class="keyword">let</span> inDouble = <span class="literal">false</span>; <span class="comment">// exp是否在 &quot;&quot; 中</span></span><br><span class="line">  <span class="keyword">let</span> inTemplateString = <span class="literal">false</span>; <span class="comment">// exp是否在 `` 中</span></span><br><span class="line">  <span class="keyword">let</span> inRegex = <span class="literal">false</span>; <span class="comment">// exp是否在 \\ 中</span></span><br><span class="line">  <span class="keyword">let</span> curly = <span class="number">0</span>; <span class="comment">// 在exp中发现一个 &#123; 则curly加1，发现一个 &#125; 则curly减1，直到culy为0 说明 &#123; ... &#125;闭合</span></span><br><span class="line">  <span class="keyword">let</span> square = <span class="number">0</span>; <span class="comment">// 在exp中发现一个 [ 则curly加1，发现一个 ] 则curly减1，直到culy为0 说明 [ ... ]闭合</span></span><br><span class="line">  <span class="keyword">let</span> paren = <span class="number">0</span>; <span class="comment">// 在exp中发现一个 ( 则curly加1，发现一个 ) 则curly减1，直到culy为0 说明 ( ... )闭合</span></span><br><span class="line">  <span class="keyword">let</span> lastFilterIndex = <span class="number">0</span>; <span class="comment">// 解析游标，每循环过一个字符串游标加1</span></span><br><span class="line">  <span class="keyword">let</span> c, prev, i, expression, filters;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 从头开始遍历传入的exp每一个字符，通过判断每一个字符是否是特殊字符（如&#x27;,&quot;,&#123;,&#125;,[,],(,),\,|）进而判断出exp字符串中哪些部分是表达式，哪些部分是过滤器id</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; exp.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    prev = c;</span><br><span class="line">    c = exp.<span class="title function_">charCodeAt</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (inSingle) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c === <span class="number">0x27</span> &amp;&amp; prev !== <span class="number">0x5c</span>) inSingle = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inDouble) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c === <span class="number">0x22</span> &amp;&amp; prev !== <span class="number">0x5c</span>) inDouble = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inTemplateString) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c === <span class="number">0x60</span> &amp;&amp; prev !== <span class="number">0x5c</span>) inTemplateString = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inRegex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (c === <span class="number">0x2f</span> &amp;&amp; prev !== <span class="number">0x5c</span>) inRegex = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      c === <span class="number">0x7c</span> &amp;&amp; <span class="comment">// pipe</span></span><br><span class="line">      exp.<span class="title function_">charCodeAt</span>(i + <span class="number">1</span>) !== <span class="number">0x7c</span> &amp;&amp;</span><br><span class="line">      exp.<span class="title function_">charCodeAt</span>(i - <span class="number">1</span>) !== <span class="number">0x7c</span> &amp;&amp;</span><br><span class="line">      !curly &amp;&amp;</span><br><span class="line">      !square &amp;&amp;</span><br><span class="line">      !paren</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (expression === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">// first filter, end of expression</span></span><br><span class="line">        lastFilterIndex = i + <span class="number">1</span>;</span><br><span class="line">        expression = exp.<span class="title function_">slice</span>(<span class="number">0</span>, i).<span class="title function_">trim</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">pushFilter</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x22</span>:</span><br><span class="line">          inDouble = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// &quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x27</span>:</span><br><span class="line">          inSingle = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// &#x27;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x60</span>:</span><br><span class="line">          inTemplateString = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// `</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x28</span>:</span><br><span class="line">          paren++;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// (</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x29</span>:</span><br><span class="line">          paren--;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// )</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x5b</span>:</span><br><span class="line">          square++;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// [</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x5d</span>:</span><br><span class="line">          square--;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// ]</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7b</span>:</span><br><span class="line">          curly++;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// &#123;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x7d</span>:</span><br><span class="line">          curly--;</span><br><span class="line">          <span class="keyword">break</span>; <span class="comment">// &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (c === <span class="number">0x2f</span>) &#123;</span><br><span class="line">        <span class="comment">// /</span></span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> p;</span><br><span class="line">        <span class="comment">// find first non-whitespace prev char</span></span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">          p = exp.<span class="title function_">charAt</span>(j);</span><br><span class="line">          <span class="keyword">if</span> (p !== <span class="string">&quot; &quot;</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!p || !validDivisionCharRE.<span class="title function_">test</span>(p)) &#123;</span><br><span class="line">          inRegex = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 当匹配到过滤器中的|符时，那么|符前面的字符串就认为是待处理的表达式，将其存储在 expression 中，后面继续匹配，</span></span><br><span class="line">  <span class="comment">// 如果再次匹配到过滤器中的 |符 ,并且此时expression有值， 那么说明后面还有第二个过滤器，</span></span><br><span class="line">  <span class="comment">// 那么此时两个|符之间的字符串就是第一个过滤器的id，此时调用 pushFilter函数将第一个过滤器添加进filters数组中</span></span><br><span class="line">  <span class="comment">// 比如 message | filter1 | filter2(arg) 会被解析成 expression = message;filters = [&#x27;filter1&#x27;,&#x27;filter2(arg)&#x27;]</span></span><br><span class="line">  <span class="keyword">if</span> (expression === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    expression = exp.<span class="title function_">slice</span>(<span class="number">0</span>, i).<span class="title function_">trim</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastFilterIndex !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">pushFilter</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">pushFilter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    (filters || (filters = [])).<span class="title function_">push</span>(exp.<span class="title function_">slice</span>(lastFilterIndex, i).<span class="title function_">trim</span>());</span><br><span class="line">    lastFilterIndex = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 遍历得到的filters数组，并将数组的每一个元素及expression传给wrapFilter函数，用来生成最终的_f函数调用字符串</span></span><br><span class="line">  <span class="keyword">if</span> (filters) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; filters.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      expression = <span class="title function_">wrapFilter</span>(expression, filters[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wrapFilter</span>(<span class="params">exp, filter</span>) &#123;</span><br><span class="line">  <span class="comment">// 解析得到的每个过滤器中查找是否有(</span></span><br><span class="line">  <span class="keyword">const</span> i = filter.<span class="title function_">indexOf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">  <span class="comment">// 没有说明该过滤器没有接收参数，则直接构造_f函数调用字符串即_f(&quot;filter1&quot;)(message)并返回赋给expression</span></span><br><span class="line">  <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// _f: resolveFilter</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_f(&quot;<span class="subst">$&#123;filter&#125;</span>&quot;)(<span class="subst">$&#123;exp&#125;</span>)`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 将新的experssion与filters数组中下一个过滤器再调用wrapFilter函数,</span></span><br><span class="line">    <span class="comment">// 如果下一个过滤器有参数，那么先取出过滤器id，再取出其带有的参数，生成第二个过滤器的_f函数调用字符串，即_f(&quot;filter2&quot;)(_f(&quot;filter1&quot;)(message),arg)</span></span><br><span class="line">    <span class="keyword">const</span> name = filter.<span class="title function_">slice</span>(<span class="number">0</span>, i);</span><br><span class="line">    <span class="keyword">const</span> args = filter.<span class="title function_">slice</span>(i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`_f(&quot;<span class="subst">$&#123;name&#125;</span>&quot;)(<span class="subst">$&#123;exp&#125;</span><span class="subst">$&#123;args !== <span class="string">&quot;)&quot;</span> ? <span class="string">&quot;,&quot;</span> + args : args&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 全局方法</title>
      <link href="/articles/vue/global/"/>
      <url>/articles/vue/global/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h3><blockquote><p>使用基础 Vue 构造器，创建一个子类: 先创建一个类 Sub，接着通过原型继承的方式将该类继承基础 Vue 类，然后给 Sub 类添加一些属性以及将父类的某些属性复制到 Sub 类上，最后将 Sub 类返回</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line">&lt;div id=<span class="string">&quot;mount-point&quot;</span>&gt;&lt;/div&gt;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Profile</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&quot;Walter&quot;</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&quot;White&quot;</span>,</span><br><span class="line">      <span class="attr">alias</span>: <span class="string">&quot;Heisenberg&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Profile</span>().$mount(<span class="string">&quot;##mount-point&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">extend</span> = <span class="keyword">function</span> (<span class="params">extendOptions</span>) &#123;</span><br><span class="line">  extendOptions = extendOptions || &#123;&#125;; <span class="comment">// 传入的一个包含组件选项的对象参数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Super</span> = <span class="variable language_">this</span>; <span class="comment">// 指向父类，即基础 Vue类</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">SuperId</span> = <span class="title class_">Super</span>.<span class="property">cid</span>; <span class="comment">// 父类的cid属性，无论是基础 Vue类还是从基础 Vue类继承而来的类，都有一个cid属性，作为该类的唯一标识</span></span><br><span class="line">  <span class="keyword">const</span> cachedCtors = extendOptions.<span class="property">_Ctor</span> || (extendOptions.<span class="property">_Ctor</span> = &#123;&#125;); <span class="comment">// 缓存池，用于缓存创建出来的类</span></span><br><span class="line">  <span class="comment">// 结果缓存</span></span><br><span class="line">  <span class="keyword">if</span> (cachedCtors[<span class="title class_">SuperId</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedCtors[<span class="title class_">SuperId</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取到传入的选项参数中的name字段，并且在开发环境下校验name字段是否合法</span></span><br><span class="line">  <span class="keyword">const</span> name = extendOptions.<span class="property">name</span> || <span class="title class_">Super</span>.<span class="property">options</span>.<span class="property">name</span>;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; name) &#123;</span><br><span class="line">    <span class="title function_">validateComponentName</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个类Sub，这个类就是将要继承基础Vue类的子类，接着让该类去继承基础Vue类，让其具备一些基础Vue类的能力</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Sub</span> = <span class="keyword">function</span> <span class="title function_">VueComponent</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_init</span>(options);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 1. 将父类的原型继承到子类中，并且为子类添加唯一标识cid</span></span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Super</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Sub</span>;</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">cid</span> = cid++;</span><br><span class="line">  <span class="comment">// 2. 将父类的options与子类的options进行合并，将合并结果赋给子类的options属性</span></span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">options</span> = <span class="title function_">mergeOptions</span>(<span class="title class_">Super</span>.<span class="property">options</span>, extendOptions);</span><br><span class="line">  <span class="comment">// 3. 将父类保存到子类的super属性中，以确保在子类中能够拿到父类</span></span><br><span class="line">  <span class="title class_">Sub</span>[<span class="string">&quot;super&quot;</span>] = <span class="title class_">Super</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 如果选项中存在props属性，则初始化它</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Sub</span>.<span class="property">options</span>.<span class="property">props</span>) &#123;</span><br><span class="line">    <span class="title function_">initProps</span>(<span class="title class_">Sub</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把参数中传入的props选项代理到原型的_props中</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initProps</span>(<span class="params"><span class="title class_">Comp</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> props = <span class="title class_">Comp</span>.<span class="property">options</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> props) &#123;</span><br><span class="line">      <span class="title function_">proxy</span>(<span class="title class_">Comp</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">`_props`</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 如果选项中存在computed属性，则初始化它</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Sub</span>.<span class="property">options</span>.<span class="property">computed</span>) &#123;</span><br><span class="line">    <span class="title function_">initComputed</span>(<span class="title class_">Sub</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将每一项都调用defineComputed函数定义到子类原型上</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initComputed</span>(<span class="params"><span class="title class_">Comp</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> computed = <span class="title class_">Comp</span>.<span class="property">options</span>.<span class="property">computed</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">      <span class="title function_">defineComputed</span>(<span class="title class_">Comp</span>.<span class="property"><span class="keyword">prototype</span></span>, key, computed[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 6. 将父类中的一些属性复制到子类中</span></span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">extend</span> = <span class="title class_">Super</span>.<span class="property">extend</span>;</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">mixin</span> = <span class="title class_">Super</span>.<span class="property">mixin</span>;</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">use</span> = <span class="title class_">Super</span>.<span class="property">use</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create asset registers, so extended classes</span></span><br><span class="line">  <span class="comment">// can have their private assets too.</span></span><br><span class="line">  <span class="variable constant_">ASSET_TYPES</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params"><span class="keyword">type</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Sub</span>[<span class="keyword">type</span>] = <span class="title class_">Super</span>[<span class="keyword">type</span>];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// enable recursive self-lookup</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="title class_">Sub</span>.<span class="property">options</span>.<span class="property">components</span>[name] = <span class="title class_">Sub</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 7. 给子类新增三个独有的属性</span></span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">superOptions</span> = <span class="title class_">Super</span>.<span class="property">options</span>;</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">extendOptions</span> = extendOptions;</span><br><span class="line">  <span class="title class_">Sub</span>.<span class="property">sealedOptions</span> = <span class="title function_">extend</span>(&#123;&#125;, <span class="title class_">Sub</span>.<span class="property">options</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 8. 用父类的cid作为key，创建好的子类Sub作为value，存入缓存池cachedCtors中</span></span><br><span class="line">  cachedCtors[<span class="title class_">SuperId</span>] = <span class="title class_">Sub</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Sub</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-nextTick"><a href="#Vue-nextTick" class="headerlink" title="Vue.nextTick"></a>Vue.nextTick</h3><blockquote><p>该 API 的原理同实例方法 $nextTick 原理一样，此处不再重复。唯一不同的是实例方法 $nextTick 中回调的 this 绑定在调用它的实例上</p></blockquote><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><h3 id="Vue-delete"><a href="#Vue-delete" class="headerlink" title="Vue.delete"></a>Vue.delete</h3><h3 id="Vue-directive"><a href="#Vue-directive" class="headerlink" title="Vue.directive"></a>Vue.directive</h3><blockquote><p>注册或获取全局指令</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;my-directive&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">bind</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">update</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">componentUpdated</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="attr">unbind</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 (指令函数)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;my-directive&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 这里将会被 `bind` 和 `update` 调用</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的指令</span></span><br><span class="line"><span class="keyword">var</span> myDirective = <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;my-directive&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span>[<span class="string">&quot;directives&quot;</span>] = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">// 存放指令的位置</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">directive</span> = <span class="keyword">function</span> (<span class="params">id, definition</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取指令</span></span><br><span class="line">  <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;directives&quot;</span>][id];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 注册指令</span></span><br><span class="line">    <span class="comment">// 如果是函数，则默认监听bind和update两个事件，即将definition函数分别赋给bind和update两个属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;directive&quot;</span> &amp;&amp; <span class="keyword">typeof</span> definition === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      definition = &#123; <span class="attr">bind</span>: definition, <span class="attr">update</span>: definition &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不是一个函数，那么即认为它是用户自定义的指令对象，直接将其保存在this.options[&#x27;directives&#x27;]中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;directives&quot;</span>][id] = definition;</span><br><span class="line">    <span class="keyword">return</span> definition;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-filter"><a href="#Vue-filter" class="headerlink" title="Vue.filter"></a>Vue.filter</h3><blockquote><p>注册或获取全局过滤器</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;my-filter&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 返回处理后的值</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的过滤器</span></span><br><span class="line"><span class="keyword">var</span> myFilter = <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;my-filter&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span>[<span class="string">&quot;filters&quot;</span>] = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">filter</span> = <span class="keyword">function</span> (<span class="params">id, definition</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;filters&quot;</span>][id];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;filters&quot;</span>][id] = definition;</span><br><span class="line">    <span class="keyword">return</span> definition;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-component"><a href="#Vue-component" class="headerlink" title="Vue.component"></a>Vue.component</h3><blockquote><p>注册或获取全局组件。注册还会自动使用给定的 id 设置组件的名称</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册组件，传入一个扩展过的构造器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(</span><br><span class="line">  <span class="string">&quot;my-component&quot;</span>,</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-component&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取注册的组件 (始终返回构造器)</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyComponent</span> = <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;my-component&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">options</span>[<span class="string">&quot;components&quot;</span>] = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">filter</span> = <span class="keyword">function</span> (<span class="params">id, definition</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!definition) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;components&quot;</span>][id];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 首先会校验组件的name值是否合法</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; <span class="keyword">type</span> === <span class="string">&quot;component&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">validateComponentName</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 判断传入的definition参数是否是一个对象，如果是对象，则使用Vue.extend方法将其变为Vue的子类，同时如果definition对象中不存在name属性时，则使用组件id作为组件的name属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;component&quot;</span> &amp;&amp; <span class="title function_">isPlainObject</span>(definition)) &#123;</span><br><span class="line">      definition.<span class="property">name</span> = definition.<span class="property">name</span> || id;</span><br><span class="line">      definition = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">_base</span>.<span class="title function_">extend</span>(definition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 将注册好的组件保存在this.options[&#x27;components&#x27;]</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span>[<span class="string">&quot;components&quot;</span>][id] = definition;</span><br><span class="line">    <span class="keyword">return</span> definition;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use"></a>Vue.use</h3><blockquote><p>安装 Vue.js 插件。如果插件是一个对象，必须提供 install 方法。如果插件是一个函数，它会被作为 install 方法。install 方法调用时，会将 Vue 作为参数传入</p><ul><li>该方法需要在调用 new Vue() 之前被调用</li><li>当 install 方法被同一个插件多次调用，插件将只会被安装一次</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">use</span> = <span class="keyword">function</span> (<span class="params">plugin</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> installedPlugins =</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_installedPlugins</span> || (<span class="variable language_">this</span>.<span class="property">_installedPlugins</span> = []); <span class="comment">// 用来存储已安装过的插件</span></span><br><span class="line">  <span class="comment">// 1. 判断传入的插件是否存在于installedPlugins数组中（即已被安装过），如果存在的话，则直接返回，防止重复安装</span></span><br><span class="line">  <span class="keyword">if</span> (installedPlugins.<span class="title function_">indexOf</span>(plugin) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 获取到传入的其余参数，并且使用toArray方法将其转换成数组，同时将Vue插入到该数组的第一个位置，这是因为在后续调用install方法时，Vue必须作为第一个参数传入</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="title function_">toArray</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  args.<span class="title function_">unshift</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="comment">// 3. 判断传入的插件如果是一个提供了 install 方法的对象，那么就执行该对象中提供的 install 方法并传入参数完成插件安装</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.<span class="property">install</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    plugin.<span class="property">install</span>.<span class="title function_">apply</span>(plugin, args);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 4. 传入的插件是一个函数，那么就把这个函数当作install方法执行，同时传入参数完成插件安装</span></span><br><span class="line">    plugin.<span class="title function_">apply</span>(<span class="literal">null</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 插件安装完成之后，将该插件添加进已安装插件列表中，防止重复安装</span></span><br><span class="line">  installedPlugins.<span class="title function_">push</span>(plugin);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-mixin"><a href="#Vue-mixin" class="headerlink" title="Vue.mixin"></a>Vue.mixin</h3><blockquote><p>全局注册一个混入，即可以修改 Vue.options，影响注册之后所有创建的每个 Vue 实例</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property">mixin</span> = <span class="keyword">function</span> (<span class="params">mixin</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span> = <span class="title function_">mergeOptions</span>(<span class="variable language_">this</span>.<span class="property">options</span>, mixin);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-compile"><a href="#Vue-compile" class="headerlink" title="Vue.compile"></a>Vue.compile</h3><blockquote><p>在 render 函数中编译模板字符串。只在独立构建时有效</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="title class_">Vue</span>.<span class="title function_">compile</span>(<span class="string">&quot;&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">render</span>: res.<span class="property">render</span>,</span><br><span class="line">  <span class="attr">staticRenderFns</span>: res.<span class="property">staticRenderFns</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">compile</span> = compileToFunctions;</span><br></pre></td></tr></table></figure><h3 id="Vue-observable"><a href="#Vue-observable" class="headerlink" title="Vue.observable"></a>Vue.observable</h3><blockquote><p>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title class_">Vue</span>.<span class="title function_">observable</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">      <span class="string">&quot;button&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">on</span>: &#123;</span><br><span class="line">          <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            state.<span class="property">count</span>++;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">`count is: <span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Vue-version"><a href="#Vue-version" class="headerlink" title="Vue.version"></a>Vue.version</h3><blockquote><p>提供字符串形式的 Vue 安装版本号。这对社区的插件和组件来说非常有用，你可以根据不同的版本号采取不同的策略</p><ul><li>该 API 是在构建时读取了 package.json 中的 version 字段，然后将其赋值给 Vue.version</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> version = <span class="title class_">Number</span>(<span class="title class_">Vue</span>.<span class="property">version</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (version === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v2.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (version === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v1.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Unsupported versions of Vue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 实例方法</title>
      <link href="/articles/vue/instance/"/>
      <url>/articles/vue/instance/</url>
      
        <content type="html"><![CDATA[<h3 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h3><blockquote><p>通过 stateMixin 方法中挂载到 vue 原型上</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">stateMixin</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$set</span> = set;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$delete</span> = del;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$watch</span> = <span class="keyword">function</span> (<span class="params">expOrFn, cb, options</span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h4><blockquote><p>全局 Vue.set 的别名，其用法相同。对象不能是 Vue 实例，或者 Vue 实例的根数据对象</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">    (<span class="title function_">isUndef</span>(target) || <span class="title function_">isPrimitive</span>(target))</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Cannot set reactive property on undefined, null, or primitive value: <span class="subst">$&#123;target&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. 判断如果传入的target是数组并且传入的key是有效索引的话，那么就取当前数组长度与key这两者的最大值作为数组的新长度，然后使用数组的splice方法将传入的索引key对应的val值添加进数组</span></span><br><span class="line">  <span class="comment">// splice方法已经被重写，当使用splice方法向数组内添加元素时，该元素会自动被变成响应式的</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isValidArrayIndex</span>(key)) &#123;</span><br><span class="line">    target.<span class="property">length</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(target.<span class="property">length</span>, key);</span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>, val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 判断传入的key是否已经存在于target中，如果存在，表明这次操作不是新增属性，而是对已有的属性进行简单的修改值，那么就只修改属性值即可</span></span><br><span class="line">  <span class="keyword">if</span> (key <span class="keyword">in</span> target &amp;&amp; !(key <span class="keyword">in</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)) &#123;</span><br><span class="line">    target[key] = val;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 获取到traget的__ob__属性，该属性是否为true标志着target是否为响应式对象，接着判断如果tragte是 Vue 实例，或者是 Vue 实例的根数据对象，则抛出警告并退出程序</span></span><br><span class="line">  <span class="keyword">const</span> ob = target.<span class="property">__ob__</span>;</span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">_isVue</span> || (ob &amp;&amp; ob.<span class="property">vmCount</span>)) &#123;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&quot;Avoid adding reactive properties to a Vue instance or its root $data &quot;</span> +</span><br><span class="line">          <span class="string">&quot;at runtime - declare it upfront in the data option.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 判断如果ob属性为false，那么表明target不是一个响应式对象，那么我们只需简单给它添加上新的属性，不用将新属性转化成响应式</span></span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    target[key] = val;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 如果target是对象，并且是响应式，那么就调用defineReactive方法将新属性值添加到target上，defineReactive方会将新属性添加完之后并将其转化成响应式，最后通知依赖更新</span></span><br><span class="line">  <span class="title function_">defineReactive</span>(ob.<span class="property">value</span>, key, val);</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-delete"><a href="#vm-delete" class="headerlink" title="vm.$delete"></a>vm.$delete</h4><blockquote><p>全局 Vue.delete 的别名，其用法相同。删除对象的属性。如果对象是响应式的，确保删除能触发更新视图。这个方法主要用于避开 Vue 不能检测到属性被删除的限制</p><ul><li>目标对象不能是一个 Vue 实例或 Vue 实例的根数据对象</li><li>原理基本与 set 相同</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">del</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">    (<span class="title function_">isUndef</span>(target) || <span class="title function_">isPrimitive</span>(target))</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Cannot delete reactive property on undefined, null, or primitive value: <span class="subst">$&#123;target&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isValidArrayIndex</span>(key)) &#123;</span><br><span class="line">    target.<span class="title function_">splice</span>(key, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> ob = target.<span class="property">__ob__</span>;</span><br><span class="line">  <span class="keyword">if</span> (target.<span class="property">_isVue</span> || (ob &amp;&amp; ob.<span class="property">vmCount</span>)) &#123;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&quot;Avoid deleting properties on a Vue instance or its root $data &quot;</span> +</span><br><span class="line">          <span class="string">&quot;- just set it to null.&quot;</span></span><br><span class="line">      );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断传入的key是否存在于target中，如果key本来就不存在于target中，那就不用删除，直接退出程序即可</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">hasOwn</span>(target, key)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果target是对象，并且传入的key也存在于target中，那么就从target中将该属性删除，</span></span><br><span class="line">  <span class="comment">// 同时判断当前的target是否为响应式对象，如果是响应式对象，则通知依赖更新；如果不是，删除完后直接返回不通知更新</span></span><br><span class="line">  <span class="keyword">delete</span> target[key];</span><br><span class="line">  <span class="keyword">if</span> (!ob) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="comment">// 键路径</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="string">&quot;a.b.c&quot;</span>,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">    <span class="keyword">if</span> (unwatch) &#123;</span><br><span class="line">      <span class="title function_">unwatch</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>, <span class="comment">// 监听数组的变动不需要</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">// 不能在第一次回调时取消侦听给定的 property</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 表达式 `this.a + this.b` 每次得出一个不同的结果时</span></span><br><span class="line">    <span class="comment">// 处理函数都会被调用。</span></span><br><span class="line">    <span class="comment">// 这就像监听一个未被定义的计算属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个取消观察函数，用来停止触发回调</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(<span class="string">&quot;a&quot;</span>, cb);</span><br><span class="line"><span class="title function_">unwatch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$watch</span> = <span class="keyword">function</span> (<span class="params">expOrFn, cb, options</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 1. 判断传入的回调函数是否为一个对象</span></span><br><span class="line">  <span class="comment">// - 如果是，表明是把第二个参数回调函数cb和第三个参数选项options合起来传入的，此时调用createWatcher函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(cb)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createWatcher</span>(vm, expOrFn, cb, options);</span><br><span class="line">  &#125;</span><br><span class="line">  options = options || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 2. 表示实例是用户手动调用$watch方法创建而来的，区分用户创建的watcher实例和Vue内部创建的watcher实例</span></span><br><span class="line">  options.<span class="property">user</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 3. 创建一个watcher实例</span></span><br><span class="line">  <span class="keyword">const</span> watcher = <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, expOrFn, cb, options);</span><br><span class="line">  <span class="comment">// 4. 判断如果在选项参数options中指定的immediate为true，则立即用被观察数据当前的值触发回调</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">immediate</span>) &#123;</span><br><span class="line">    cb.<span class="title function_">call</span>(vm, watcher.<span class="property">value</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 返回一个取消观察函数unwatchFn，用来停止触发回调</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">unwatchFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    watcher.<span class="title function_">teardown</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁分析</span></span><br><span class="line">  <span class="comment">// 1. 上面watcher实例，它观察了数据a和数据b，那么它就依赖了数据a和数据b，那么这个watcher实例就存在于数据a和数据b的依赖管理器depA和depB中，</span></span><br><span class="line">  <span class="comment">// 同时watcher实例的deps属性中也记录了这两个依赖管理器，即this.deps=[depA,depB]</span></span><br><span class="line">  <span class="comment">// 2. 当取消观察时，就遍历this.deps，让每个依赖管理器调用其removeSub方法将这个watcher实例从自己的依赖列表中删除</span></span><br><span class="line">  vm.$watch(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 做点什么</span></span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// deep 原理</span></span><br><span class="line"><span class="comment">// 思路: </span></span><br><span class="line"><span class="comment">// 1. 成为内层数据的依赖: 数据变化会通知所有的依赖</span></span><br><span class="line"><span class="comment">// 2. 创建 watcher 实例时把对象内部所有的值都递归读取一遍，watcher 实例加入到对象内部所有值的依赖列表中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="comment">/* ... */</span></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// &quot;touch&quot; every property so they are all tracked as dependencies for deep watching</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deep</span>) &#123;</span><br><span class="line">      <span class="title function_">traverse</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seenObjects = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">traverse</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="title function_">_traverse</span>(val, seenObjects);</span><br><span class="line">  seenObjects.<span class="title function_">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_traverse</span>(<span class="params">val, seen</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> i, keys;</span><br><span class="line">  <span class="keyword">const</span> isA = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(val);</span><br><span class="line">  <span class="comment">// 1. 判断传入的val类型，如果它不是Array或object，再或者已经被冻结，那么直接返回，退出程序</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (!isA &amp;&amp; !<span class="title function_">isObject</span>(val)) ||</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(val) ||</span><br><span class="line">    val <span class="keyword">instanceof</span> <span class="title class_">VNode</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 拿到val的dep.id，存入创建好的集合Set中，因为集合相比数据而言它有天然的去重效果，以此来保证存入的dep.id没有重复，不会造成重复收集依赖</span></span><br><span class="line">  <span class="keyword">if</span> (val.<span class="property">__ob__</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> depId = val.<span class="property">__ob__</span>.<span class="property">dep</span>.<span class="property">id</span>;</span><br><span class="line">    <span class="keyword">if</span> (seen.<span class="title function_">has</span>(depId)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seen.<span class="title function_">add</span>(depId);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 判断如果是数组，则循环数组，将数组中每一项递归调用_traverse；如果是对象，则取出对象所有的key，然后执行读取操作，再递归内部值</span></span><br><span class="line">  <span class="keyword">if</span> (isA) &#123;</span><br><span class="line">    i = val.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) <span class="title function_">_traverse</span>(val[i], seen);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(val);</span><br><span class="line">    i = keys.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) <span class="title function_">_traverse</span>(val[keys[i]], seen);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h3><blockquote><p>通过 eventsMixin 方法中挂载到 vue 原型上</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">eventsMixin</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$on</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$once</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$off</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$emit</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-on"><a href="#vm-on" class="headerlink" title="vm.$on"></a>vm.$on</h4><blockquote><p>监听当前实例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所有传入事件触发函数的额外参数<br>定义一个事件中心，通过 $on 订阅事件，将事件存储在事件中心里面，然后通过 $emit 触发事件中心里面存储的订阅事件</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$on</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 1. 判断传入的事件名是否是一个数组，如果是数组，就表示需要一次性订阅多个事件，就遍历该数组，将数组中的每一个事件都递归调用$on方法将其作为单个事件订阅</span></span><br><span class="line">  <span class="comment">// 2. 不是就当做单个事件名来处理，以该事件名作为key，先尝试在当前实例的_events属性中获取其对应的事件列表，如果获取不到就给其赋空数组为默认值，并将第二个参数回调函数添加进去</span></span><br><span class="line">  <span class="comment">// --&gt; _events属性用来作为当前实例的事件中心，所有绑定在这个实例上的事件都会存储在事件中心_events属性中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(event)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = event.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$on(event[i], fn);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    (vm.<span class="property">_events</span>[event] || (vm.<span class="property">_events</span>[event] = [])).<span class="title function_">push</span>(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="vm-emit"><a href="#vm-emit" class="headerlink" title="vm.$emit"></a>vm.$emit</h4><blockquote><p>触发当前实例上的事件。附加参数都会传给监听器回调</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$emit</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 1. 根据传入的事件名从当前实例的_events属性（即事件中心）中获取到该事件名所对应的回调函数cbs</span></span><br><span class="line">  <span class="keyword">let</span> cbs = vm.<span class="property">_events</span>[event];</span><br><span class="line">  <span class="keyword">if</span> (cbs) &#123;</span><br><span class="line">    cbs = cbs.<span class="property">length</span> &gt; <span class="number">1</span> ? <span class="title function_">toArray</span>(cbs) : cbs;</span><br><span class="line">    <span class="comment">// 2. 获取传入的附加参数args</span></span><br><span class="line">    <span class="keyword">const</span> args = <span class="title function_">toArray</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 遍历执行回调函数并将附加参数args传给该回调</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = cbs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cbs[i].<span class="title function_">apply</span>(vm, args);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, vm, <span class="string">`event handler for &quot;<span class="subst">$&#123;event&#125;</span>&quot;`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="vm-off"><a href="#vm-off" class="headerlink" title="vm.$off"></a>vm.$off</h4><blockquote><p>移除自定义事件监听器</p><ul><li>如果没有提供参数，则移除所有的事件监听器</li><li>如果只提供了事件，则移除该事件所有的监听器</li><li>如果同时提供了事件与回调，则只移除这个回调的监听器</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$off</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 1. 如果没有提供参数，则移除所有的事件监听器。把_events属性重新置为空对象即可</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">arguments</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    vm.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 如果传入的需要移除的事件名是一个数组，就表示需要一次性移除多个事件，那么我们只需同订阅多个事件一样，遍历该数组，然后将数组中的每一个事件都递归调用$off方法进行移除即可</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(event)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = event.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$off(event[i], fn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 获取到需要移除的事件名在事件中心中对应的回调函数cbs</span></span><br><span class="line">  <span class="keyword">const</span> cbs = vm.<span class="property">_events</span>[event];</span><br><span class="line">  <span class="comment">// 如果cbs不存在，那表明在事件中心从来没有订阅过该事件，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!cbs) &#123;</span><br><span class="line">    <span class="keyword">return</span> vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 如果cbs存在，但是没有传入回调函数fn，这就是第二种情况: 如果只提供了事件，则移除该事件所有的监听器</span></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    vm.<span class="property">_events</span>[event] = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> vm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 如果既传入了事件名，又传入了回调函数，cbs也存在，那这就是第三种情况: 如果同时提供了事件与回调，则只移除这个回调的监听器</span></span><br><span class="line">  <span class="comment">// 遍历所有回调函数数组cbs，如果cbs中某一项与fn相同，或者某一项的fn属性与fn相同，那么就将其从数组中删除即可</span></span><br><span class="line">  <span class="keyword">if</span> (fn) &#123;</span><br><span class="line">    <span class="comment">// specific handler</span></span><br><span class="line">    <span class="keyword">let</span> cb;</span><br><span class="line">    <span class="keyword">let</span> i = cbs.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      cb = cbs[i];</span><br><span class="line">      <span class="keyword">if</span> (cb === fn || cb.<span class="property">fn</span> === fn) &#123;</span><br><span class="line">        cbs.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="vm-once"><a href="#vm-once" class="headerlink" title="vm.$once"></a>vm.$once</h4><blockquote><p>监听一个自定义事件，但是只触发一次。一旦触发之后，监听器就会被移除<br>定义一个子函数，用这个子函数来替换原本订阅事件所对应的回调，当触发订阅事件时，其实执行的是这个子函数，然后再子函数内部先把该订阅移除，再执行原本的回调，以此来达到只触发一次的目的</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$once</span> = <span class="keyword">function</span> (<span class="params">event, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 2. 先通过$off方法移除订阅的事件，这样确保该事件不会被再次触发，接着执行原本的回调fn</span></span><br><span class="line">    vm.$off(event, on);</span><br><span class="line">    fn.<span class="title function_">apply</span>(vm, <span class="variable language_">arguments</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 防止在触发该事件后再调用 $off 方法移除事件失败，因为 _events 中该事件订阅的事件被替换了</span></span><br><span class="line">  <span class="comment">// 为了解决这一问题，需要给on上绑定一个fn属性，属性值为用户传入的回调fn，这样在使用$off移除事件的时候，$off内部会判断如果回调函数列表中某一项的fn属性与fn相同时，就可以成功移除事件了</span></span><br><span class="line">  on.<span class="property">fn</span> = fn;</span><br><span class="line">  <span class="comment">// 1. 先通过$on方法订阅事件，同时所使用的回调函数并不是原本的fn而是子函数on</span></span><br><span class="line">  vm.$on(event, on);</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="生命周期相关"><a href="#生命周期相关" class="headerlink" title="生命周期相关"></a>生命周期相关</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">lifecycleMixin</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$forceUpdate</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$destroy</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">renderMixin</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$nextTick</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-mount"><a href="#vm-mount" class="headerlink" title="vm.$mount"></a>vm.$mount</h4><blockquote><p>在跨平台的代码中挂载到 Vue 原型上的</p><ul><li>vm.$mount(<code>[elementOrSelector]</code>)，这个方法返回实例自身，因而可以链式调用其它实例方法</li><li>如果 Vue 实例在实例化时没有收到 el 选项，则它处于 未挂载 状态，没有关联的 DOM 元素。可以使用 vm.$mount() 手动地挂载一个未挂载的实例</li><li>如果没有提供 elementOrSelector 参数，模板将被渲染为文档之外的的元素，并且必须使用原生 DOM API 把它插入文档中</li></ul></blockquote><h4 id="vm-forceUpdate"><a href="#vm-forceUpdate" class="headerlink" title="vm.$forceUpdate"></a>vm.$forceUpdate</h4><blockquote><p>在 lifecycleMixin 函数中挂载到 Vue 原型上的</p><ul><li>迫使 Vue 实例重新渲染。注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件</li><li>实例 watcher 执行了 update 方法</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$forceUpdate</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_watcher</span>) &#123;</span><br><span class="line">    vm.<span class="property">_watcher</span>.<span class="title function_">update</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="vm-nextTick"><a href="#vm-nextTick" class="headerlink" title="vm.$nextTick"></a>vm.$nextTick</h4><blockquote><p>在 renderMixin 函数中挂载到 Vue 原型上的</p><ul><li>vm.$nextTick 是全局 Vue.nextTick 的别名，其用法相同</li><li>将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 Vue.nextTick 一样，不同的是回调的 this 自动绑定到调用它的实例上</li><li>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个事件队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到事件队列中一次</li></ul></blockquote><div class="tip bolt"><p>内部原理: </p></div><ol><li>能力检测</li></ol><ul><li>内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替</li><li>宏任务耗费的时间是大于微任务的，在浏览器支持的情况下，优先使用微任务。如果浏览器不支持微任务，使用宏任务；但是，各种宏任务之间也有效率的不同，需要根据浏览器的支持情况，使用不同的宏任务</li></ul><ol><li>根据能力检测以不同方式执行回调队列，两个注意点</li></ol><ul><li>如何保证只在接收第一个回调函数时执行异步方法</li><li><ul><li>nextTick 源码中使用了一个异步锁的概念，即接收第一个回调函数时，先关上锁，执行异步方法。此时，浏览器处于等待执行完同步代码就执行异步代码的情况</li></ul></li><li><p>执行 flushCallbacks 函数时为什么需要备份回调函数队列？执行的也是备份的回调函数队列？</p></li><li><ul><li>可能会出现这么一种情况: nextTick 的回调函数中还使用 nextTick。如果 flushCallbacks 不做特殊处理，直接循环执行回调函数，会导致里面 nextTick 中的回调函数会进入回调队列</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 能力检测</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timerFunc;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="title function_">isNative</span>(<span class="title class_">Promise</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      p.<span class="title function_">then</span>(flushCallbacks);</span><br><span class="line">      <span class="keyword">if</span> (isIOS) <span class="built_in">setTimeout</span>(noop);</span><br><span class="line">    &#125;;</span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    !isIE &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="title class_">MutationObserver</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp;</span><br><span class="line">    (<span class="title function_">isNative</span>(<span class="title class_">MutationObserver</span>) ||</span><br><span class="line">      <span class="title class_">MutationObserver</span>.<span class="title function_">toString</span>() === <span class="string">&quot;[object MutationObserverConstructor]&quot;</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(flushCallbacks);</span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter));</span><br><span class="line">    observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">      <span class="attr">characterData</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      counter = (counter + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">      textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter);</span><br><span class="line">    &#125;;</span><br><span class="line">    isUsingMicroTask = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="title function_">isNative</span>(setImmediate)) &#123;</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setImmediate</span>(flushCallbacks);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行回调队列</span></span><br><span class="line"><span class="keyword">const</span> callbacks = [];</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span>; <span class="comment">// 异步锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  pending = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 防止出现nextTick中包含nextTick时出现问题，在执行回调函数队列前，提前复制备份并清空回调函数队列</span></span><br><span class="line">  <span class="keyword">const</span> copies = callbacks.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">  callbacks.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    copies[i]();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb, ctx</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _resolve;</span><br><span class="line">  <span class="comment">// 将回调函数推入回调队列</span></span><br><span class="line">  callbacks.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(ctx);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, ctx, <span class="string">&quot;nextTick&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</span><br><span class="line">      <span class="title function_">_resolve</span>(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 如果异步锁未锁上，锁上异步锁，调用异步函数，准备等同步函数执行完后，就开始执行回调函数队列</span></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">timerFunc</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果没有提供回调，并且支持Promise，返回一个Promise</span></span><br><span class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      _resolve = resolve;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vm-destory"><a href="#vm-destory" class="headerlink" title="vm.$destory"></a>vm.$destory</h4><blockquote><p>在 lifecycleMixin 函数中挂载到 Vue 原型上的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 生命周期</title>
      <link href="/articles/vue/lifeCycle/"/>
      <url>/articles/vue/lifeCycle/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/vue/lCycle_1.png" alt=""></p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><blockquote><p>为 Vue 实例上初始化一些属性，事件以及响应式数据</p></blockquote><h4 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue()"></a>new Vue()</h4><blockquote><p>合并属性: mergeOptions</p><ul><li>把 parent 和 child 这两个对象根据一些合并策略，合并成一个新对象并返回</li><li>resolveConstructorOptions: 返回 vm.constructor.options，相当于 Vue.options。</li><li>initGlobalAPI 中定义了 Vue.options</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; !(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vue</span>)) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&quot;Vue is a constructor and should be called with the `new` keyword&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_init</span>(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initMixin</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">    vm.<span class="property">$options</span> = <span class="title function_">mergeOptions</span>(</span><br><span class="line">      <span class="title function_">resolveConstructorOptions</span>(vm.<span class="property">constructor</span>),</span><br><span class="line">      options || &#123;&#125;,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">    vm.<span class="property">_self</span> = vm;</span><br><span class="line">    <span class="title function_">initLifecycle</span>(vm); <span class="comment">// 初始化生命周期</span></span><br><span class="line">    <span class="title function_">initEvents</span>(vm); <span class="comment">// 初始化事件</span></span><br><span class="line">    <span class="title function_">initRender</span>(vm); <span class="comment">// 初始化渲染</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&quot;beforeCreate&quot;</span>); <span class="comment">// 调用生命周期钩子函数</span></span><br><span class="line">    <span class="title function_">initInjections</span>(vm); <span class="comment">//初始化injections, resolve injections before data/props</span></span><br><span class="line">    <span class="title function_">initState</span>(vm); <span class="comment">// 初始化props,methods,data,computed,watch</span></span><br><span class="line">    <span class="title function_">initProvide</span>(vm); <span class="comment">// 初始化 provide, resolve provide after data/props</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&quot;created&quot;</span>); <span class="comment">// 调用生命周期钩子函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断用户是否传入了el选项，如果传入了则调用$mount函数进入模板编译与挂载阶段，如果没有传入el选项，则不进入下一个生命周期阶段，需要用户手动执行vm.$mount方法才进入下一个生命周期阶段</span></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$options</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      vm.$mount(vm.<span class="property">$options</span>.<span class="property">el</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initGlobalAPI</span>(<span class="params"><span class="title class_">Vue</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property">options</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="variable constant_">ASSET_TYPES</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params"><span class="keyword">type</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">options</span>[<span class="keyword">type</span> + <span class="string">&quot;s&quot;</span>] = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内置组件扩展到 Vue.options.components</span></span><br><span class="line">  <span class="comment">// Vue 的内置组件目前 有&lt;keep-alive&gt;、&lt;transition&gt; 和&lt;transition-group&gt; 组件，所以使用这些组件不需要注册</span></span><br><span class="line">  <span class="title function_">extend</span>(<span class="title class_">Vue</span>.<span class="property">options</span>.<span class="property">components</span>, builtInComponents);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ASSET_TYPES</span> = [<span class="string">&quot;component&quot;</span>, <span class="string">&quot;directive&quot;</span>, <span class="string">&quot;filter&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mergeOptions</span>(<span class="params">parent, child, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> child === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    child = child.<span class="property">options</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. 递归把 extends 和 mixins 合并到 parent 上</span></span><br><span class="line">  <span class="keyword">const</span> extendsFrom = child.<span class="property">extends</span>;</span><br><span class="line">  <span class="keyword">if</span> (extendsFrom) &#123;</span><br><span class="line">    parent = <span class="title function_">mergeOptions</span>(parent, extendsFrom, vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (child.<span class="property">mixins</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = child.<span class="property">mixins</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      parent = <span class="title function_">mergeOptions</span>(parent, child.<span class="property">mixins</span>[i], vm);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 创建一个空对象options，遍历 parent，把parent中的每一项通过调用 mergeField函数合并到空对象options里</span></span><br><span class="line">  <span class="keyword">const</span> options = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> key;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> parent) &#123;</span><br><span class="line">    <span class="title function_">mergeField</span>(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 接着再遍历 child，把存在于child里但又不在 parent中 的属性继续调用 mergeField函数合并到空对象options里</span></span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> child) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">hasOwn</span>(parent, key)) &#123;</span><br><span class="line">      <span class="title function_">mergeField</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 策略模式: 针对不同的选项有不同的合并策略，比如针对 data: strats.data方法，针对 watch: strats.watch方法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">mergeField</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> strat = strats[key] || defaultStrat;</span><br><span class="line">    options[key] = <span class="title function_">strat</span>(parent[key], child[key], vm, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生命周期钩子的合并策略</span></span><br><span class="line"><span class="comment">// 一旦 parent 和 child 都定义了相同的钩子函数，那么它们会把 2 个钩子函数合并成一个数组，并且 parentVal 先执行，用来支持 Vue.mixin</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeHook</span>(<span class="params">parentVal, childVal</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> childVal</span><br><span class="line">    ? parentVal</span><br><span class="line">      ? parentVal.<span class="title function_">concat</span>(childVal)</span><br><span class="line">      : <span class="title class_">Array</span>.<span class="title function_">isArray</span>(childVal)</span><br><span class="line">      ? childVal</span><br><span class="line">      : [childVal]</span><br><span class="line">    : parentVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">LIFECYCLE_HOOKS</span> = [</span><br><span class="line">  <span class="string">&quot;beforeCreate&quot;</span>,</span><br><span class="line">  <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="string">&quot;beforeMount&quot;</span>,</span><br><span class="line">  <span class="string">&quot;mounted&quot;</span>,</span><br><span class="line">  <span class="string">&quot;beforeUpdate&quot;</span>,</span><br><span class="line">  <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;beforeDestroy&quot;</span>,</span><br><span class="line">  <span class="string">&quot;destroyed&quot;</span>,</span><br><span class="line">  <span class="string">&quot;activated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;deactivated&quot;</span>,</span><br><span class="line">  <span class="string">&quot;errorCaptured&quot;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">LIFECYCLE_HOOKS</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">hook</span>) =&gt;</span> &#123;</span><br><span class="line">  strats[hook] = mergeHook;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">callHook</span>(<span class="params">vm, hook</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取钩子名称对应的钩子函数数组，遍历执行</span></span><br><span class="line">  <span class="keyword">const</span> handlers = vm.<span class="property">$options</span>[hook];</span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = handlers.<span class="property">length</span>; i &lt; j; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        handlers[i].<span class="title function_">call</span>(vm);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, vm, <span class="string">`<span class="subst">$&#123;hook&#125;</span> hook`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initLifecycle"><a href="#initLifecycle" class="headerlink" title="initLifecycle"></a>initLifecycle</h4><blockquote><p>给实例初始化了一些属性: 以 <code>$</code> 开头的供用户使用的外部属性，以 <code>_</code> 开头的供内部使用的内部属性</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initLifecycle</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = vm.<span class="property">$options</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前组件不是抽象组件并且存在父级，向上循环查找，直到找到第一个不是抽象类型的父级时</span></span><br><span class="line">  <span class="keyword">let</span> parent = options.<span class="property">parent</span>;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !options.<span class="property">abstract</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (parent.<span class="property">$options</span>.<span class="property">abstract</span> &amp;&amp; parent.<span class="property">$parent</span>) &#123;</span><br><span class="line">      parent = parent.<span class="property">$parent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    parent.<span class="property">$children</span>.<span class="title function_">push</span>(vm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  vm.<span class="property">$parent</span> = parent;</span><br><span class="line">  <span class="comment">// 给实例上挂载$root属性</span></span><br><span class="line">  vm.<span class="property">$root</span> = parent ? parent.<span class="property">$root</span> : vm;</span><br><span class="line"></span><br><span class="line">  vm.<span class="property">$children</span> = [];</span><br><span class="line">  vm.<span class="property">$refs</span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  vm.<span class="property">_watcher</span> = <span class="literal">null</span>;</span><br><span class="line">  vm.<span class="property">_inactive</span> = <span class="literal">null</span>;</span><br><span class="line">  vm.<span class="property">_directInactive</span> = <span class="literal">false</span>;</span><br><span class="line">  vm.<span class="property">_isMounted</span> = <span class="literal">false</span>;</span><br><span class="line">  vm.<span class="property">_isDestroyed</span> = <span class="literal">false</span>;</span><br><span class="line">  vm.<span class="property">_isBeingDestroyed</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initEvents"><a href="#initEvents" class="headerlink" title="initEvents"></a>initEvents</h4><blockquote><ul><li>父组件给子组件的注册事件中，把自定义事件传给子组件，在子组件实例化的时候进行初始化；而浏览器原生事件是在父组件中处理</li><li>实初始化事件函数 initEvents 实际上初始化的是父组件在模板中使用 v-on 或 @ 注册的监听子组件内触发的事件</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析事件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onRE = <span class="regexp">/^@|^v-on:/</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> dirRE = <span class="regexp">/^v-|^@|^:/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processAttrs</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> list = el.<span class="property">attrsList</span>;</span><br><span class="line">  <span class="keyword">let</span> i, l, name, value, modifiers;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, l = list.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    name = list[i].<span class="property">name</span>;</span><br><span class="line">    value = list[i].<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// 如果是指令</span></span><br><span class="line">    <span class="keyword">if</span> (dirRE.<span class="title function_">test</span>(name)) &#123;</span><br><span class="line">      <span class="comment">// 解析修饰符</span></span><br><span class="line">      modifiers = <span class="title function_">parseModifiers</span>(name);</span><br><span class="line">      <span class="keyword">if</span> (modifiers) &#123;</span><br><span class="line">        name = name.<span class="title function_">replace</span>(modifierRE, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (onRE.<span class="title function_">test</span>(name)) &#123;</span><br><span class="line">        <span class="comment">// v-on 事件指令</span></span><br><span class="line">        name = name.<span class="title function_">replace</span>(onRE, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="title function_">addHandler</span>(el, name, value, modifiers, <span class="literal">false</span>, warn);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addHandler</span>(<span class="params">el, name, value, modifiers</span>) &#123;</span><br><span class="line">  modifiers = modifiers || emptyObject;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 首先根据 modifier 修饰符对事件名 name 做处理</span></span><br><span class="line">  <span class="comment">// check capture modifier 判断是否有capture修饰符</span></span><br><span class="line">  <span class="keyword">if</span> (modifiers.<span class="property">capture</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> modifiers.<span class="property">capture</span>;</span><br><span class="line">    name = <span class="string">&quot;!&quot;</span> + name; <span class="comment">// 给事件名前加&#x27;!&#x27;用以标记capture修饰符</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断是否有once修饰符</span></span><br><span class="line">  <span class="keyword">if</span> (modifiers.<span class="property">once</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> modifiers.<span class="property">once</span>;</span><br><span class="line">    name = <span class="string">&quot;~&quot;</span> + name; <span class="comment">// 给事件名前加&#x27;~&#x27;用以标记once修饰符</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断是否有passive修饰符</span></span><br><span class="line">  <span class="keyword">if</span> (modifiers.<span class="property">passive</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> modifiers.<span class="property">passive</span>;</span><br><span class="line">    name = <span class="string">&quot;&amp;&quot;</span> + name; <span class="comment">// 给事件名前加&#x27;&amp;&#x27;用以标记passive修饰符</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 根据 modifier.native 判断事件是一个浏览器原生事件还是自定义事件</span></span><br><span class="line">  <span class="comment">// 对应生成的data: 自定义 on，原生事件 nativeOn</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//     on: &#123;&quot;select&quot;: selectHandler&#125;,</span></span><br><span class="line">  <span class="comment">//     nativeOn: &#123;&quot;click&quot;: function($event) &#123;</span></span><br><span class="line">  <span class="comment">//         return clickHandler($event)</span></span><br><span class="line">  <span class="comment">//       &#125;</span></span><br><span class="line">  <span class="comment">//    &#125;</span></span><br><span class="line">  <span class="comment">//  &#125;</span></span><br><span class="line">  <span class="keyword">let</span> events;</span><br><span class="line">  <span class="keyword">if</span> (modifiers.<span class="property">native</span>) &#123;</span><br><span class="line">    <span class="keyword">delete</span> modifiers.<span class="property">native</span>;</span><br><span class="line">    events = el.<span class="property">nativeEvents</span> || (el.<span class="property">nativeEvents</span> = &#123;&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    events = el.<span class="property">events</span> || (el.<span class="property">events</span> = &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 按照 name 对事件做归类，并把回调函数的字符串保留到对应的事件中</span></span><br><span class="line">  <span class="keyword">const</span> newHandler = &#123;</span><br><span class="line">    <span class="attr">value</span>: value.<span class="title function_">trim</span>(),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (modifiers !== emptyObject) &#123;</span><br><span class="line">    newHandler.<span class="property">modifiers</span> = modifiers;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handlers = events[name];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(handlers)) &#123;</span><br><span class="line">    handlers.<span class="title function_">push</span>(newHandler);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    events[name] = [handlers, newHandler];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    events[name] = newHandler;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  el.<span class="property">plain</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建组件节点 vnode</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createComponent</span>(<span class="params"><span class="title class_">Ctor</span>, data, context, children, tag</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> listeners = data.<span class="property">on</span>; <span class="comment">// 自定义事件data.on 赋值给了 listeners，作为 vnode 的 componentOptions 传入，放在子组件初始化阶段中处理</span></span><br><span class="line"></span><br><span class="line">  data.<span class="property">on</span> = data.<span class="property">nativeOn</span>; <span class="comment">// 浏览器原生事件 data.nativeOn 赋值给了 data.on，在当前父组件环境中处理的</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="title class_">Ctor</span>.<span class="property">options</span>.<span class="property">name</span> || tag;</span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">    <span class="string">`vue-component-<span class="subst">$&#123;Ctor.cid&#125;</span><span class="subst">$&#123;name ? <span class="string">`-<span class="subst">$&#123;name&#125;</span>`</span> : <span class="string">&quot;&quot;</span>&#125;</span>`</span>,</span><br><span class="line">    data,</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    context,</span><br><span class="line">    &#123; <span class="title class_">Ctor</span>, propsData, listeners, tag, children &#125;,</span><br><span class="line">    asyncFactory</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initEvents</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="comment">// 存储事件</span></span><br><span class="line">  vm.<span class="property">_events</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="comment">// 获取父组件注册的事件赋给listeners，如果listeners不为空，则调用updateComponentListeners函数，将父组件向子组件注册的事件注册到子组件的实例中</span></span><br><span class="line">  <span class="keyword">const</span> listeners = vm.<span class="property">$options</span>.<span class="property">_parentListeners</span>;</span><br><span class="line">  <span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    <span class="title function_">updateComponentListeners</span>(vm, listeners);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateComponentListeners</span>(<span class="params">vm, listeners, oldListeners</span>) &#123;</span><br><span class="line">  target = vm;</span><br><span class="line">  <span class="title function_">updateListeners</span>(listeners, oldListeners || &#123;&#125;, add, remove, vm);</span><br><span class="line">  target = <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">event, fn, once</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (once) &#123;</span><br><span class="line">    target.$once(event, fn);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    target.$on(event, fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">event, fn</span>) &#123;</span><br><span class="line">  target.$off(event, fn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比listeners和oldListeners的不同，并调用参数中提供的add和remove进行相应的注册事件和卸载事件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">updateListeners</span>(<span class="params"></span></span><br><span class="line"><span class="params">  on, <span class="comment">// listeners</span></span></span><br><span class="line"><span class="params">  oldOn, <span class="comment">// oldListeners</span></span></span><br><span class="line"><span class="params">  add,</span></span><br><span class="line"><span class="params">  remove,</span></span><br><span class="line"><span class="params">  vm</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> name, def, cur, old, event;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> on) &#123;</span><br><span class="line">    def = cur = on[name];</span><br><span class="line">    old = oldOn[name];</span><br><span class="line">    event = <span class="title function_">normalizeEvent</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(cur)) &#123;</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Invalid handler for event &quot;<span class="subst">$&#123;event.name&#125;</span>&quot;: got `</span> + <span class="title class_">String</span>(cur),</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isUndef</span>(old)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(cur.<span class="property">fns</span>)) &#123;</span><br><span class="line">        cur = on[name] = <span class="title function_">createFnInvoker</span>(cur);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">add</span>(</span><br><span class="line">        event.<span class="property">name</span>,</span><br><span class="line">        cur,</span><br><span class="line">        event.<span class="property">once</span>,</span><br><span class="line">        event.<span class="property">capture</span>,</span><br><span class="line">        event.<span class="property">passive</span>,</span><br><span class="line">        event.<span class="property">params</span></span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur !== old) &#123;</span><br><span class="line">      <span class="comment">// 保证事件回调只添加一次，之后仅仅去修改它的回调函数的引用</span></span><br><span class="line">      old.<span class="property">fns</span> = cur;</span><br><span class="line">      on[name] = old;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> oldOn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(on[name])) &#123;</span><br><span class="line">      event = <span class="title function_">normalizeEvent</span>(name);</span><br><span class="line">      <span class="title function_">remove</span>(event.<span class="property">name</span>, oldOn[name], event.<span class="property">capture</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initInjections"><a href="#initInjections" class="headerlink" title="initInjections"></a>initInjections</h4><blockquote><ul><li>provide 和 inject 选项绑定的数据不是响应式的</li><li>先调用 initInjections，后调用 initProvide: 需要保证 inject 能在 data 等 state 中获取到，initInjections -&gt; initState -&gt; initProvide</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initInjections</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="comment">// 将 inject 选项中的数据转化成键值对的形式赋给result</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">resolveInject</span>(vm.<span class="property">$options</span>.<span class="property">inject</span>, vm);</span><br><span class="line">  <span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// 内部把 shouldObserve = false，为了告诉 defineReactive 函数仅仅是把键值添加到当前实例上而不需要将其转换成响应式</span></span><br><span class="line">    <span class="title function_">toggleObserving</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 遍历键值对，调用defineReactive函数将其添加当前实例上</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(result).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(vm, key, result[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">toggleObserving</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> shouldObserve = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toggleObserving</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  shouldObserve = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveInject</span>(<span class="params">inject, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(inject);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 获取当前inject 选项中的所有key，然后遍历每一个key，拿到每一个key的from属性记作provideKey，provideKey是上游父级组件提供的源属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i];</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].<span class="property">from</span>;</span><br><span class="line">      <span class="keyword">let</span> source = vm;</span><br><span class="line">      <span class="comment">// 2. 向上游父级组件的_provided属性中（父级组件使用provide选项注入数据时会将注入的数据存入自己的实例的_provided属性中）查找，直到查找到源属性的对应的值，将其存入result中</span></span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.<span class="property">_provided</span> &amp;&amp; <span class="title function_">hasOwn</span>(source.<span class="property">_provided</span>, provideKey)) &#123;</span><br><span class="line">          result[key] = source.<span class="property">_provided</span>[provideKey];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        source = source.<span class="property">$parent</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 3. 如果没有找到，那么就看inject 选项中当前的数据key是否设置了默认值，即是否有default属性，如果有的话，则拿到这个默认值</span></span><br><span class="line">      <span class="keyword">if</span> (!source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;default&quot;</span> <span class="keyword">in</span> inject[key]) &#123;</span><br><span class="line">          <span class="keyword">const</span> provideDefault = inject[key].<span class="property">default</span>;</span><br><span class="line">          result[key] =</span><br><span class="line">            <span class="keyword">typeof</span> provideDefault === <span class="string">&quot;function&quot;</span></span><br><span class="line">              ? provideDefault.<span class="title function_">call</span>(vm)</span><br><span class="line">              : provideDefault;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">`Injection &quot;<span class="subst">$&#123;key&#125;</span>&quot; not found`</span>, vm);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 规范化 inject 选项数据，添加 from 属性</span></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&quot;foo&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123; <span class="attr">default</span>: <span class="string">&quot;xxx&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    foo,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一格式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">inject</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: &#123;</span><br><span class="line">      <span class="attr">from</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="string">&quot;xxx&quot;</span>, <span class="comment">//如果有默认的值就有default属性</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalizeInject</span>(<span class="params">options, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> inject = options.<span class="property">inject</span>;</span><br><span class="line">  <span class="keyword">if</span> (!inject) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> normalized = (options.<span class="property">inject</span> = &#123;&#125;);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(inject)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; inject.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      normalized[inject[i]] = &#123; <span class="attr">from</span>: inject[i] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(inject)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> inject) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = inject[key];</span><br><span class="line">      normalized[key] = <span class="title function_">isPlainObject</span>(val)</span><br><span class="line">        ? <span class="title function_">extend</span>(&#123; <span class="attr">from</span>: key &#125;, val)</span><br><span class="line">        : &#123; <span class="attr">from</span>: val &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Invalid value for option &quot;inject&quot;: expected an Array or an Object, `</span> +</span><br><span class="line">        <span class="string">`but got <span class="subst">$&#123;toRawType(inject)&#125;</span>.`</span>,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="initState-处理-options"><a href="#initState-处理-options" class="headerlink" title="initState (处理 options)"></a>initState (处理 options)</h4><blockquote><p>处理 props、methods、data、computed、watch</p></blockquote><h5 id="初始化-props"><a href="#初始化-props" class="headerlink" title="初始化 props"></a>初始化 props</h5><blockquote><ul><li>规范化数据: normalizeProps</li><li>initProps</li><li>validateProp</li><li>getPropDefaultValue</li><li>assertProp</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initState</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  vm.<span class="property">_watchers</span> = []; <span class="comment">// 组件级别的侦测</span></span><br><span class="line">  <span class="keyword">const</span> opts = vm.<span class="property">$options</span>;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">props</span>) <span class="title function_">initProps</span>(vm, opts.<span class="property">props</span>);</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">methods</span>) <span class="title function_">initMethods</span>(vm, opts.<span class="property">methods</span>);</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">data</span>) &#123;</span><br><span class="line">    <span class="title function_">initData</span>(vm);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">observe</span>((vm.<span class="property">_data</span> = &#123;&#125;), <span class="literal">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">computed</span>) <span class="title function_">initComputed</span>(vm, opts.<span class="property">computed</span>);</span><br><span class="line">  <span class="keyword">if</span> (opts.<span class="property">watch</span> &amp;&amp; opts.<span class="property">watch</span> !== nativeWatch) &#123;</span><br><span class="line">    <span class="title function_">initWatch</span>(vm, opts.<span class="property">watch</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initProps</span>(<span class="params">vm, propsOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> propsData = vm.<span class="property">$options</span>.<span class="property">propsData</span> || &#123;&#125;; <span class="comment">// 父组件传入的真实props数据</span></span><br><span class="line">  <span class="keyword">const</span> props = (vm.<span class="property">_props</span> = &#123;&#125;); <span class="comment">// 指向vm._props的指针，所有设置到props变量中的属性都会保存到vm._props中</span></span><br><span class="line">  <span class="keyword">const</span> keys = (vm.<span class="property">$options</span>.<span class="property">_propKeys</span> = []); <span class="comment">// 指向vm.$options._propKeys的指针，缓存props对象中的key，将来更新props时只需遍历vm.$options._propKeys数组即可得到所有props的key</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !vm.<span class="property">$parent</span>; <span class="comment">// 当前组件是否为根组件</span></span><br><span class="line">  <span class="comment">// root instance props should be converted</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    <span class="comment">// 非根组件，则不需要将props数组转换为响应式的</span></span><br><span class="line">    <span class="title function_">toggleObserving</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 历props选项拿到每一对键值，先将键名添加到keys中，</span></span><br><span class="line">  <span class="comment">// 然后调用validateProp函数（关于该函数下面会介绍）校验父组件传入的props数据类型是否匹配并获取到传入的值value，</span></span><br><span class="line">  <span class="comment">// 然后将键和值通过defineReactive函数添加到props（即vm._props）中</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsOptions) &#123;</span><br><span class="line">    keys.<span class="title function_">push</span>(key);</span><br><span class="line">    <span class="keyword">const</span> value = <span class="title function_">validateProp</span>(key, propsOptions, propsData, vm);</span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hyphenatedKey = <span class="title function_">hyphenate</span>(key);</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_">isReservedAttribute</span>(hyphenatedKey) ||</span><br><span class="line">        config.<span class="title function_">isReservedAttr</span>(hyphenatedKey)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`&quot;<span class="subst">$&#123;hyphenatedKey&#125;</span>&quot; is a reserved attribute and cannot be used as component prop.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">defineReactive</span>(props, key, value, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.<span class="property">$parent</span> &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`Avoid mutating a prop directly since the value will be `</span> +</span><br><span class="line">              <span class="string">`overwritten whenever the parent component re-renders. `</span> +</span><br><span class="line">              <span class="string">`Instead, use a data or computed property based on the prop&#x27;s `</span> +</span><br><span class="line">              <span class="string">`value. Prop being mutated: &quot;<span class="subst">$&#123;key&#125;</span>&quot;`</span>,</span><br><span class="line">            vm</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(props, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断这个key在当前实例vm中是否存在，如果不存在，则调用proxy函数在vm上设置一个以key为属性的代码，当使用vm[key]访问数据时，其实访问的是vm._props[key]</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      <span class="title function_">proxy</span>(vm, <span class="string">`_props`</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toggleObserving</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">validateProp</span>(<span class="params">key, propOptions, propsData, vm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prop = propOptions[key]; <span class="comment">// 当前key在propOptions中对应的值</span></span><br><span class="line">  <span class="keyword">const</span> absent = !<span class="title function_">hasOwn</span>(propsData, key); <span class="comment">// 当前key是否在propsData中存在，即父组件是否传入了该属性</span></span><br><span class="line">  <span class="keyword">let</span> value = propsData[key]; <span class="comment">// 当前key在propsData中对应的值，即父组件对于该属性传入的真实值</span></span><br><span class="line">  <span class="keyword">const</span> booleanIndex = <span class="title function_">getTypeIndex</span>(<span class="title class_">Boolean</span>, prop.<span class="property">type</span>);</span><br><span class="line">  <span class="keyword">if</span> (booleanIndex &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果absent为true，即父组件没有传入该prop属性并且该属性也没有默认值的时候，将该属性值设置为false</span></span><br><span class="line">    <span class="keyword">if</span> (absent &amp;&amp; !<span class="title function_">hasOwn</span>(prop, <span class="string">&quot;default&quot;</span>)) &#123;</span><br><span class="line">      value = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果父组件传入了该prop属性，则需满足</span></span><br><span class="line">    <span class="comment">// 1. 该属性值为空字符串或者 属性值与属性名相等（先将属性名由驼峰式转换成用-连接的字符串，比如 &lt;Child userName=&quot;user-name&quot;&gt;&lt;/Child&gt; 为 true）</span></span><br><span class="line">    <span class="comment">// 2. prop 的 type 属性中不存在 String 类型</span></span><br><span class="line">    <span class="comment">// 3. 如果 prop 的 type 属性中存在 String 类型，那么 Boolean 类型在 type 属性中的索引必须小于 String 类型的索引，即 Boolean 类型的优先级更高</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span> || value === <span class="title function_">hyphenate</span>(key)) &#123;</span><br><span class="line">      <span class="keyword">const</span> stringIndex = <span class="title function_">getTypeIndex</span>(<span class="title class_">String</span>, prop.<span class="property">type</span>);</span><br><span class="line">      <span class="keyword">if</span> (stringIndex &lt; <span class="number">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class="line">        value = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果不是布尔类型，是其它类型的话，那就只需判断父组件是否传入该属性即可，如果没有传入，则该属性值为undefined</span></span><br><span class="line">  <span class="comment">// 此时调用 getPropDefaultValue 函数获取该属性的默认值，并将其转换成响应式</span></span><br><span class="line">  <span class="keyword">if</span> (value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    value = <span class="title function_">getPropDefaultValue</span>(vm, prop, key);</span><br><span class="line">    <span class="comment">// since the default value is a fresh copy,</span></span><br><span class="line">    <span class="comment">// make sure to observe it.</span></span><br><span class="line">    <span class="keyword">const</span> prevShouldObserve = shouldObserve;</span><br><span class="line">    <span class="title function_">toggleObserving</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_">observe</span>(value);</span><br><span class="line">    <span class="title function_">toggleObserving</span>(prevShouldObserve);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果父组件传入了该属性并且也有对应的真实值，那么在非生产环境下会调用 assertProp 函数校验该属性值是否与要求的类型相匹配</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">assertProp</span>(prop, key, value, vm, absent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将父组件传入的该属性的真实值返回</span></span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据子组件 props 选项中的 key 获取其对应的默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPropDefaultValue</span>(<span class="params">vm, prop, key</span>) &#123;</span><br><span class="line">  <span class="comment">// no default, return undefined</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">hasOwn</span>(prop, <span class="string">&quot;default&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> def = prop.<span class="property">default</span>;</span><br><span class="line">  <span class="comment">// 对象或数组默认值必须从一个工厂函数获取，注意点</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; <span class="title function_">isObject</span>(def)) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">&#x27;Invalid default value for prop &quot;&#x27;</span> +</span><br><span class="line">        key +</span><br><span class="line">        <span class="string">&#x27;&quot;: &#x27;</span> +</span><br><span class="line">        <span class="string">&quot;Props with type Object/Array must use a factory function &quot;</span> +</span><br><span class="line">        <span class="string">&quot;to return the default value.&quot;</span>,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果父组件没有传入该props属性，但是在vm._props中有该属性值，这说明vm._props中的该属性值就是默认值</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    vm &amp;&amp;</span><br><span class="line">    vm.<span class="property">$options</span>.<span class="property">propsData</span> &amp;&amp;</span><br><span class="line">    vm.<span class="property">$options</span>.<span class="property">propsData</span>[key] === <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    vm.<span class="property">_props</span>[key] !== <span class="literal">undefined</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> vm.<span class="property">_props</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断def是否为函数并且prop.type不为Function，如果是的话表明def是一个返回对象或数组的工厂函数，那么将函数的返回值作为默认值返回；如果def不是函数，那么则将def作为默认值返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> def === <span class="string">&quot;function&quot;</span> &amp;&amp; <span class="title function_">getType</span>(prop.<span class="property">type</span>) !== <span class="string">&quot;Function&quot;</span></span><br><span class="line">    ? def.<span class="title function_">call</span>(vm)</span><br><span class="line">    : def;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验父组件传来的真实值是否与prop的type类型相匹配，如果不匹配则在非生产环境下抛出警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">assertProp</span>(<span class="params">prop, name, value, vm, absent</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断prop中如果设置了必填项（即prop.required为true）并且父组件又没有传入该属性，此时则抛出警告: 提示该项必填</span></span><br><span class="line">  <span class="keyword">if</span> (prop.<span class="property">required</span> &amp;&amp; absent) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Missing required prop: &quot;&#x27;</span> + name + <span class="string">&#x27;&quot;&#x27;</span>, vm);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断如果该项不是必填的并且该项的值value不存在，那么此时是合法的，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span> &amp;&amp; !prop.<span class="property">required</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">type</span> = prop.<span class="property">type</span>; <span class="comment">// prop中的type类型(可以是一个原生构造函数，也可以是一个包含多种类型的数组，还可以不设置该属性)</span></span><br><span class="line">  <span class="keyword">let</span> valid = !<span class="keyword">type</span> || <span class="keyword">type</span> === <span class="literal">true</span>; <span class="comment">// 校验是否成功(如果用户设置的是原生构造函数或数组，那么此时vaild默认为false（!type），如果用户没有设置该属性，表示不需要校验，那么此时vaild默认为true，即校验成功)</span></span><br><span class="line">  <span class="keyword">const</span> expectedTypes = []; <span class="comment">// 保存期望类型的数组，当校验失败抛出警告时，会提示用户该属性所期望的类型是什么</span></span><br><span class="line">  <span class="comment">// 判断该属性是不是数组，如果不是，则统一转化为数组</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="keyword">type</span>)) &#123;</span><br><span class="line">      <span class="keyword">type</span> = [<span class="keyword">type</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历type数组，并调用assertType函数校验value。assertType函数校验后会返回一个对象: &#123; vaild:true, // 表示是否校验成功 expectedType: &#x27;Boolean&#x27; // 表示被校验的类型 &#125;</span></span><br><span class="line">    <span class="comment">// 判断条件 !valid，即type数组中还要有一个校验成功，循环立即结束，表示校验通过</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">type</span>.<span class="property">length</span> &amp;&amp; !valid; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> assertedType = <span class="title function_">assertType</span>(value, <span class="keyword">type</span>[i]);</span><br><span class="line">      expectedTypes.<span class="title function_">push</span>(assertedType.<span class="property">expectedType</span> || <span class="string">&quot;&quot;</span>);</span><br><span class="line">      valid = assertedType.<span class="property">valid</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果循环完毕后vaild为false，即表示校验未通过，则抛出警告</span></span><br><span class="line">  <span class="keyword">if</span> (!valid) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Invalid prop: type check failed for prop &quot;<span class="subst">$&#123;name&#125;</span>&quot;.`</span> +</span><br><span class="line">        <span class="string">` Expected <span class="subst">$&#123;expectedTypes.map(capitalize).join(<span class="string">&quot;, &quot;</span>)&#125;</span>`</span> +</span><br><span class="line">        <span class="string">`, got <span class="subst">$&#123;toRawType(value)&#125;</span>.`</span>,</span><br><span class="line">      vm</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 此外，props 选项支持自定义校验函数。获取校验函数并检验</span></span><br><span class="line">  <span class="comment">// props:&#123;</span></span><br><span class="line">  <span class="comment">//     propF: &#123;</span></span><br><span class="line">  <span class="comment">//         validator: function (value) &#123;</span></span><br><span class="line">  <span class="comment">//         // 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">  <span class="comment">//         return [&#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;].indexOf(value) !== -1</span></span><br><span class="line">  <span class="comment">//         &#125;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">const</span> validator = prop.<span class="property">validator</span>;</span><br><span class="line">  <span class="keyword">if</span> (validator) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">validator</span>(value)) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&#x27;Invalid prop: custom validator check failed for prop &quot;&#x27;</span> + name + <span class="string">&#x27;&quot;.&#x27;</span>,</span><br><span class="line">        vm</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化-methods"><a href="#初始化-methods" class="headerlink" title="初始化 methods"></a>初始化 methods</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initMethods</span>(<span class="params">vm, methods</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> props = vm.<span class="property">$options</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 只有方法名没有方法体时，抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (methods[key] == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has an undefined value in the component definition. `</span> +</span><br><span class="line">            <span class="string">`Did you reference the function correctly?`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果methods中某个方法名与props中某个属性名重复了，就抛出异常</span></span><br><span class="line">      <span class="keyword">if</span> (props &amp;&amp; <span class="title function_">hasOwn</span>(props, key)) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(<span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has already been defined as a prop.`</span>, vm);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果methods中某个方法名如果在实例vm中已经存在并且方法名是以_或$开头的，就抛出异常: 提示用户方法名命名不规范。</span></span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> vm &amp;&amp; <span class="title function_">isReserved</span>(key)) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; conflicts with an existing Vue instance method. `</span> +</span><br><span class="line">            <span class="string">`Avoid defining component methods that start with _ or $.`</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果上述判断都没问题，那就method绑定到实例vm上，通过this.xxx来访问</span></span><br><span class="line">    vm[key] = methods[key] == <span class="literal">null</span> ? noop : <span class="title function_">bind</span>(methods[key], vm);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化-data"><a href="#初始化-data" class="headerlink" title="初始化 data"></a>初始化 data</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initData</span>(<span class="params">vm</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 获取到用户传入的data选项，赋给变量data，同时将变量data作为指针指向vm._data</span></span><br><span class="line">  <span class="keyword">let</span> data = vm.<span class="property">$options</span>.<span class="property">data</span>;</span><br><span class="line">  <span class="comment">// 2. 判断data是不是一个函数，如果是就调用getData函数获取其返回值，将其保存到vm._data中。如果不是，就将其本身保存到vm._data中</span></span><br><span class="line">  data = vm.<span class="property">_data</span> = <span class="keyword">typeof</span> data === <span class="string">&quot;function&quot;</span> ? <span class="title function_">getData</span>(data, vm) : data || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 3. 无论传入的data选项是不是一个函数，它最终的值都应该是一个对象，如果不是对象的话，就抛出警告: 提示用户data应该是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isPlainObject</span>(data)) &#123;</span><br><span class="line">    data = &#123;&#125;;</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&quot;data functions should return an object:\n&quot;</span> +</span><br><span class="line">          <span class="string">&quot;https://vuejs.org/v2/guide/components.html##data-Must-Be-a-Function&quot;</span>,</span><br><span class="line">        vm</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data);</span><br><span class="line">  <span class="keyword">const</span> props = vm.<span class="property">$options</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> methods = vm.<span class="property">$options</span>.<span class="property">methods</span>;</span><br><span class="line">  <span class="keyword">let</span> i = keys.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i];</span><br><span class="line">    <span class="comment">// 4. 判断data对象中是否存在某一项的key与methods中某个属性名重复，如果存在重复，就抛出警告</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (methods &amp;&amp; <span class="title function_">hasOwn</span>(methods, key)) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Method &quot;<span class="subst">$&#123;key&#125;</span>&quot; has already been defined as a data property.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 再判断是否存在某一项的key与prop中某个属性名重复，如果存在重复，就抛出警告: 提示用户属性名重复</span></span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; <span class="title function_">hasOwn</span>(props, key)) &#123;</span><br><span class="line">      process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`The data property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already declared as a prop. `</span> +</span><br><span class="line">            <span class="string">`Use prop default value instead.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6. 如果都没有重复，则调用proxy函数将data对象中key不以_或$开头的属性代理到实例vm上</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="title function_">isReserved</span>(key)) &#123;</span><br><span class="line">      <span class="title function_">proxy</span>(vm, <span class="string">`_data`</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 7. 调用observe函数将data中的数据转化成响应式</span></span><br><span class="line">  <span class="title function_">observe</span>(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化-computed"><a href="#初始化-computed" class="headerlink" title="初始化 computed"></a>初始化 computed</h5><blockquote><ul><li>initComputed</li><li>defineComputed</li><li>createComputedGetter</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整用法</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 仅读取</span></span><br><span class="line">    <span class="attr">aDouble</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 读取和设置</span></span><br><span class="line">    <span class="attr">aPlus</span>: &#123;</span><br><span class="line">      <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">a</span> + <span class="number">1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = v - <span class="number">1</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">vm.<span class="property">aPlus</span>; <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.<span class="property">aPlus</span> = <span class="number">3</span>;</span><br><span class="line">vm.<span class="property">a</span>; <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.<span class="property">aDouble</span>; <span class="comment">// =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initComputed</span>(<span class="params">vm, computed</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 定义了一个变量watchers并将其赋值为空对象，同时将其作为指针指向vm._computedWatchers</span></span><br><span class="line">  <span class="keyword">const</span> watchers = (vm.<span class="property">_computedWatchers</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>));</span><br><span class="line">  <span class="keyword">const</span> isSSR = <span class="title function_">isServerRendering</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> computed) &#123;</span><br><span class="line">    <span class="comment">// 2. 如果是函数，则该函数默认为取值器getter，将其赋值给变量getter；如果不是函数，则说明是一个对象，则取对象中的get属性作为取值器赋给变量getter</span></span><br><span class="line">    <span class="keyword">const</span> userDef = computed[key];</span><br><span class="line">    <span class="keyword">const</span> getter = <span class="keyword">typeof</span> userDef === <span class="string">&quot;function&quot;</span> ? userDef : userDef.<span class="property">get</span>;</span><br><span class="line">    <span class="comment">// 3. 如果上面两种情况取到的取值器不存在，则抛出警告</span></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp; getter == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`Getter is missing for computed property &quot;<span class="subst">$&#123;key&#125;</span>&quot;.`</span>, vm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 如果不是在服务端渲染环境下，则创建一个watcher实例，并将当前循环到的的属性名作为键，创建的watcher实例作为值存入watchers对象中</span></span><br><span class="line">    <span class="keyword">if</span> (!isSSR) &#123;</span><br><span class="line">      <span class="comment">// create internal watcher for the computed property.</span></span><br><span class="line">      <span class="keyword">const</span> computedWatcherOptions = &#123; <span class="attr">computed</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      watchers[key] = <span class="keyword">new</span> <span class="title class_">Watcher</span>(</span><br><span class="line">        vm,</span><br><span class="line">        getter || noop,</span><br><span class="line">        noop,</span><br><span class="line">        computedWatcherOptions</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 判断当前循环到的的属性名是否存在于当前实例vm上，如果存在，则在非生产环境下抛出警告；如果不存在，则调用defineComputed函数为实例vm上设置计算属性</span></span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      <span class="title function_">defineComputed</span>(vm, key, userDef);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key <span class="keyword">in</span> vm.<span class="property">$data</span>) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(<span class="string">`The computed property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already defined in data.`</span>, vm);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vm.<span class="property">$options</span>.<span class="property">props</span> &amp;&amp; key <span class="keyword">in</span> vm.<span class="property">$options</span>.<span class="property">props</span>) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`The computed property &quot;<span class="subst">$&#123;key&#125;</span>&quot; is already defined as a prop.`</span>,</span><br><span class="line">          vm</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sharedPropertyDefinition = &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: noop,</span><br><span class="line">  <span class="attr">set</span>: noop,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineComputed</span>(<span class="params">target, key, userDef</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> shouldCache = !<span class="title function_">isServerRendering</span>(); <span class="comment">// 标识计算属性是否应该有缓存。该变量的值是当前环境是否为非服务端渲染环境，如果是非服务端渲染环境则该变量为true。也就是说，只有在非服务端渲染环境下计算属性才应该有缓存</span></span><br><span class="line">  <span class="comment">// 如果userDef是一个函数，则该函数默认为取值器getter</span></span><br><span class="line">  <span class="comment">// 调用createComputedGetter函数（关于该函数下面会介绍）创建了一个getter，</span></span><br><span class="line">  <span class="comment">// 这是因为userDef只是一个普通的getter，它并没有缓存功能，所以我们需要额外创建一个具有缓存功能的getter，</span></span><br><span class="line">  <span class="comment">// 而在服务端渲染环境下可以直接使用userDef作为getter，因为在服务端渲染环境下计算属性不需要缓存。</span></span><br><span class="line">  <span class="comment">// 由于用户没有设置setter函数，所以将sharedPropertyDefinition.set设置为noop</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> userDef === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    sharedPropertyDefinition.<span class="property">get</span> = shouldCache</span><br><span class="line">      ? <span class="title function_">createComputedGetter</span>(key)</span><br><span class="line">      : userDef;</span><br><span class="line">    sharedPropertyDefinition.<span class="property">set</span> = noop;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果userDef不是一个函数，那么就将它当作对象处理。</span></span><br><span class="line">    <span class="comment">// 在设置sharedPropertyDefinition.get的时候先判断userDef.get是否存在，如果不存在，则将其设置为noop</span></span><br><span class="line">    <span class="comment">// 如果存在，则同上面一样</span></span><br><span class="line">    <span class="comment">// 设置sharedPropertyDefinition.set为userDef.set函数</span></span><br><span class="line">    sharedPropertyDefinition.<span class="property">get</span> = userDef.<span class="property">get</span></span><br><span class="line">      ? shouldCache &amp;&amp; userDef.<span class="property">cache</span> !== <span class="literal">false</span></span><br><span class="line">        ? <span class="title function_">createComputedGetter</span>(key)</span><br><span class="line">        : userDef.<span class="property">get</span></span><br><span class="line">      : noop;</span><br><span class="line">    sharedPropertyDefinition.<span class="property">set</span> = userDef.<span class="property">set</span> ? userDef.<span class="property">set</span> : noop;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断在非生产环境下如果用户没有设置setter的话，那么就给setter一个默认函数，这是为了防止用户在没有设置setter的情况下修改计算属性，从而为其抛出警告</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">    sharedPropertyDefinition.<span class="property">set</span> === noop</span><br><span class="line">  ) &#123;</span><br><span class="line">    sharedPropertyDefinition.<span class="property">set</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`Computed property &quot;<span class="subst">$&#123;key&#125;</span>&quot; was assigned to but it has no setter.`</span>,</span><br><span class="line">        <span class="variable language_">this</span></span><br><span class="line">      );</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用Object.defineProperty方法将属性key绑定到target上，其中的属性描述符就是上面设置的sharedPropertyDefinition。如此以来，就将计算属性绑定到实例vm上了</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(target, key, sharedPropertyDefinition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createComputedGetter</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">computedGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> watcher = <span class="variable language_">this</span>.<span class="property">_computedWatchers</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_computedWatchers</span>[key];</span><br><span class="line">    <span class="keyword">if</span> (watcher) &#123;</span><br><span class="line">      watcher.<span class="title function_">depend</span>();</span><br><span class="line">      <span class="keyword">return</span> watcher.<span class="title function_">evaluate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化-watch"><a href="#初始化-watch" class="headerlink" title="初始化 watch"></a>初始化 watch</h5><blockquote><ul><li>initWatch</li><li>createWatcher</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整用法</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">e</span>: &#123;</span><br><span class="line">      <span class="attr">f</span>: &#123;</span><br><span class="line">        <span class="attr">g</span>: <span class="number">5</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new: %s, old: %s&quot;</span>, val, oldVal);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// methods选项中的方法名</span></span><br><span class="line">    <span class="attr">b</span>: <span class="string">&quot;someMethod&quot;</span>,</span><br><span class="line">    <span class="comment">// 深度侦听，该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span><br><span class="line">    <span class="attr">c</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 该回调将会在侦听开始之后被立即调用</span></span><br><span class="line">    <span class="attr">d</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="string">&quot;someMethod&quot;</span>,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 调用多个回调</span></span><br><span class="line">    <span class="attr">e</span>: [</span><br><span class="line">      <span class="string">&quot;handle1&quot;</span>,</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">handle2</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="keyword">function</span> <span class="title function_">handle3</span>(<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">          <span class="comment">/* ... */</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 侦听表达式</span></span><br><span class="line">    <span class="string">&quot;e.f&quot;</span>: <span class="keyword">function</span> (<span class="params">val, oldVal</span>) &#123;</span><br><span class="line">      <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">vm.<span class="property">a</span> = <span class="number">2</span>; <span class="comment">// =&gt; new: 2, old: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initWatch</span>(<span class="params">vm, watch</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> watch) &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = watch[key];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(handler)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; handler.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">createWatcher</span>(vm, key, handler[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">createWatcher</span>(vm, key, handler);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWatcher</span>(<span class="params">vm, expOrFn, handler, options</span>) &#123;</span><br><span class="line">  <span class="comment">// 写法 c d e</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isPlainObject</span>(handler)) &#123;</span><br><span class="line">    options = handler;</span><br><span class="line">    handler = handler.<span class="property">handler</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 写法 b</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handler === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    handler = vm[handler];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他情况，认为它是一个函数，就不做任何处理</span></span><br><span class="line">  <span class="keyword">return</span> vm.$watch(expOrFn, handler, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板编译阶段"><a href="#模板编译阶段" class="headerlink" title="模板编译阶段"></a>模板编译阶段</h3><blockquote><p>将模板编译成渲染函数，vm.$mount 方法开始<br>模板编译阶段并不是存在于 Vue 的所有构建版本中，它只存在于完整版 (即 vue.js) 中，在只包含运行时版本 (即 vue.runtime.js) 中并不存在该阶段。vue 基于源码构建的有两个版本</p><ul><li>当使用 vue-loader 或 vueify 时，*.vue 文件内部的模板会在构建时预编译成渲染函数，所以是不需要编译的，从而不存在模板编译阶段，由上一步的初始化阶段直接进入下一阶段的挂载阶段</li><li>运行时版本相比完整版体积要小大约 30%，实际开发中，需要借助像 webpack 的 vue-loader 这类工具进行编译，将 Vue 对模板的编译阶段合并到 webpack 的构建流程中，不仅减少了生产环境代码的体积，也大大提高了运行时的性能</li></ul></blockquote><h4 id="runtime-only"><a href="#runtime-only" class="headerlink" title="runtime only"></a>runtime only</h4><blockquote><p>包含运行时的版本，创建 Vue 实例、渲染并处理 Virtual DOM 等功能，有两种场景</p><ul><li>通过手写 render 函数去定义渲染过程，这个时候并不需要包含编译器的版本便可完整执行，<code>new Vue(&#123; render (h) &#123; return h(&#39;div&#39;, this.hi) &#125;&#125;)</code></li><li>借助 vue-loader 等编译工具进行编译，尽管也是利用 template 模板标签去书写代码，但是此时的 Vue 已经不需要利用编译器去负责模板的编译工作了，这个过程交给了插件去实现</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params">el, hydrating</span>) &#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? <span class="title function_">query</span>(el) : <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">mountComponent</span>(<span class="variable language_">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="runtime-compiler"><a href="#runtime-compiler" class="headerlink" title="runtime + compiler"></a>runtime + compiler</h4><blockquote><p>同时包含编译器和运行时的完整版本<br>对 template 进行编译，<code>new Vue(&#123; template: &#39;&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;&#39; &#125;)</code></p><ul><li>先将 Vue 原型上的 $mount 方法先缓存起来，记作变量 mount</li><li>在源码中，是先定义只包含运行时版本的 $mount 方法，再定义完整版本的 $mount 方法，所以此时缓存的 mount 变量就是只包含运行时版本的 $mount 方法</li><li>在完整版本的 $mount 方法中将模板编译完成后需要回头去调只包含运行时版本的 $mount 方法以进入挂载阶段</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mount = <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params">el, hydrating</span>) &#123;</span><br><span class="line">  <span class="comment">// 省略获取模板及编译代码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mount.<span class="title function_">call</span>(<span class="variable language_">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完整实现</span></span><br><span class="line"><span class="keyword">var</span> mount = <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params">el, hydrating</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 根据传入的el参数获取DOM元素</span></span><br><span class="line">  el = el &amp;&amp; <span class="title function_">query</span>(el);</span><br><span class="line">  <span class="comment">// 2. 获取到el对应的DOM元素如果是body或html元素时，将会抛出警告</span></span><br><span class="line">  <span class="comment">// 因为Vue会将模板中的内容替换el对应的DOM元素，如果是body或html元素时，替换之后将会破坏整个DOM文档，所以不允许el是body或html</span></span><br><span class="line">  <span class="keyword">if</span> (el === <span class="variable language_">document</span>.<span class="property">body</span> || el === <span class="variable language_">document</span>.<span class="property">documentElement</span>) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">&quot;Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> options = <span class="variable language_">this</span>.<span class="property">$options</span>;</span><br><span class="line">  <span class="comment">// 3. 没有手写render函数的情况下获取传入的模板template</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">render</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> template = options.<span class="property">template</span>;</span><br><span class="line">    <span class="comment">// 4. 获取用户传入的template选项赋给变量template，如果变量template存在，则接着判断如果template是字符串并且以##开头，则认为template是id选择符，则调用idToTemplate函数获取到选择符对应的DOM元素的innerHTML作为模板</span></span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (template.<span class="title function_">charAt</span>(<span class="number">0</span>) === <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">          template = <span class="title function_">idToTemplate</span>(template);</span><br><span class="line">          <span class="comment">/* istanbul ignore if */</span></span><br><span class="line">          <span class="keyword">if</span> (!template) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">&quot;Template element not found or is empty: &quot;</span> + options.<span class="property">template</span>,</span><br><span class="line">              <span class="variable language_">this</span></span><br><span class="line">            );</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 5. 如果template不是字符串，那就判断它是不是一个DOM元素，如果是，则使用该DOM元素的innerHTML作为模板</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (template.<span class="property">nodeType</span>) &#123;</span><br><span class="line">        template = template.<span class="property">innerHTML</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 6. 如果既不是字符串，也不是DOM元素，此时会抛出警告: 提示用户template选项无效</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">&quot;invalid template option:&quot;</span> + template, <span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 7. 如果变量template不存在，表明用户没有传入template选项，则根据传入的el参数调用getOuterHTML函数获取外部模板</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</span><br><span class="line">      template = <span class="title function_">getOuterHTML</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getOuterHTML</span>(<span class="params">el</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (el.<span class="property">outerHTML</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> el.<span class="property">outerHTML</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        container.<span class="title function_">appendChild</span>(el.<span class="title function_">cloneNode</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">return</span> container.<span class="property">innerHTML</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 将template编译成渲染函数，并设置到$options上</span></span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">        <span class="title function_">mark</span>(<span class="string">&quot;compile&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> ref = <span class="title function_">compileToFunctions</span>(</span><br><span class="line">        template,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">outputSourceRange</span>: <span class="string">&quot;development&quot;</span> !== <span class="string">&quot;production&quot;</span>,</span><br><span class="line">          <span class="attr">shouldDecodeNewlines</span>: shouldDecodeNewlines,</span><br><span class="line">          <span class="attr">shouldDecodeNewlinesForHref</span>: shouldDecodeNewlinesForHref,</span><br><span class="line">          <span class="attr">delimiters</span>: options.<span class="property">delimiters</span>,</span><br><span class="line">          <span class="attr">comments</span>: options.<span class="property">comments</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="variable language_">this</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">var</span> render = ref.<span class="property">render</span>;</span><br><span class="line">      <span class="keyword">var</span> staticRenderFns = ref.<span class="property">staticRenderFns</span>;</span><br><span class="line">      options.<span class="property">render</span> = render;</span><br><span class="line">      options.<span class="property">staticRenderFns</span> = staticRenderFns;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (config.<span class="property">performance</span> &amp;&amp; mark) &#123;</span><br><span class="line">        <span class="title function_">mark</span>(<span class="string">&quot;compile end&quot;</span>);</span><br><span class="line">        <span class="title function_">measure</span>(<span class="string">&quot;vue &quot;</span> + <span class="variable language_">this</span>.<span class="property">_name</span> + <span class="string">&quot; compile&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;compile end&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> mount.<span class="title function_">call</span>(<span class="variable language_">this</span>, el, hydrating);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h3><blockquote><p>将实例挂载到指定的 DOM 上，即将模板渲染到真实 DOM 中</p><ul><li>创建 Vue 实例并用其替换 el 选项对应的 DOM 元素</li><li>开启对模板中数据 (状态) 的监控，当数据 (状态) 发生变化时通知其依赖进行视图更新</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mountComponent</span>(<span class="params">vm, el, hydrating</span>) &#123;</span><br><span class="line">  vm.<span class="property">$el</span> = el;</span><br><span class="line">  <span class="comment">// 1. 不存在则设置一个默认的渲染函数createEmptyVNode，该渲染函数会创建一个注释类型的VNode节点</span></span><br><span class="line">  <span class="keyword">if</span> (!vm.<span class="property">$options</span>.<span class="property">render</span>) &#123;</span><br><span class="line">    vm.<span class="property">$options</span>.<span class="property">render</span> = createEmptyVNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 触发beforeMount生命周期，触发后标志着正式开始执行挂载操作</span></span><br><span class="line">  <span class="title function_">callHook</span>(vm, <span class="string">&quot;beforeMount&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> updateComponent;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 定义 updateComponent 函数</span></span><br><span class="line">  <span class="comment">// 首先执行渲染函数vm._render()得到一份最新的VNode节点树，</span></span><br><span class="line">  <span class="comment">// 然后执行vm._update()方法对最新的VNode节点树与上一次渲染的旧VNode节点树进行对比并更新DOM节点(即patch操作)，完成一次渲染</span></span><br><span class="line">  <span class="comment">// --&gt;  如果调用了updateComponent函数，就会将最新的模板内容渲染到视图页面中，这样就完成了挂载操作的一半工作</span></span><br><span class="line">  <span class="comment">// --&gt;  剩下一半工作为开启对模板中数据（状态）的监控，当数据（状态）发生变化时通知其依赖进行视图更新</span></span><br><span class="line">  updateComponent = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    vm.<span class="title function_">_update</span>(vm.<span class="title function_">_render</span>(), hydrating);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Watcher</span>(</span><br><span class="line">    vm,</span><br><span class="line">    <span class="comment">// 触发数据或者函数内数据的getter方法，在getter方法中会将watcher实例添加到该数据的依赖列表中，当该数据发生变化时会通知依赖列表中所有的依赖，依赖接收到通知后就会调用第四个参数回调函数去更新视图</span></span><br><span class="line">    <span class="comment">// updateComponent函数中读取的所有数据都将被watcher所监控，这些数据中只要有任何一个发生了变化，那么watcher都将会得到通知，从而会去调用第四个参数回调函数去更新视图，如此反复，直到实例被销毁</span></span><br><span class="line">    updateComponent,</span><br><span class="line">    noop,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_">before</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vm.<span class="property">_isMounted</span>) &#123;</span><br><span class="line">          <span class="title function_">callHook</span>(vm, <span class="string">&quot;beforeUpdate&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span></span><br><span class="line">  );</span><br><span class="line">  hydrating = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 mounted</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$vnode</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    vm.<span class="property">_isMounted</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁阶段"><a href="#销毁阶段" class="headerlink" title="销毁阶段"></a>销毁阶段</h3><blockquote><p>将当前的 Vue 实例从其父级实例中删除，取消当前实例上的所有依赖追踪并且移除实例上的所有事件监听器</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$destroy</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 1. 判断当前实例是否处于正在被销毁的状态</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_isBeingDestroyed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 触发生命周期钩子函数beforeDestroy，标志当前实例正式开始销毁</span></span><br><span class="line">  <span class="title function_">callHook</span>(vm, <span class="string">&quot;beforeDestroy&quot;</span>);</span><br><span class="line">  vm.<span class="property">_isBeingDestroyed</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 3. 将当前的Vue实例从其父级实例中删除</span></span><br><span class="line">  <span class="keyword">const</span> parent = vm.<span class="property">$parent</span>;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !parent.<span class="property">_isBeingDestroyed</span> &amp;&amp; !vm.<span class="property">$options</span>.<span class="property">abstract</span>) &#123;</span><br><span class="line">    <span class="title function_">remove</span>(parent.<span class="property">$children</span>, vm);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4. 移除依赖追踪和事件监听，实例身上的依赖包含两部分</span></span><br><span class="line">  <span class="comment">// - 实例自身依赖其他数据，需要将实例自身从其他数据的依赖列表中删除</span></span><br><span class="line">  <span class="comment">// - 实例内的数据对其他数据的依赖（如用户使用$watch创建的依赖），也需要从其他数据的依赖列表中删除实例内数据</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_watcher</span>) &#123;</span><br><span class="line">    <span class="comment">// 将实例自身从其他数据的依赖列表中删除</span></span><br><span class="line">    vm.<span class="property">_watcher</span>.<span class="title function_">teardown</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历 _watchers 列表，移除实例内数据对其他数据的依赖</span></span><br><span class="line">  <span class="keyword">let</span> i = vm.<span class="property">_watchers</span>.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    vm.<span class="property">_watchers</span>[i].<span class="title function_">teardown</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5. 移除实例内响应式数据的引用、给当前实例上添加_isDestroyed属性来表示当前实例已经被销毁，同时将实例的VNode树设置为null</span></span><br><span class="line">  <span class="comment">// frozen object may not have observer.</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_data</span>.<span class="property">__ob__</span>) &#123;</span><br><span class="line">    vm.<span class="property">_data</span>.<span class="property">__ob__</span>.<span class="property">vmCount</span>--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// call the last hook...</span></span><br><span class="line">  vm.<span class="property">_isDestroyed</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// invoke destroy hooks on current rendered tree</span></span><br><span class="line">  vm.<span class="title function_">__patch__</span>(vm.<span class="property">_vnode</span>, <span class="literal">null</span>);</span><br><span class="line">  <span class="comment">// 6. 触发生命周期钩子函数destroyed</span></span><br><span class="line">  <span class="comment">// fire destroyed hook</span></span><br><span class="line">  <span class="title function_">callHook</span>(vm, <span class="string">&quot;destroyed&quot;</span>);</span><br><span class="line">  <span class="comment">// 7. 调用实例的vm.$off方法，移除实例上的所有事件监听器</span></span><br><span class="line">  vm.$off();</span><br><span class="line">  <span class="comment">// 8. 移除一些相关属性的引用</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$el</span>) &#123;</span><br><span class="line">    vm.<span class="property">$el</span>.<span class="property">__vue__</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// release circular reference (##6759)</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$vnode</span>) &#123;</span><br><span class="line">    vm.<span class="property">$vnode</span>.<span class="property">parent</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 模版编译</title>
      <link href="/articles/vue/template/"/>
      <url>/articles/vue/template/</url>
      
        <content type="html"><![CDATA[<blockquote><p>将模板转化成供 Vue 实例在挂载时可调用的 render 函数。分为三个节点</p><ul><li>模板解析阶段</li><li>优化阶段</li><li>代码生成阶段</li></ul></blockquote><p><img src="/images/vue/template_1.jpg" alt=""></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createCompiler = <span class="title function_">createCompilerCreator</span>(<span class="keyword">function</span> <span class="title function_">baseCompile</span>(<span class="params"></span></span><br><span class="line"><span class="params">  template,</span></span><br><span class="line"><span class="params">  options</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 模板解析阶段: 用正则等方式解析 template 模板中的指令、class、style等数据，形成AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(template.<span class="title function_">trim</span>(), options);</span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">optimize</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 优化阶段: 遍历AST，找出其中的静态节点，并打上标记</span></span><br><span class="line">    <span class="title function_">optimize</span>(ast, options);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 代码生成阶段: 将AST转换成渲染函数</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">generate</span>(ast, options);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ast,</span><br><span class="line">    <span class="attr">render</span>: code.<span class="property">render</span>,</span><br><span class="line">    <span class="attr">staticRenderFns</span>: code.<span class="property">staticRenderFns</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h3><blockquote><p>将模板字符串用正则等方式解析成 AST</p></blockquote><h4 id="parseHTML"><a href="#parseHTML" class="headerlink" title="parseHTML"></a>parseHTML</h4><blockquote><p>html 解析器，解析模板字符串</p><p>4 个钩子函数: start()、end()、chars()、comment()</p><p>解析不同的内容</p><ul><li>解析 HTML 注释，例如 <code>&lt;!-- 我是注释 --&gt;</code>: 正则匹配 <code>&lt;!--</code> 开头和 <code>--&gt;</code> 结尾的</li><li>解析条件注释，例如 <code>&lt;!-- [if !IE]&gt; --&gt;我是注释&lt;!--&lt; ![endif] --&gt;</code>: 正则匹配 <code>&lt;![</code> 开头和 <code>]&gt;</code> 结尾的</li><li>解析 DOCTYPE，例如 <code>&lt;!DOCTYPE html&gt;</code>: 同解析条件注释</li><li>解析开始标签: 调用 parseStartTag 函数，完成后调用 handleStartTag 生成 AST</li><li><ul><li>解析标签属性</li></ul></li><li><ul><li>解析标签是否是自闭合</li></ul></li><li>解析结束标签: 如果模板字符串符合结束标签的特征，则会获得匹配结果数组；如果不合符，则得到 null</li><li>解析文本</li><li><ul><li>匹配 &lt; 出现的位置</li></ul></li><li><ul><li>如果第一个 &lt; 在第一个位置，那么说明模板字符串是以其它 5 种类型开始的；</li></ul></li><li><ul><li>如果第一个 &lt; 不在第一个位置而在模板字符串中间某个位置，那么说明模板字符串是以文本开头的，那么从开头到第一个 &lt; 出现的位置就都是文本内容了；</li></ul></li><li><ul><li>如果在整个模板字符串里没有找到 &lt;，那说明整个模板字符串都是文本</li></ul></li></ul><p>保证 AST 节点层级关系</p><ul><li>开始标签入栈，结束标签出栈，若没有正确闭合，则抛出警告: <code>tag has no matching end tag.</code></li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params">template, options</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="title function_">parseHTML</span>(template, &#123;</span><br><span class="line">    warn,</span><br><span class="line">    <span class="attr">expectHTML</span>: options.<span class="property">expectHTML</span>,</span><br><span class="line">    <span class="attr">isUnaryTag</span>: options.<span class="property">isUnaryTag</span>,</span><br><span class="line">    <span class="attr">canBeLeftOpenTag</span>: options.<span class="property">canBeLeftOpenTag</span>,</span><br><span class="line">    <span class="attr">shouldDecodeNewlines</span>: options.<span class="property">shouldDecodeNewlines</span>,</span><br><span class="line">    <span class="attr">shouldDecodeNewlinesForHref</span>: options.<span class="property">shouldDecodeNewlinesForHref</span>,</span><br><span class="line">    <span class="attr">shouldKeepComment</span>: options.<span class="property">comments</span>,</span><br><span class="line">    <span class="comment">// 当解析到开始标签时，调用该函数，标签名tag、标签属性attrs、标签是否自闭合unary</span></span><br><span class="line">    <span class="title function_">start</span>(<span class="params">tag, attrs, unary</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> element = <span class="title function_">createASTElement</span>(tag, attrs, currentParent);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当解析到结束标签时，调用该函数</span></span><br><span class="line">    <span class="title function_">end</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// 当解析到文本时，调用该函数</span></span><br><span class="line">    <span class="comment">// parseText: 判断传入的文本是否包含变量；构造expression；构造tokens</span></span><br><span class="line">    <span class="title function_">chars</span>(<span class="params">text</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((res = <span class="title function_">parseText</span>(text))) &#123;</span><br><span class="line">        <span class="comment">// 动态文本类型 AST 节点</span></span><br><span class="line">        <span class="keyword">let</span> element = &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">expression</span>: res.<span class="property">expression</span>,</span><br><span class="line">          <span class="attr">tokens</span>: res.<span class="property">tokens</span>,</span><br><span class="line">          text,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 静态文本类型 AST 节点</span></span><br><span class="line">        <span class="keyword">let</span> element = &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="number">3</span>,</span><br><span class="line">          text,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当解析到注释时，调用该函数</span></span><br><span class="line">    <span class="title function_">comment</span>(<span class="params">text</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> element = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="number">3</span>,</span><br><span class="line">        text,</span><br><span class="line">        <span class="attr">isComment</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createASTElement</span>(<span class="params">tag, attrs, parent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="number">1</span>,</span><br><span class="line">    tag,</span><br><span class="line">    <span class="attr">attrsList</span>: attrs,</span><br><span class="line">    <span class="attr">attrsMap</span>: <span class="title function_">makeAttrsMap</span>(attrs),</span><br><span class="line">    parent,</span><br><span class="line">    <span class="attr">children</span>: [],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseHTML</span>(<span class="params">html, options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> stack = []; <span class="comment">// 维护AST节点层级的栈</span></span><br><span class="line">  <span class="keyword">var</span> expectHTML = options.<span class="property">expectHTML</span>;</span><br><span class="line">  <span class="keyword">var</span> isUnaryTag$$1 = options.<span class="property">isUnaryTag</span> || no; <span class="comment">//用来检测一个标签是否是可以省略闭合标签的非自闭合标签</span></span><br><span class="line">  <span class="keyword">var</span> canBeLeftOpenTag$$1 = options.<span class="property">canBeLeftOpenTag</span> || no;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">//解析游标，标识当前从何处开始解析模板字符串</span></span><br><span class="line">  <span class="keyword">var</span> last, <span class="comment">// 存储剩余还未解析的模板字符串</span></span><br><span class="line">    lastTag; <span class="comment">// 存储着位于 stack 栈顶的元素</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕</span></span><br><span class="line">  <span class="keyword">while</span> (html) &#123;</span><br><span class="line">    last = html;</span><br><span class="line">    <span class="comment">// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)</span></span><br><span class="line">    <span class="comment">// lastTag为栈顶元素，!lastTag即表示当前html字符串没有父节点，而isPlainTextElement(lastTag) 是检测 lastTag 是否为是那三个纯文本标签之一，是的话返回true，不是返回fasle</span></span><br><span class="line">    <span class="keyword">if</span> (!lastTag || !<span class="title function_">isPlainTextElement</span>(lastTag)) &#123;</span><br><span class="line">      <span class="keyword">let</span> textEnd = html.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 如果html字符串是以&#x27;&lt;&#x27;开头,则有以下几种可能</span></span><br><span class="line"><span class="comment">       * 开始标签:&lt;div&gt;</span></span><br><span class="line"><span class="comment">       * 结束标签:&lt;/div&gt;</span></span><br><span class="line"><span class="comment">       * 注释:&lt;!-- 我是注释 --&gt;</span></span><br><span class="line"><span class="comment">       * 条件注释:&lt;!-- [if !IE] --&gt; &lt;!-- [endif] --&gt;</span></span><br><span class="line"><span class="comment">       * DOCTYPE:&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">       * 需要一一去匹配尝试</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (textEnd === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 解析是否是注释</span></span><br><span class="line">        <span class="keyword">if</span> (comment.<span class="title function_">test</span>(html)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析是否是条件注释</span></span><br><span class="line">        <span class="keyword">if</span> (conditionalComment.<span class="title function_">test</span>(html)) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析是否是DOCTYPE</span></span><br><span class="line">        <span class="keyword">const</span> doctypeMatch = html.<span class="title function_">match</span>(doctype);</span><br><span class="line">        <span class="keyword">if</span> (doctypeMatch) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析是否是结束标签</span></span><br><span class="line">        <span class="keyword">const</span> endTagMatch = html.<span class="title function_">match</span>(endTag);</span><br><span class="line">        <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 匹配是否是开始标签</span></span><br><span class="line">        <span class="keyword">const</span> startTagMatch = <span class="title function_">parseStartTag</span>();</span><br><span class="line">        <span class="keyword">if</span> (startTagMatch) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果html字符串不是以&#x27;&lt;&#x27;开头,则解析文本类型</span></span><br><span class="line">      <span class="keyword">let</span> text, rest, next;</span><br><span class="line">      <span class="keyword">if</span> (textEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果在html字符串中没有找到&#x27;&lt;&#x27;，表示这一段html字符串都是纯文本</span></span><br><span class="line">      <span class="keyword">if</span> (textEnd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        text = html;</span><br><span class="line">        html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把截取出来的text转化成textAST</span></span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">chars</span> &amp;&amp; text) &#123;</span><br><span class="line">        options.<span class="title function_">chars</span>(text);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 父元素为script、style、textarea时，其内部的内容全部当做纯文本处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将整个字符串作为文本对待</span></span><br><span class="line">    <span class="keyword">if</span> (html === last) &#123;</span><br><span class="line">      options.<span class="property">chars</span> &amp;&amp; options.<span class="title function_">chars</span>(html);</span><br><span class="line">      <span class="keyword">if</span> (!stack.<span class="property">length</span> &amp;&amp; options.<span class="property">warn</span>) &#123;</span><br><span class="line">        options.<span class="title function_">warn</span>(<span class="string">&#x27;Mal-formatted tag at end of template: &quot;&#x27;</span> + html + <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// html === last，即html字符串中的标签格式有误时会跳出while循环，调用</span></span><br><span class="line">  <span class="comment">// 于处理栈中剩余未处理的标签，此时parseEndTag函数里的pos为0，那么pos&gt;=0就会恒成立，那么就会逐个警告缺少闭合标签，并调用 options.end将其闭合</span></span><br><span class="line">  <span class="title function_">parseEndTag</span>();</span><br><span class="line">  <span class="comment">//parse 开始标签</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">parseStartTag</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">//处理 parseStartTag 的结果</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleStartTag</span>(<span class="params">match</span>) &#123;&#125;</span><br><span class="line">  <span class="comment">//parse 结束标签</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">parseEndTag</span>(<span class="params">tagName, start, end</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析html注释</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> comment = <span class="regexp">/^&lt;!\--/</span>;</span><br><span class="line">  <span class="keyword">if</span> (comment.<span class="title function_">test</span>(html)) &#123;</span><br><span class="line">    <span class="comment">// 若为注释，则继续查找是否存在&#x27;--&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> commentEnd = html.<span class="title function_">indexOf</span>(<span class="string">&quot;--&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (commentEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 若存在 &#x27;--&gt;&#x27;,继续判断options中是否保留注释，可以在&lt;template&gt;&lt;/template&gt;标签上配置comments选项，对应options.shouldKeepComment</span></span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">shouldKeepComment</span>) &#123;</span><br><span class="line">        <span class="comment">// 若保留注释，则把注释截取出来传给options.comment，创建注释类型的AST节点</span></span><br><span class="line">        options.<span class="title function_">comment</span>(html.<span class="title function_">substring</span>(<span class="number">4</span>, commentEnd));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 若不保留注释，则将游标移动到&#x27;--&gt;&#x27;之后，继续向后解析</span></span><br><span class="line">      <span class="title function_">advance</span>(commentEnd + <span class="number">3</span>);</span><br><span class="line">      <span class="comment">// continue</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(</span><br><span class="line">  <span class="comment">// 解析条件注释</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> conditionalComment = <span class="regexp">/^&lt;!\[/</span>;</span><br><span class="line">    <span class="keyword">if</span> (conditionalComment.<span class="title function_">test</span>(html)) &#123;</span><br><span class="line">      <span class="comment">// 若为条件注释，则继续查找是否存在&#x27;]&gt;&#x27;</span></span><br><span class="line">      <span class="keyword">const</span> conditionalEnd = html.<span class="title function_">indexOf</span>(<span class="string">&quot;]&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (conditionalEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 若存在 &#x27;]&gt;&#x27;,则从原本的html字符串中把条件注释截掉，</span></span><br><span class="line">        <span class="comment">// 把剩下的内容重新赋给html，继续向后匹配</span></span><br><span class="line">        <span class="title function_">advance</span>(conditionalEnd + <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// continue</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)(</span><br><span class="line">  <span class="comment">// 解析doc</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> doctype = <span class="regexp">/^&lt;!DOCTYPE [^&gt;]+&gt;/i</span>;</span><br><span class="line">    <span class="comment">// 解析是否是DOCTYPE</span></span><br><span class="line">    <span class="keyword">const</span> doctypeMatch = html.<span class="title function_">match</span>(doctype);</span><br><span class="line">    <span class="keyword">if</span> (doctypeMatch) &#123;</span><br><span class="line">      <span class="title function_">advance</span>(doctypeMatch[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">      <span class="comment">// continue</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)(</span><br><span class="line">  <span class="comment">// 解析开始标签</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ncname = <span class="string">&quot;[a-zA-Z_][\\w\\-\\.]*&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> qnameCapture = <span class="string">`((?:<span class="subst">$&#123;ncname&#125;</span>\\:)?<span class="subst">$&#123;ncname&#125;</span>)`</span>;</span><br><span class="line">    <span class="keyword">const</span> startTagOpen = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^&lt;<span class="subst">$&#123;qnameCapture&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> startTagClose = <span class="regexp">/^\s*(\/?)&gt;/</span>;</span><br><span class="line">    <span class="keyword">const</span> attribute =</span><br><span class="line">      <span class="regexp">/^\s*([^\s&quot;&#x27;&lt;&gt;\/=]+)(?:\s*(=)\s*(?:&quot;([^&quot;]*)&quot;+|&#x27;([^&#x27;]*)&#x27;+|([^\s&quot;&#x27;=&lt;&gt;`]+)))?/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">parseStartTag</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> start = html.<span class="title function_">match</span>(startTagOpen);</span><br><span class="line">      <span class="comment">// &#x27;&lt;div&gt;&lt;/div&gt;&#x27;.match(startTagOpen)  =&gt; [&#x27;&lt;div&#x27;,&#x27;div&#x27;,index:0,input:&#x27;&lt;div&gt;&lt;/div&gt;&#x27;]</span></span><br><span class="line">      <span class="keyword">if</span> (start) &#123;</span><br><span class="line">        <span class="keyword">const</span> match = &#123;</span><br><span class="line">          <span class="attr">tagName</span>: start[<span class="number">1</span>],</span><br><span class="line">          <span class="attr">attrs</span>: [],</span><br><span class="line">          <span class="attr">start</span>: index,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">advance</span>(start[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">        <span class="keyword">let</span> end, attr;</span><br><span class="line">        <span class="comment">/** 解析标签属性</span></span><br><span class="line"><span class="comment">         * &lt;div a=1 b=2 c=3&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">         * 从&lt;div之后到开始标签的结束符号&#x27;&gt;&#x27;之前，一直匹配属性attrs</span></span><br><span class="line"><span class="comment">         * 所有属性匹配完之后，html字符串还剩下</span></span><br><span class="line"><span class="comment">         * 自闭合标签剩下: &#x27;/&gt;&#x27;</span></span><br><span class="line"><span class="comment">         * 非自闭合标签剩下: &#x27;&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (</span><br><span class="line">          !(end = html.<span class="title function_">match</span>(startTagClose)) &amp;&amp;</span><br><span class="line">          (attr = html.<span class="title function_">match</span>(attribute))</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="title function_">advance</span>(attr[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">          match.<span class="property">attrs</span>.<span class="title function_">push</span>(attr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 解析标签是否是自闭合</span></span><br><span class="line"><span class="comment">         * 这里判断了该标签是否为自闭合标签</span></span><br><span class="line"><span class="comment">         * 自闭合标签如:&lt;input type=&#x27;text&#x27; /&gt;</span></span><br><span class="line"><span class="comment">         * 非自闭合标签如:&lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">         * &#x27;&gt;&lt;/div&gt;&#x27;.match(startTagClose) =&gt; [&quot;&gt;&quot;, &quot;&quot;, index: 0, input: &quot;&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span><br><span class="line"><span class="comment">         * &#x27;/&gt;&lt;div&gt;&lt;/div&gt;&#x27;.match(startTagClose) =&gt; [&quot;/&gt;&quot;, &quot;/&quot;, index: 0, input: &quot;/&gt;&lt;div&gt;&lt;/div&gt;&quot;, groups: undefined]</span></span><br><span class="line"><span class="comment">         * 因此，我们可以通过end[1]是否是&quot;/&quot;来判断该标签是否是自闭合标签</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (end) &#123;</span><br><span class="line">          match.<span class="property">unarySlash</span> = end[<span class="number">1</span>];</span><br><span class="line">          <span class="title function_">advance</span>(end[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">          match.<span class="property">end</span> = index;</span><br><span class="line">          <span class="keyword">return</span> match;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleStartTag</span>(<span class="params">match</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> tagName = match.<span class="property">tagName</span>; <span class="comment">// 开始标签的标签名</span></span><br><span class="line">      <span class="keyword">const</span> unarySlash = match.<span class="property">unarySlash</span>; <span class="comment">// 是否为自闭合标签的标志，自闭合为&quot;&quot;,非自闭合为&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (expectHTML) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> unary = <span class="title function_">isUnaryTag</span>(tagName) || !!unarySlash; <span class="comment">// 布尔值，标志是否为自闭合标签</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> l = match.<span class="property">attrs</span>.<span class="property">length</span>; <span class="comment">// match.attrs 数组的长度</span></span><br><span class="line">      <span class="keyword">const</span> attrs = <span class="keyword">new</span> <span class="title class_">Array</span>(l); <span class="comment">// 一个与match.attrs数组长度相等的数组</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> args = match.<span class="property">attrs</span>[i];</span><br><span class="line">        <span class="keyword">const</span> value = args[<span class="number">3</span>] || args[<span class="number">4</span>] || args[<span class="number">5</span>] || <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 shouldDecodeNewlines 为 true，意味着 Vue 在编译模板的时候，要对属性值中的换行符或制表符做兼容处理。</span></span><br><span class="line">        <span class="comment">// 而shouldDecodeNewlinesForHref为 true 意味着Vue在编译模板的时候，要对a标签的 href属性值中的换行符或制表符做兼容处理。</span></span><br><span class="line">        <span class="keyword">const</span> shouldDecodeNewlines =</span><br><span class="line">          tagName === <span class="string">&quot;a&quot;</span> &amp;&amp; args[<span class="number">1</span>] === <span class="string">&quot;href&quot;</span></span><br><span class="line">            ? options.<span class="property">shouldDecodeNewlinesForHref</span></span><br><span class="line">            : options.<span class="property">shouldDecodeNewlines</span>;</span><br><span class="line"></span><br><span class="line">        attrs[i] = &#123;</span><br><span class="line">          <span class="attr">name</span>: args[<span class="number">1</span>], <span class="comment">// 标签属性的属性名，如class</span></span><br><span class="line">          <span class="attr">value</span>: <span class="title function_">decodeAttr</span>(value, shouldDecodeNewlines), <span class="comment">// 标签属性的属性值，如class对应的a</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 非自闭合标签</span></span><br><span class="line">      <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">        stack.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">tag</span>: tagName,</span><br><span class="line">          <span class="attr">lowerCasedTag</span>: tagName.<span class="title function_">toLowerCase</span>(),</span><br><span class="line">          <span class="attr">attrs</span>: attrs,</span><br><span class="line">        &#125;);</span><br><span class="line">        lastTag = tagName;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 自闭合标签</span></span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">start</span>) &#123;</span><br><span class="line">        options.<span class="title function_">start</span>(tagName, attrs, unary, match.<span class="property">start</span>, match.<span class="property">end</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)(</span><br><span class="line">  <span class="comment">// 解析结束标签</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ncname = <span class="string">&quot;[a-zA-Z_][\\w\\-\\.]*&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> qnameCapture = <span class="string">`((?:<span class="subst">$&#123;ncname&#125;</span>\\:)?<span class="subst">$&#123;ncname&#125;</span>)`</span>;</span><br><span class="line">    <span class="keyword">const</span> endTag = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^&lt;\\/<span class="subst">$&#123;qnameCapture&#125;</span>[^&gt;]*&gt;`</span>);</span><br><span class="line">    <span class="keyword">const</span> endTagMatch = html.<span class="title function_">match</span>(endTag);</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&lt;/div&gt;&quot;</span>.<span class="title function_">match</span>(endTag); <span class="comment">// [&quot;&lt;/div&gt;&quot;, &quot;div&quot;, index: 0, input: &quot;&lt;/div&gt;&quot;, groups: undefined]</span></span><br><span class="line">    <span class="string">&quot;&lt;div&gt;&quot;</span>.<span class="title function_">match</span>(endTag); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (endTagMatch) &#123;</span><br><span class="line">      <span class="keyword">const</span> curIndex = index;</span><br><span class="line">      <span class="title function_">advance</span>(endTagMatch[<span class="number">0</span>].<span class="property">length</span>);</span><br><span class="line">      <span class="title function_">parseEndTag</span>(endTagMatch[<span class="number">1</span>], curIndex, index);</span><br><span class="line">      <span class="comment">// continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三个可选参数</span></span><br><span class="line">    <span class="comment">// 第一种是三个参数都传递，用于处理普通的结束标签</span></span><br><span class="line">    <span class="comment">// 第二种是只传递tagName</span></span><br><span class="line">    <span class="comment">// 第三种是三个参数都不传递，用于处理栈中剩余未处理的标签</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">parseEndTag</span>(<span class="params">tagName, start, end</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> pos, lowerCasedTagName;</span><br><span class="line">      <span class="keyword">if</span> (start == <span class="literal">null</span>) start = index;</span><br><span class="line">      <span class="keyword">if</span> (end == <span class="literal">null</span>) end = index;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">        lowerCasedTagName = tagName.<span class="title function_">toLowerCase</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果tagName存在，那么就从后往前遍历栈，在栈中寻找与tagName相同的标签并记录其所在的位置pos，如果tagName不存在，则将pos置为0</span></span><br><span class="line">      <span class="keyword">if</span> (tagName) &#123;</span><br><span class="line">        <span class="keyword">for</span> (pos = stack.<span class="property">length</span> - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; pos--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (stack[pos].<span class="property">lowerCasedTag</span> === lowerCasedTagName) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pos = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Close all the open elements, up the stack</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = stack.<span class="property">length</span> - <span class="number">1</span>; i &gt;= pos; i--) &#123;</span><br><span class="line">          <span class="comment">// 如果发现stack栈中存在索引大于pos的元素，那么该元素一定是缺少闭合标签的</span></span><br><span class="line">          <span class="comment">// 这是因为在正常情况下，stack栈的栈顶元素应该和当前的结束标签tagName 匹配，也就是说正常的pos应该是栈顶位置，后面不应该再有元素，如果后面还有元素，那么后面的元素就都缺少闭合标签</span></span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span> &amp;&amp;</span><br><span class="line">            (i &gt; pos || !tagName) &amp;&amp;</span><br><span class="line">            options.<span class="property">warn</span></span><br><span class="line">          ) &#123;</span><br><span class="line">            options.<span class="title function_">warn</span>(<span class="string">`tag &lt;<span class="subst">$&#123;stack[i].tag&#125;</span>&gt; has no matching end tag.`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 立即将其闭合，为了保证解析结果的正确性</span></span><br><span class="line">          <span class="keyword">if</span> (options.<span class="property">end</span>) &#123;</span><br><span class="line">            options.<span class="title function_">end</span>(stack[i].<span class="property">tag</span>, start, end);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把pos位置以后的元素都从stack栈中弹出，以及把lastTag更新为栈顶元素</span></span><br><span class="line">        stack.<span class="property">length</span> = pos;</span><br><span class="line">        lastTag = pos &amp;&amp; stack[pos - <span class="number">1</span>].<span class="property">tag</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 单独判断 br 或p标签</span></span><br><span class="line">      <span class="comment">// 浏览器会自动把&lt;/br&gt;标签解析为正常的 &lt;br&gt;标签，而对于&lt;/p&gt;浏览器则自动将其补全为&lt;p&gt;&lt;/p&gt;，所以Vue为了与浏览器对这两个标签的行为保持一致，故对这两个便签单独判断处理</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">&quot;br&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">start</span>) &#123;</span><br><span class="line">          options.<span class="title function_">start</span>(tagName, [], <span class="literal">true</span>, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lowerCasedTagName === <span class="string">&quot;p&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">start</span>) &#123;</span><br><span class="line">          options.<span class="title function_">start</span>(tagName, [], <span class="literal">false</span>, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="property">end</span>) &#123;</span><br><span class="line">          options.<span class="title function_">end</span>(tagName, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)(</span><br><span class="line">  <span class="comment">// 解析文本</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> textEnd = html.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;&quot;</span>);</span><br><span class="line">    <span class="comment">// &#x27;&lt;&#x27; 在第一个位置，为其余5种类型</span></span><br><span class="line">    <span class="keyword">if</span> (textEnd === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// &#x27;&lt;&#x27; 不在第一个位置，文本开头</span></span><br><span class="line">    <span class="keyword">if</span> (textEnd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果html字符串不是以&#x27;&lt;&#x27;开头,说明&#x27;&lt;&#x27;前面的都是纯文本，无需处理</span></span><br><span class="line">      <span class="comment">// 那就把&#x27;&lt;&#x27;以后的内容拿出来赋给rest</span></span><br><span class="line">      rest = html.<span class="title function_">slice</span>(textEnd);</span><br><span class="line">      <span class="keyword">while</span> (</span><br><span class="line">        !endTag.<span class="title function_">test</span>(rest) &amp;&amp;</span><br><span class="line">        !startTagOpen.<span class="title function_">test</span>(rest) &amp;&amp;</span><br><span class="line">        !comment.<span class="title function_">test</span>(rest) &amp;&amp;</span><br><span class="line">        !conditionalComment.<span class="title function_">test</span>(rest)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// &lt; in plain text, be forgiving and treat it as text</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用&#x27;&lt;&#x27;以后的内容rest去匹配endTag、startTagOpen、comment、conditionalComment</span></span><br><span class="line"><span class="comment">         * 如果都匹配不上，表示&#x27;&lt;&#x27;是属于文本本身的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 在&#x27;&lt;&#x27;之后查找是否还有&#x27;&lt;&#x27;</span></span><br><span class="line">        next = rest.<span class="title function_">indexOf</span>(<span class="string">&quot;&lt;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 如果没有了，表示&#x27;&lt;&#x27;后面也是文本</span></span><br><span class="line">        <span class="keyword">if</span> (next &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// 如果还有，表示&#x27;&lt;&#x27;是文本中的一个字符</span></span><br><span class="line">        textEnd += next;</span><br><span class="line">        <span class="comment">// 那就把next之后的内容截出来继续下一轮循环匹配</span></span><br><span class="line">        rest = html.<span class="title function_">slice</span>(textEnd);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// &#x27;&lt;&#x27;是结束标签的开始 ,说明从开始到&#x27;&lt;&#x27;都是文本，截取出来</span></span><br><span class="line">      text = html.<span class="title function_">substring</span>(<span class="number">0</span>, textEnd);</span><br><span class="line">      <span class="title function_">advance</span>(textEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 整个模板字符串里没有找到`&lt;`,说明整个模板字符串都是文本</span></span><br><span class="line">    <span class="keyword">if</span> (textEnd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      text = html;</span><br><span class="line">      html = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把截取出来的text转化成textAST</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">chars</span> &amp;&amp; text) &#123;</span><br><span class="line">      options.<span class="title function_">chars</span>(text);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="parseText"><a href="#parseText" class="headerlink" title="parseText"></a>parseText</h4><blockquote><p>文本解析器，解析静态和动态文本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;我叫&#123;&#123;name&#125;&#125;，我今年&#123;&#123;age&#125;&#125;岁了&quot;</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">parseText</span>(text)</span><br><span class="line">res = &#123;</span><br><span class="line">    <span class="attr">expression</span>:<span class="string">&quot;我叫&quot;</span>+<span class="title function_">_s</span>(name)+<span class="string">&quot;，我今年&quot;</span>+<span class="title function_">_s</span>(age)+<span class="string">&quot;岁了&quot;</span>,</span><br><span class="line">    <span class="attr">tokens</span>:[</span><br><span class="line">        <span class="string">&quot;我叫&quot;</span>,</span><br><span class="line">        &#123;<span class="string">&#x27;@binding&#x27;</span>: name &#125;,</span><br><span class="line">        <span class="string">&quot;，我今年&quot;</span></span><br><span class="line">        &#123;<span class="string">&#x27;@binding&#x27;</span>: age &#125;,</span><br><span class="line">    <span class="string">&quot;岁了&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultTagRE = <span class="regexp">/\&#123;\&#123;((?:.|\n)+?)\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="keyword">const</span> buildRegex = <span class="title function_">cached</span>(<span class="function">(<span class="params">delimiters</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> open = delimiters[<span class="number">0</span>].<span class="title function_">replace</span>(regexEscapeRE, <span class="string">&quot;\\$&amp;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> close = delimiters[<span class="number">1</span>].<span class="title function_">replace</span>(regexEscapeRE, <span class="string">&quot;\\$&amp;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegExp</span>(open + <span class="string">&quot;((?:.|\\n)+?)&quot;</span> + close, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parseText</span>(<span class="params">text, delimiters</span>) &#123;</span><br><span class="line">  <span class="comment">// 一个正则表达式，用来检查文本中是否包含变量</span></span><br><span class="line">  <span class="comment">// delimiters 默认为 &#123;&#123;&#125;&#125;，也可以自定义变量包裹符，比如 %name%</span></span><br><span class="line">  <span class="keyword">const</span> tagRE = delimiters ? <span class="title function_">buildRegex</span>(delimiters) : defaultTagRE;</span><br><span class="line">  <span class="keyword">if</span> (!tagRE.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line">  <span class="keyword">const</span> rawTokens = [];</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * let lastIndex = tagRE.lastIndex = 0</span></span><br><span class="line"><span class="comment">   * 上面这行代码等同于下面这两行代码:</span></span><br><span class="line"><span class="comment">   * tagRE.lastIndex = 0</span></span><br><span class="line"><span class="comment">   * let lastIndex = tagRE.lastIndex</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> lastIndex = (tagRE.<span class="property">lastIndex</span> = <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">let</span> match, index, tokenValue;</span><br><span class="line">  <span class="keyword">while</span> ((match = tagRE.<span class="title function_">exec</span>(text))) &#123;</span><br><span class="line">    index = match.<span class="property">index</span>;</span><br><span class="line">    <span class="comment">// push text token</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt; lastIndex) &#123;</span><br><span class="line">      <span class="comment">// 先把&#x27;&#123;&#123;&#x27;前面的文本放入tokens中</span></span><br><span class="line">      rawTokens.<span class="title function_">push</span>((tokenValue = text.<span class="title function_">slice</span>(lastIndex, index)));</span><br><span class="line">      tokens.<span class="title function_">push</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tokenValue));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// tag token</span></span><br><span class="line">    <span class="comment">// 取出&#x27;&#123;&#123; &#125;&#125;&#x27;中间的变量exp</span></span><br><span class="line">    <span class="keyword">const</span> exp = <span class="title function_">parseFilters</span>(match[<span class="number">1</span>].<span class="title function_">trim</span>());</span><br><span class="line">    <span class="comment">// 把变量exp改成_s(exp)形式也放入tokens中</span></span><br><span class="line">    tokens.<span class="title function_">push</span>(<span class="string">`_s(<span class="subst">$&#123;exp&#125;</span>)`</span>);</span><br><span class="line">    rawTokens.<span class="title function_">push</span>(&#123; <span class="string">&quot;@binding&quot;</span>: exp &#125;);</span><br><span class="line">    <span class="comment">// 设置lastIndex 以保证下一轮循环时，只从&#x27;&#125;&#125;&#x27;后面再开始匹配正则</span></span><br><span class="line">    lastIndex = index + match[<span class="number">0</span>].<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当剩下的text不再被正则匹配上时，表示所有变量已经处理完毕</span></span><br><span class="line">  <span class="comment">// 此时如果lastIndex &lt; text.length，表示在最后一个变量后面还有文本</span></span><br><span class="line">  <span class="comment">// 最后将后面的文本再加入到tokens中</span></span><br><span class="line">  <span class="keyword">if</span> (lastIndex &lt; text.<span class="property">length</span>) &#123;</span><br><span class="line">    rawTokens.<span class="title function_">push</span>((tokenValue = text.<span class="title function_">slice</span>(lastIndex)));</span><br><span class="line">    tokens.<span class="title function_">push</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tokenValue));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后把数组tokens中的所有元素用&#x27;+&#x27;拼接起来</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">expression</span>: tokens.<span class="title function_">join</span>(<span class="string">&quot;+&quot;</span>),</span><br><span class="line">    <span class="attr">tokens</span>: rawTokens,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><blockquote><p>遍历 AST，找出其中的静态节点，并打上标记，从而在 patch 过程中，diff 算法直接跳过静态节点，减少比较的过程</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">optimize</span>(<span class="params">root, options</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">  isStaticKey = <span class="title function_">genStaticKeysCached</span>(options.<span class="property">staticKeys</span> || <span class="string">&quot;&quot;</span>);</span><br><span class="line">  isPlatformReservedTag = options.<span class="property">isReservedTag</span> || no;</span><br><span class="line">  <span class="comment">// 标记静态节点</span></span><br><span class="line">  <span class="title function_">markStatic</span>(root);</span><br><span class="line">  <span class="comment">// 标记静态根节点</span></span><br><span class="line">  <span class="title function_">markStaticRoots</span>(root, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记静态节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">markStatic</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  node.<span class="property">static</span> = <span class="title function_">isStatic</span>(node);</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 元素节点递归遍历子节点</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !<span class="title function_">isPlatformReservedTag</span>(node.<span class="property">tag</span>) &amp;&amp;</span><br><span class="line">      node.<span class="property">tag</span> !== <span class="string">&quot;slot&quot;</span> &amp;&amp;</span><br><span class="line">      node.<span class="property">attrsMap</span>[<span class="string">&quot;inline-template&quot;</span>] == <span class="literal">null</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = node.<span class="property">children</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> child = node.<span class="property">children</span>[i];</span><br><span class="line">      <span class="title function_">markStatic</span>(child);</span><br><span class="line">      <span class="keyword">if</span> (!child.<span class="property">static</span>) &#123;</span><br><span class="line">        <span class="comment">// 若有一个子节点为非静态节点，则当前节点标记为非静态节点</span></span><br><span class="line">        node.<span class="property">static</span> = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不在 children 中的子节点，比如被 v-if 隐藏了</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">ifConditions</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, l = node.<span class="property">ifConditions</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> block = node.<span class="property">ifConditions</span>[i].<span class="property">block</span>;</span><br><span class="line">        <span class="title function_">markStatic</span>(block);</span><br><span class="line">        <span class="keyword">if</span> (!block.<span class="property">static</span>) &#123;</span><br><span class="line">          node.<span class="property">static</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isStatic</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 包含变量的动态文本节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 不包含变量的纯文本节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 元素节点判断</span></span><br><span class="line">  <span class="keyword">return</span> !!(</span><br><span class="line">    node.<span class="property">pre</span> || <span class="comment">// 使用了v-pre指令，则是静态节点</span></span><br><span class="line">    (!node.<span class="property">hasBindings</span> &amp;&amp; <span class="comment">// 不能使用动态绑定语法，即标签上不能有v-、@、:开头的属性</span></span><br><span class="line">      !node.<span class="property">if</span> &amp;&amp;</span><br><span class="line">      !node.<span class="property">for</span> &amp;&amp; <span class="comment">// 不能使用v-if、v-else、v-for指令</span></span><br><span class="line">      !<span class="title function_">isBuiltInTag</span>(node.<span class="property">tag</span>) &amp;&amp; <span class="comment">// 不能是内置组件，即标签名不能是slot和component</span></span><br><span class="line">      <span class="title function_">isPlatformReservedTag</span>(node.<span class="property">tag</span>) &amp;&amp; <span class="comment">// 标签名必须是平台保留标签，即不能是组件</span></span><br><span class="line">      !<span class="title function_">isDirectChildOfTemplateFor</span>(node) &amp;&amp; <span class="comment">// 当前节点的父节点不能是带有 v-for 的 template 标签</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(node).<span class="title function_">every</span>(isStaticKey)) <span class="comment">// 节点的所有属性的 key 都必须是静态节点才有的 key，注: 静态节点的key是有限的，它只能是type,tag,attrsList,attrsMap,plain,parent,children,attrs之一</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记静态根节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">markStaticRoots</span>(<span class="params">node, isInFor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">static</span> || node.<span class="property">once</span>) &#123;</span><br><span class="line">      node.<span class="property">staticInFor</span> = isInFor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为了使节点有资格作为静态根节点，它应具有不只是静态文本的子节点。 否则，优化的成本将超过收益，最好始终将其更新。</span></span><br><span class="line">    <span class="comment">// 1. 节点本身必须是静态节点</span></span><br><span class="line">    <span class="comment">// 2. 必须拥有子节点 children</span></span><br><span class="line">    <span class="comment">// 3. 子节点不能只是只有一个文本节点</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      node.<span class="property">static</span> &amp;&amp;</span><br><span class="line">      node.<span class="property">children</span>.<span class="property">length</span> &amp;&amp;</span><br><span class="line">      !(node.<span class="property">children</span>.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; node.<span class="property">children</span>[<span class="number">0</span>].<span class="property">type</span> === <span class="number">3</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      node.<span class="property">staticRoot</span> = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      node.<span class="property">staticRoot</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前节点不是静态根节点，那就继续递归遍历它的子节点node.children和node.ifConditions</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = node.<span class="property">children</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="title function_">markStaticRoots</span>(node.<span class="property">children</span>[i], isInFor || !!node.<span class="property">for</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">ifConditions</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, l = node.<span class="property">ifConditions</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="title function_">markStaticRoots</span>(node.<span class="property">ifConditions</span>[i].<span class="property">block</span>, isInFor);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><blockquote><p>将 AST 转换成渲染函数，生成 render 函数字符串</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generate</span>(<span class="params">ast, option</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="keyword">new</span> <span class="title class_">CodegenState</span>(options);</span><br><span class="line">  <span class="keyword">const</span> code = ast ? <span class="title function_">genElement</span>(ast, state) : <span class="string">&#x27;_c(&quot;div&quot;)&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="string">`with(this)&#123;return <span class="subst">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class="line">    <span class="attr">staticRenderFns</span>: state.<span class="property">staticRenderFns</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终生成: 元素节点，文本节点，注释节点</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genElement</span>(<span class="params">el, state</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">staticRoot</span> &amp;&amp; !el.<span class="property">staticProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genStatic</span>(el, state);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">once</span> &amp;&amp; !el.<span class="property">onceProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genOnce</span>(el, state);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">for</span> &amp;&amp; !el.<span class="property">forProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genFor</span>(el, state);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">if</span> &amp;&amp; !el.<span class="property">ifProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genIf</span>(el, state);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&quot;template&quot;</span> &amp;&amp; !el.<span class="property">slotTarget</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genChildren</span>(el, state) || <span class="string">&quot;void 0&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&quot;slot&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genSlot</span>(el, state);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// component or element</span></span><br><span class="line">    <span class="keyword">let</span> code;</span><br><span class="line">    <span class="keyword">if</span> (el.<span class="property">component</span>) &#123;</span><br><span class="line">      code = <span class="title function_">genComponent</span>(el.<span class="property">component</span>, el, state);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> data = el.<span class="property">plain</span> ? <span class="literal">undefined</span> : <span class="title function_">genData</span>(el, state);</span><br><span class="line">      <span class="keyword">const</span> children = el.<span class="property">inlineTemplate</span> ? <span class="literal">null</span> : <span class="title function_">genChildren</span>(el, state, <span class="literal">true</span>);</span><br><span class="line">      code = <span class="string">`_c(&#x27;<span class="subst">$&#123;el.tag&#125;</span>&#x27;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        data ? <span class="string">`,<span class="subst">$&#123;data&#125;</span>`</span> : <span class="string">&quot;&quot;</span> // data</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">&quot;&quot;</span> // children</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// module transforms</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; state.<span class="property">transforms</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      code = state.<span class="property">transforms</span>[i](el, code);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成元素节点 _c</span></span><br><span class="line"><span class="keyword">const</span> data = el.<span class="property">plain</span> ? <span class="literal">undefined</span> : <span class="title function_">genData</span>(el, state);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> children = el.<span class="property">inlineTemplate</span> ? <span class="literal">null</span> : <span class="title function_">genChildren</span>(el, state, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 节点的标签名tagName，节点属性data，节点的子节点列表children</span></span><br><span class="line">code = <span class="string">`_c(&#x27;<span class="subst">$&#123;el.tag&#125;</span>&#x27;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  data ? <span class="string">`,<span class="subst">$&#123;data&#125;</span>`</span> : <span class="string">&quot;&quot;</span> // data</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">  children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">&quot;&quot;</span> // children</span></span></span><br><span class="line"><span class="subst"><span class="string">&#125;</span>)`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点属性data</span></span><br><span class="line"><span class="comment">// 逻辑: 在拼接字符串，先给data赋值为一个&#123;，然后判断存在哪些属性数据，就将这些数据拼接到data中，最后再加一个&#125;，最终得到节点全部属性data</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genData</span>(<span class="params">el, state</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> dirs = <span class="title function_">genDirectives</span>(el, state);</span><br><span class="line">  <span class="keyword">if</span> (dirs) data += dirs + <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// key</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">key</span>) &#123;</span><br><span class="line">    data += <span class="string">`key:<span class="subst">$&#123;el.key&#125;</span>,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ref</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">ref</span>) &#123;</span><br><span class="line">    data += <span class="string">`ref:<span class="subst">$&#123;el.ref&#125;</span>,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">refInFor</span>) &#123;</span><br><span class="line">    data += <span class="string">`refInFor:true,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// pre</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">pre</span>) &#123;</span><br><span class="line">    data += <span class="string">`pre:true,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 自定义事件</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">events</span>) &#123;</span><br><span class="line">    data += <span class="string">`<span class="subst">$&#123;genHandlers(el.events, <span class="literal">false</span>, state.warn)&#125;</span>,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 浏览器原生事件</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">nativeEvents</span>) &#123;</span><br><span class="line">    data += <span class="string">`<span class="subst">$&#123;genHandlers(el.nativeEvents, <span class="literal">true</span>, state.warn)&#125;</span>,`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 篇幅所限，省略其他情况的判断</span></span><br><span class="line">  data = data.<span class="title function_">replace</span>(<span class="regexp">/,$/</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子节点列表children</span></span><br><span class="line"><span class="comment">// 遍历AST的children属性中的元素，然后根据元素属性的不同生成不同的VNode创建函数调用字符串</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genChildren</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (children.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`[<span class="subst">$&#123;children.map((c) =&gt; genNode(c, state)).join(<span class="string">&quot;,&quot;</span>)&#125;</span>]`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">genNode</span>(<span class="params">node, state</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genElement</span>(node, state);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">3</span> &amp;&amp; node.<span class="property">isComment</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genComment</span>(node);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genText</span>(node);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成文本节点 _v</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genText</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`_v(<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    text.type === <span class="number">2</span></span></span></span><br><span class="line"><span class="subst"><span class="string">      ? text.expression // no need <span class="keyword">for</span> () because already wrapped <span class="keyword">in</span> _s()</span></span></span><br><span class="line"><span class="subst"><span class="string">      : transformSpecialNewlines(<span class="built_in">JSON</span>.stringify(text.text))</span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成注释节点 _e</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genComment</span>(<span class="params">comment</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`_e(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(comment.text)&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h3><ol><li>挂载调用全局实例方法 $mount</li><li>最开始调用的 compileToFunctions 函数内部调用了 compile 函数</li><li>在 compile 函数内部又调用了 baseCompile 函数</li><li>而 baseCompile 函数返回的是代码生成阶段生成好的 render 函数字符串，在 compileToFunctions 函数内部调用 compile 函数就可以拿到生成好的 render 函数字符串</li><li>在 compileToFunction s 函数内部将 render 函数字符串传给 createFunction 函数从而变成真正的 render 函数返回出去</li><li>最后将其赋值给 options.render</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$mount</span> = <span class="keyword">function</span> (<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span>;</span><br><span class="line">  <span class="comment">// 如果用户没有手写render函数</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">render</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取模板，先尝试获取内部模板，如果获取不到则获取外部模板</span></span><br><span class="line">    <span class="keyword">let</span> template = options.<span class="property">template</span>;</span><br><span class="line">    <span class="keyword">if</span> (template) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      template = <span class="title function_">getOuterHTML</span>(el);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = <span class="title function_">compileToFunctions</span>(</span><br><span class="line">      template,</span><br><span class="line">      &#123;</span><br><span class="line">        shouldDecodeNewlines,</span><br><span class="line">        shouldDecodeNewlinesForHref,</span><br><span class="line">        <span class="attr">delimiters</span>: options.<span class="property">delimiters</span>,</span><br><span class="line">        <span class="attr">comments</span>: options.<span class="property">comments</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="variable language_">this</span></span><br><span class="line">    );</span><br><span class="line">    options.<span class="property">render</span> = render;</span><br><span class="line">    options.<span class="property">staticRenderFns</span> = staticRenderFns;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; render, staticRenderFns &#125; = <span class="title function_">compileToFunctions</span>(</span><br><span class="line">  template,</span><br><span class="line">  &#123;</span><br><span class="line">    shouldDecodeNewlines,</span><br><span class="line">    shouldDecodeNewlinesForHref,</span><br><span class="line">    <span class="attr">delimiters</span>: options.<span class="property">delimiters</span>,</span><br><span class="line">    <span class="attr">comments</span>: options.<span class="property">comments</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; compile, compileToFunctions &#125; = <span class="title function_">createCompiler</span>(baseOptions);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createCompilerCreator</span>(<span class="params">baseCompile</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">createCompiler</span>(<span class="params">baseOptions</span>) &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCompiler</span>(<span class="params">baseOptions</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">compile</span>(<span class="params">template, options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> compiled = <span class="title function_">baseCompile</span>(template, finalOptions);</span><br><span class="line">    compiled.<span class="property">errors</span> = errors;</span><br><span class="line">    compiled.<span class="property">tips</span> = tips;</span><br><span class="line">    <span class="keyword">return</span> compiled;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    compile,</span><br><span class="line">    <span class="attr">compileToFunctions</span>: <span class="title function_">createCompileToFunctionFn</span>(compile),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createCompileToFunctionFn</span>(<span class="params">compile</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">compileToFunctions</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// compile</span></span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> compiled = <span class="title function_">compile</span>(template, options);</span><br><span class="line">    res.<span class="property">render</span> = <span class="title function_">createFunction</span>(compiled.<span class="property">render</span>, fnGenErrors);</span><br><span class="line">    res.<span class="property">staticRenderFns</span> = compiled.<span class="property">staticRenderFns</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createFunction</span>(code, fnGenErrors);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createFunction</span>(<span class="params">code, errors</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>(code);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errors.<span class="title function_">push</span>(&#123; err, code &#125;);</span><br><span class="line">    <span class="keyword">return</span> noop;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 Diff</title>
      <link href="/articles/vue/domDiff/"/>
      <url>/articles/vue/domDiff/</url>
      
        <content type="html"><![CDATA[<h2 id="Vdom"><a href="#Vdom" class="headerlink" title="Vdom"></a>Vdom</h2><h3 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="attr">tag</span>?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">data</span>?: <span class="title class_">VNodeData</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">children</span>?: ?<span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt;,</span></span><br><span class="line"><span class="params">    <span class="attr">text</span>?: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">elm</span>?: <span class="title class_">Node</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">context</span>?: <span class="title class_">Component</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">componentOptions</span>?: <span class="title class_">VNodeComponentOptions</span>,</span></span><br><span class="line"><span class="params">    <span class="attr">asyncFactory</span>?: <span class="title class_">Function</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tag</span> = tag; <span class="comment">/*当前节点的标签名*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> =</span><br><span class="line">      data; <span class="comment">/*当前节点对应的对象，包含了具体的一些数据信息，是一个VNodeData类型，可以参考VNodeData类型中的数据信息*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = children; <span class="comment">/*当前节点的子节点，是一个数组*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">text</span> = text; <span class="comment">/*当前节点的文本*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elm</span> = elm; <span class="comment">/*当前虚拟节点对应的真实dom节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ns</span> = <span class="literal">undefined</span>; <span class="comment">/*当前节点的名字空间*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context; <span class="comment">/*当前组件节点对应的Vue实例*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnContext</span> = <span class="literal">undefined</span>; <span class="comment">/*函数式组件对应的Vue实例*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnOptions</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnScopeId</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = data &amp;&amp; data.<span class="property">key</span>; <span class="comment">/*节点的key属性，被当作节点的标志，用以优化*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentOptions</span> = componentOptions; <span class="comment">/*组件的option选项*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentInstance</span> = <span class="literal">undefined</span>; <span class="comment">/*当前节点对应的组件的实例*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="literal">undefined</span>; <span class="comment">/*当前节点的父节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">raw</span> =</span><br><span class="line">      <span class="literal">false</span>; <span class="comment">/*简而言之就是是否为原生HTML或只是普通文本，innerHTML的时候为true，textContent的时候为false*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isStatic</span> = <span class="literal">false</span>; <span class="comment">/*静态节点标志*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isRootInsert</span> = <span class="literal">true</span>; <span class="comment">/*是否作为跟节点插入*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isComment</span> = <span class="literal">false</span>; <span class="comment">/*是否为注释节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCloned</span> = <span class="literal">false</span>; <span class="comment">/*是否为克隆节点*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isOnce</span> = <span class="literal">false</span>; <span class="comment">/*是否有v-once指令*/</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncFactory</span> = asyncFactory;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncMeta</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAsyncPlaceholder</span> = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">child</span>(): <span class="title class_">Component</span> | <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">componentInstance</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><h4 id="注释节点"><a href="#注释节点" class="headerlink" title="注释节点"></a>注释节点</h4><blockquote><p>createEmptyVNode + isComment</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createEmptyVNode</span> = (<span class="params"><span class="attr">text</span>: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">VNode</span>();</span><br><span class="line">  node.<span class="property">text</span> = text;</span><br><span class="line">  node.<span class="property">isComment</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h4><blockquote><p>createTextVNode</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createTextVNode</span>(<span class="params"><span class="attr">val</span>: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VNode</span>(<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="title class_">String</span>(val));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h4><blockquote><p>tag attributes</p></blockquote><h4 id="组件节点"><a href="#组件节点" class="headerlink" title="组件节点"></a>组件节点</h4><blockquote><p>组件节点除了有元素节点具有的属性之外，它还有两个特有的属性</p><ul><li>componentOptions: 组件的 option 选项，如组件的 props 等</li><li>componentInstance: 当前组件节点对应的 Vue 实例</li></ul></blockquote><h4 id="函数式组件节点"><a href="#函数式组件节点" class="headerlink" title="函数式组件节点"></a>函数式组件节点</h4><blockquote><p>函数式组件节点相较于组件节点，它又有两个特有的属性</p><ul><li>fnContext: 函数式组件对应的 Vue 实例</li><li>fnOptions: 组件的 option 选项</li></ul></blockquote><h4 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h4><blockquote><p>cloneVNode + isCloned</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cloneVNode</span>(<span class="params"><span class="attr">vnode</span>: <span class="title class_">VNode</span></span>): <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cloned = <span class="keyword">new</span> <span class="title class_">VNode</span>(</span><br><span class="line">    vnode.<span class="property">tag</span>,</span><br><span class="line">    vnode.<span class="property">data</span>,</span><br><span class="line">    vnode.<span class="property">children</span>,</span><br><span class="line">    vnode.<span class="property">text</span>,</span><br><span class="line">    vnode.<span class="property">elm</span>,</span><br><span class="line">    vnode.<span class="property">context</span>,</span><br><span class="line">    vnode.<span class="property">componentOptions</span>,</span><br><span class="line">    vnode.<span class="property">asyncFactory</span></span><br><span class="line">  );</span><br><span class="line">  cloned.<span class="property">ns</span> = vnode.<span class="property">ns</span>;</span><br><span class="line">  cloned.<span class="property">isStatic</span> = vnode.<span class="property">isStatic</span>;</span><br><span class="line">  cloned.<span class="property">key</span> = vnode.<span class="property">key</span>;</span><br><span class="line">  cloned.<span class="property">isComment</span> = vnode.<span class="property">isComment</span>;</span><br><span class="line">  cloned.<span class="property">fnContext</span> = vnode.<span class="property">fnContext</span>;</span><br><span class="line">  cloned.<span class="property">fnOptions</span> = vnode.<span class="property">fnOptions</span>;</span><br><span class="line">  cloned.<span class="property">fnScopeId</span> = vnode.<span class="property">fnScopeId</span>;</span><br><span class="line">  cloned.<span class="property">asyncMeta</span> = vnode.<span class="property">asyncMeta</span>;</span><br><span class="line">  cloned.<span class="property">isCloned</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> cloned;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dom-Diff"><a href="#Dom-Diff" class="headerlink" title="Dom-Diff"></a>Dom-Diff</h2><blockquote><p>patch 过程，主要有三个过程，创建节点，删除节点，更新节点</p></blockquote><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><blockquote><p>新的 VNode 中有而旧的 oldVNode 中没有，就在旧的 oldVNode 中创建。判断三类节点</p><ul><li>元素节点: 判断该 VNode 节点是否有 tag 标签 + createElement</li><li>注释节点: isComment + createComment</li><li>文本节点: createTextNode</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createElm</span>(<span class="params">vnode, parentElm, refElm</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = vnode.<span class="property">data</span>;</span><br><span class="line">  <span class="keyword">const</span> children = vnode.<span class="property">children</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = vnode.<span class="property">tag</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(tag)) &#123;</span><br><span class="line">    vnode.<span class="property">elm</span> = nodeOps.<span class="title function_">createElement</span>(tag, vnode); <span class="comment">// 创建元素节点</span></span><br><span class="line">    <span class="title function_">createChildren</span>(vnode, children, insertedVnodeQueue); <span class="comment">// 创建元素节点的子节点</span></span><br><span class="line">    <span class="title function_">insert</span>(parentElm, vnode.<span class="property">elm</span>, refElm); <span class="comment">// 插入到DOM中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isTrue</span>(vnode.<span class="property">isComment</span>)) &#123;</span><br><span class="line">    vnode.<span class="property">elm</span> = nodeOps.<span class="title function_">createComment</span>(vnode.<span class="property">text</span>); <span class="comment">// 创建注释节点</span></span><br><span class="line">    <span class="title function_">insert</span>(parentElm, vnode.<span class="property">elm</span>, refElm); <span class="comment">// 插入到DOM中</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vnode.<span class="property">elm</span> = nodeOps.<span class="title function_">createTextNode</span>(vnode.<span class="property">text</span>); <span class="comment">// 创建文本节点</span></span><br><span class="line">    <span class="title function_">insert</span>(parentElm, vnode.<span class="property">elm</span>, refElm); <span class="comment">// 插入到DOM中</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><blockquote><p>新的 VNode 中没有而旧的 oldVNode 中有，就从旧的 oldVNode 中删除</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeNode</span>(<span class="params">el</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parent = nodeOps.<span class="title function_">parentNode</span>(el); <span class="comment">// 获取父节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(parent)) &#123;</span><br><span class="line">    nodeOps.<span class="title function_">removeChild</span>(parent, el); <span class="comment">// 调用父节点的removeChild方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><blockquote><p>新的 VNode 和旧的 oldVNode 中都有，就以新的 VNode 为准，更新旧的 oldVNode。分为几种情况</p></blockquote><p>VNode / oldVNode 均为静态节点</p><blockquote><p>isStatic，跳过，无需处理</p></blockquote><p>VNode 为文本节点</p><p><img src="/images/vue/diff_1.png" alt=""></p><p>VNode 为元素节点</p><p><img src="/images/vue/diff_2.png" alt=""></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">patchVnode</span>(<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) &#123;</span><br><span class="line">  <span class="comment">// vnode与oldVnode是否完全一样？若是，退出程序</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> elm = (vnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// vnode与oldVnode是否都是静态节点？若是，退出程序</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="title function_">isTrue</span>(vnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">    <span class="title function_">isTrue</span>(oldVnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">    vnode.<span class="property">key</span> === oldVnode.<span class="property">key</span> &amp;&amp;</span><br><span class="line">    (<span class="title function_">isTrue</span>(vnode.<span class="property">isCloned</span>) || <span class="title function_">isTrue</span>(vnode.<span class="property">isOnce</span>))</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.<span class="property">children</span>;</span><br><span class="line">  <span class="keyword">const</span> ch = vnode.<span class="property">children</span>;</span><br><span class="line">  <span class="comment">// vnode有text属性？若没有: </span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(vnode.<span class="property">text</span>)) &#123;</span><br><span class="line">    <span class="comment">// vnode的子节点与oldVnode的子节点是否都存在？</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh) &amp;&amp; <span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">      <span class="comment">// 若都存在，判断子节点是否相同，不同则更新子节点</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch)</span><br><span class="line">        <span class="title function_">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若只有vnode的子节点存在</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 判断oldVnode是否有文本？</span></span><br><span class="line"><span class="comment">       * 若没有，则把vnode的子节点添加到真实DOM中</span></span><br><span class="line"><span class="comment">       * 若有，则清空Dom中的文本，再把vnode的子节点添加到真实DOM中</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="title function_">addVnodes</span>(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.<span class="property">length</span> - <span class="number">1</span>, insertedVnodeQueue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若只有oldnode的子节点存在</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 清空DOM中的子节点</span></span><br><span class="line">      <span class="title function_">removeVnodes</span>(elm, oldCh, <span class="number">0</span>, oldCh.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若vnode和oldnode都没有子节点，但是oldnode中有文本</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) &#123;</span><br><span class="line">      <span class="comment">// 清空oldnode文本</span></span><br><span class="line">      nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 上面两个判断一句话概括就是，如果vnode中既没有text，也没有子节点，那么对应的oldnode中有什么就清空什么</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若有，vnode的text属性与oldVnode的text属性是否相同？</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.<span class="property">text</span> !== vnode.<span class="property">text</span>) &#123;</span><br><span class="line">    <span class="comment">// 若不相同: 则用vnode的text替换真实DOM的文本</span></span><br><span class="line">    nodeOps.<span class="title function_">setTextContent</span>(elm, vnode.<span class="property">text</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新子节点"><a href="#更新子节点" class="headerlink" title="更新子节点"></a>更新子节点</h4><blockquote><p>双层循环遍历 newChildren 和 oldChildren: 每循环外层 newChildren 数组里的一个子节点，就去内层 oldChildren 数组里找看有没有与之相同的子节点。分为几种情况</p></blockquote><h5 id="创建子节点"><a href="#创建子节点" class="headerlink" title="创建子节点"></a>创建子节点</h5><blockquote><p>newChildren 里有，而 oldChildren 里没有: 创建节点，创建好之后再把它插入到 DOM 中合适的位置</p></blockquote><div class="tip warning"><p>合适的位置是所有未处理节点之前，而并非所有已处理节点之后</p></div><blockquote><p>下图节点顺序插入出错</p></blockquote><p><img src="/images/vue/diff_3.png" alt=""></p><h5 id="删除子节点"><a href="#删除子节点" class="headerlink" title="删除子节点"></a>删除子节点</h5><blockquote><p>newChildren 里没有，而 oldChildren 里有</p></blockquote><h5 id="更新子节点-1"><a href="#更新子节点-1" class="headerlink" title="更新子节点"></a>更新子节点</h5><blockquote><p>newChildren 里有，且 oldChildren 里有，且位置相同</p></blockquote><h5 id="移动子节点"><a href="#移动子节点" class="headerlink" title="移动子节点"></a>移动子节点</h5><blockquote><p>newChildren 里有，且 oldChildren 里有，但位置不同: 以 newChildren 里子节点的位置为基准，调整 oldChildren 里该节点的位置，使之与在 newChildren 里的位置相同</p><ul><li>以 newChildren 里子节点的位置为基准，调整 oldChildren 里该节点的位置</li></ul></blockquote><div class="tip warning"><p>所有未处理节点之前就是要移动的目的位置</p></div><h3 id="diff-对比过程"><a href="#diff-对比过程" class="headerlink" title="diff 对比过程"></a>diff 对比过程</h3><blockquote><p>对比顺序: 4 指针双向遍历</p><ul><li>newStartIdx: newChildren 数组里开始位置的下标</li><li>newEndIdx: newChildren 数组里结束位置的下标</li><li>oldStartIdx: oldChildren 数组里开始位置的下标</li><li>oldEndIdx: oldChildren 数组里结束位置的下标</li><li>在循环的时候，每处理一个节点，newStartIdx 和 oldStartIdx 往后 +1 (只会加)，newEndIdx 和 oldEndIdx 往前 -1 (只会减)，当开始位置大于结束位置时，表示所有节点都已经遍历过了</li></ul></blockquote><h4 id="优化前策略"><a href="#优化前策略" class="headerlink" title="优化前策略"></a>优化前策略</h4><ol><li>如果 oldStartVnode 不存在，则直接跳过，将 oldStartIdx 加 1，比对下一个</li><li>如果 oldEndVnode 不存在，则直接跳过，将 oldEndIdx 减 1，比对前一个</li><li>如果新前与旧前节点相同，就把两个节点进行 patch 更新，同时 oldStartIdx 和 newStartIdx 都加 1，后移一个位置</li><li>如果新后与旧后节点相同，就把两个节点进行 patch 更新，同时 oldEndIdx 和 newEndIdx 都减 1，前移一个位置</li><li>如果新后与旧前节点相同，先把两个节点进行 patch 更新，然后把旧前节点移动到 oldChilren 中所有未处理节点之后，最后把 oldStartIdx 加 1，后移一个位置，newEndIdx 减 1，前移一个位置</li><li>如果新前与旧后节点相同，先把两个节点进行 patch 更新，然后把旧后节点移动到 oldChilren 中所有未处理节点之前，最后把 newStartIdx 加 1，后移一个位置，oldEndIdx 减 1，前移一个位置</li><li>如果不属于以上四种情况，就进行常规的循环比对 patch</li><li>如果在循环中，oldStartIdx 大于 oldEndIdx 了，表示 oldChildren 比 newChildren 先循环完毕，那么 newChildren 里面剩余的节点都是需要新增的节点，把[newStartIdx, newEndIdx]之间的所有节点都插入到 DOM 中</li><li>如果在循环中，newStartIdx 大于 newEndIdx 了，表示 newChildren 比 oldChildren 先循环完毕，那么 oldChildren 里面剩余的节点都是需要删除的节点，把[oldStartIdx, oldEndIdx]之间的所有节点都删除</li></ol><h4 id="优化后策略"><a href="#优化后策略" class="headerlink" title="优化后策略"></a>优化后策略</h4><ol><li>新前比旧前: 相同则进入更新节点流程，不同则进入下一步</li><li>新后比旧后: 相同则进入更新节点流程，不同则进入下一步</li><li>新后比旧前: 相同则进入更新节点流程，更新完后再将旧前移动到 oldVNode 数组中所有未处理节点之后，不同则进入下一步</li><li>新前比旧后: 相同则进入更新节点流程，更新完后再将旧后移动到 oldVNode 数组中所有未处理节点之前，不同则通过之前的循环方式查找</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环更新子节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateChildren</span>(<span class="params"></span></span><br><span class="line"><span class="params">  parentElm,</span></span><br><span class="line"><span class="params">  oldCh,</span></span><br><span class="line"><span class="params">  newCh,</span></span><br><span class="line"><span class="params">  insertedVnodeQueue,</span></span><br><span class="line"><span class="params">  removeOnly</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>; <span class="comment">// oldChildren开始索引</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span>; <span class="comment">// oldChildren结束索引</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]; <span class="comment">// oldChildren中所有未处理节点中的第一个</span></span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]; <span class="comment">// oldChildren中所有未处理节点中的最后一个</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span>; <span class="comment">// newChildren开始索引</span></span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span>; <span class="comment">// newChildren结束索引</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]; <span class="comment">// newChildren中所有未处理节点中的第一个</span></span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]; <span class="comment">// newChildren中所有未处理节点中的最后一个</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// removeOnly is a special flag used only by &lt;transition-group&gt;</span></span><br><span class="line">  <span class="comment">// to ensure removed elements stay in correct relative positions</span></span><br><span class="line">  <span class="comment">// during leaving transitions</span></span><br><span class="line">  <span class="keyword">const</span> canMove = !removeOnly;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&quot;production&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">checkDuplicateKeys</span>(newCh);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以&quot;新前&quot;、&quot;新后&quot;、&quot;旧前&quot;、&quot;旧后&quot;的方式开始比对节点</span></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldStartVnode)) &#123;</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]; <span class="comment">// 如果oldStartVnode不存在，则直接跳过，比对下一个</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldEndVnode)) &#123;</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 如果新前与旧前节点相同，就把两个节点进行patch更新</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 如果新后与旧后节点相同，就把两个节点进行patch更新</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// Vnode moved right</span></span><br><span class="line">      <span class="comment">// 如果新后与旧前节点相同，先把两个节点进行patch更新，然后把旧前节点移动到oldChilren中所有未处理节点之后</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      canMove &amp;&amp;</span><br><span class="line">        nodeOps.<span class="title function_">insertBefore</span>(</span><br><span class="line">          parentElm,</span><br><span class="line">          oldStartVnode.<span class="property">elm</span>,</span><br><span class="line">          nodeOps.<span class="title function_">nextSibling</span>(oldEndVnode.<span class="property">elm</span>)</span><br><span class="line">        );</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// Vnode moved left</span></span><br><span class="line">      <span class="comment">// 如果新前与旧后节点相同，先把两个节点进行patch更新，然后把旧后节点移动到oldChilren中所有未处理节点之前</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      canMove &amp;&amp;</span><br><span class="line">        nodeOps.<span class="title function_">insertBefore</span>(parentElm, oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果不属于以上四种情况，就进行常规的循环比对patch</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldKeyToIdx))</span><br><span class="line">        oldKeyToIdx = <span class="title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">      idxInOld = <span class="title function_">isDef</span>(newStartVnode.<span class="property">key</span>)</span><br><span class="line">        ? oldKeyToIdx[newStartVnode.<span class="property">key</span>]</span><br><span class="line">        : <span class="title function_">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">      <span class="comment">// 如果在oldChildren里找不到当前循环的newChildren里的子节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(idxInOld)) &#123;</span><br><span class="line">        <span class="comment">// New element</span></span><br><span class="line">        <span class="comment">// 新增节点并插入到合适位置</span></span><br><span class="line">        <span class="title function_">createElm</span>(</span><br><span class="line">          newStartVnode,</span><br><span class="line">          insertedVnodeQueue,</span><br><span class="line">          parentElm,</span><br><span class="line">          oldStartVnode.<span class="property">elm</span>,</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          newCh,</span><br><span class="line">          newStartIdx</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果在oldChildren里找到了当前循环的newChildren里的子节点</span></span><br><span class="line">        vnodeToMove = oldCh[idxInOld];</span><br><span class="line">        <span class="comment">// 如果两个节点相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">          <span class="comment">// 调用patchVnode更新节点</span></span><br><span class="line">          <span class="title function_">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue);</span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span>;</span><br><span class="line">          <span class="comment">// canmove表示是否需要移动节点，如果为true表示需要移动，则移动节点，如果为false则不用移动</span></span><br><span class="line">          canMove &amp;&amp;</span><br><span class="line">            nodeOps.<span class="title function_">insertBefore</span>(parentElm, vnodeToMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// same key but different element. treat as new element</span></span><br><span class="line">          <span class="title function_">createElm</span>(</span><br><span class="line">            newStartVnode,</span><br><span class="line">            insertedVnodeQueue,</span><br><span class="line">            parentElm,</span><br><span class="line">            oldStartVnode.<span class="property">elm</span>,</span><br><span class="line">            <span class="literal">false</span>,</span><br><span class="line">            newCh,</span><br><span class="line">            newStartIdx</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果oldChildren比newChildren先循环完毕，</span></span><br><span class="line"><span class="comment">     * 那么newChildren里面剩余的节点都是需要新增的节点，</span></span><br><span class="line"><span class="comment">     * 把[newStartIdx, newEndIdx]之间的所有节点都插入到DOM中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    refElm = <span class="title function_">isUndef</span>(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].<span class="property">elm</span>;</span><br><span class="line">    <span class="title function_">addVnodes</span>(</span><br><span class="line">      parentElm,</span><br><span class="line">      refElm,</span><br><span class="line">      newCh,</span><br><span class="line">      newStartIdx,</span><br><span class="line">      newEndIdx,</span><br><span class="line">      insertedVnodeQueue</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果newChildren比oldChildren先循环完毕，</span></span><br><span class="line"><span class="comment">     * 那么oldChildren里面剩余的节点都是需要删除的节点，</span></span><br><span class="line"><span class="comment">     * 把[oldStartIdx, oldEndIdx]之间的所有节点都删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">removeVnodes</span>(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码解析 双向绑定</title>
      <link href="/articles/vue/control/"/>
      <url>/articles/vue/control/</url>
      
        <content type="html"><![CDATA[<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><blockquote><p>vue2.x <a href="https://github.com/vuejs/vue">源码</a></p></blockquote><ol><li>Data 通过 observer 转换成了 getter/setter 的形式来追踪变化</li><li>当外界通过 Watcher 读取数据时，会触发 getter 从而将 Watcher 添加到依赖中</li><li>当数据发生了变化时，会触发 setter，从而向 Dep 中的依赖 (即 Watcher) 发送通知</li><li>Watcher 接收到通知后，向外界发送通知，变化通知到外界后可能会触发视图更新，也有可能触发用户的某个回调函数等</li></ol><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><blockquote><p>监测数据，给数据打上响应式标记: <code>__ob__</code><br>在 getter 中收集依赖，在 setter 中通知依赖更新</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">      <span class="keyword">const</span> augment = hasProto ? protoAugment : copyAument;</span><br><span class="line">      <span class="title function_">augment</span>(value, arrayMethods, arrayKeys);</span><br><span class="line">      <span class="comment">// 深度侦测</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">walk</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, keys[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">observeArray</span>(<span class="params">items</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.<span class="property">lengtgh</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="title function_">observe</span>(items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">&quot;push&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pop&quot;</span>,</span><br><span class="line">  <span class="string">&quot;shift&quot;</span>,</span><br><span class="line">  <span class="string">&quot;unshift&quot;</span>,</span><br><span class="line">  <span class="string">&quot;splice&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>,</span><br><span class="line">  <span class="string">&quot;reverse&quot;</span>,</span><br><span class="line">];</span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> origianl = arrayProto[method];</span><br><span class="line">  <span class="title function_">def</span>(arrayMethods, method, <span class="keyword">function</span> <span class="title function_">mutator</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = origianl.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span>;</span><br><span class="line">    <span class="keyword">let</span> inserted;</span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;shift&quot;</span>:</span><br><span class="line">        inserted = <span class="literal">false</span>; <span class="comment">// 如果是push或shift方法，传参即为新增的元素</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;splice&quot;</span>:</span><br><span class="line">        inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>); <span class="comment">// 如果是splice方法，传入参数列表中下标为2的即为新增的元素</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.<span class="title function_">observeArray</span>(inserted); <span class="comment">// 调用observe函数将新增元素转化为响应式</span></span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> hasProto = <span class="string">&quot;__proto__&quot;</span> <span class="keyword">in</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(arrayMethods);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">protoAugment</span>(<span class="params">target, src</span>) &#123;</span><br><span class="line">  target.<span class="property">__proto__</span> = src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyAument</span>(<span class="params">target, src, keys</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = keys.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i];</span><br><span class="line">    <span class="title function_">def</span>(target, key, src[key]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">def</span>(<span class="params">obj, key, val, enumerable = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">value</span>: val,</span><br><span class="line">    enumerable,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(value) || value <span class="keyword">instanceof</span> <span class="title class_">VNode</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> ob;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(value, <span class="string">&quot;__ob__&quot;</span>) &amp;&amp; value.<span class="property">__ob__</span> <span class="keyword">instanceof</span> <span class="title class_">Observer</span>) &#123;</span><br><span class="line">    ob = value.<span class="property">__ob__</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Observer</span>(val);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">  <span class="keyword">let</span> childOb = <span class="title function_">observe</span>(val);</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">        childOb.<span class="property">dep</span>.<span class="title function_">depend</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</span><br><span class="line">      val = newVal;</span><br><span class="line">      dep.<span class="title function_">notify</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dep"><a href="#Dep" class="headerlink" title="Dep"></a>Dep</h3><blockquote><p>依赖收集器</p><ul><li>渲染页面时碰到插值表达式，v-bind 等需要数据的地方，会实例化一个 watcher</li><li>实例化 watcher 就会对依赖的数据求值，从而触发 getter，数据的 getter 函数就会添加依赖自己的 watcher，从而完成依赖收集</li><li>可以理解为 watcher 在收集依赖，而代码的实现方式是在数据中存储依赖自己的 watcher</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">subs</span>, sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// window.target即为 watcher</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addSub</span>(<span class="variable language_">window</span>.<span class="property">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].<span class="title function_">update</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">remove</span>(<span class="params">arr, item</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = arr.<span class="title function_">indexOf</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h3><blockquote><p>逻辑生成依赖，并添加到 Dep 中</p><p>Watcher 先把自己设置到全局唯一的指定位置 (window.target)，然后读取数据。触发这个数据的 getter。接着，在getter 中就会从全局唯一的那个位置读取当前正在读取数据的 Watcher，并把这个 watcher 收集到 Dep 中去。收集好之后，当数据发生变化时，会向 Dep 中的每个 Watcher 发送通知</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">vm, expOrFn, cb, options, isRenderWatcher</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getter</span> = <span class="title function_">parsePath</span>(expOrFn);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">computed</span> = !!options.<span class="property">computed</span>; <span class="comment">// 是否为计算属性</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="variable language_">this</span>.<span class="property">computed</span>; <span class="comment">// 标志计算属性的返回值是否有变化，用于缓存，true代表重新计算</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getter</span> = expOrFn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">computed</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在模板编译函数中的实例化watcher的，getter中取不到这个实例。解决方法也很简单，将watcher实例放到全局，比如放到window.target上。</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 不能写window.target = new Watcher()。因为执行到getter的时候，实例化watcher还没有完成，所以window.target还是undefined</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>.<span class="property">vm</span>;</span><br><span class="line">    <span class="comment">// 获取一下被依赖的数据, 触发该数据上面的getter, 从全局唯一的那个位置读取当前正在读取数据的Watcher，并把这个watcher收集到Dep中去</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">getter</span>.<span class="title function_">call</span>(vm, vm);</span><br><span class="line">    <span class="comment">// 处理 watch 监听中的 deep 属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deep</span>) &#123;</span><br><span class="line">      <span class="title function_">traverse</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">target</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, <span class="variable language_">this</span>.<span class="property">value</span>, oldValue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">computed</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dep</span>.<span class="property">subs</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 调用getAndInvoke去对比计算属性的返回值是否发生了变化，如果真的发生变化，则执行回调，通知那些读取计算属性的watcher重新执行渲染逻辑</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAndInvoke</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">dep</span>.<span class="title function_">notify</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算属性取缓存还是重新计算逻辑</span></span><br><span class="line">  <span class="title function_">evaluate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dirty</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">depend</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">dep</span> &amp;&amp; <span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dep</span>.<span class="title function_">depend</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getAndInvoke</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">get</span>();</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      value !== <span class="variable language_">this</span>.<span class="property">value</span> ||</span><br><span class="line">      <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></span><br><span class="line">      <span class="comment">// when the value is the same, because the value may</span></span><br><span class="line">      <span class="comment">// have mutated.</span></span><br><span class="line">      <span class="title function_">isObject</span>(value) ||</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deep</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// set new value</span></span><br><span class="line">      <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          cb.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">handleError</span>(e, <span class="variable language_">this</span>.<span class="property">vm</span>, <span class="string">`callback for watcher &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.expression&#125;</span>&quot;`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于取消 watch</span></span><br><span class="line">  <span class="title function_">teardown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span>[i].<span class="title function_">removeSub</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题理解"><a href="#问题理解" class="headerlink" title="问题理解"></a>问题理解</h2><div class="tip cogs"><p>只要触发 getter 就会收集依赖吗</p></div><blockquote><p>不会</p><ul><li>在 Dep 的 depend 方法中，只有 Dep.target 为真时才会添加依赖。比如在派发更新时会触发 watcher 的 update 方法，该方法也会触发 parsePath 来取值，但是此时的 Dep.target 为 null，不会添加依赖</li><li>仔细观察可以发现，只有 watcher 的 get 方法中会调用 pushTarget(this) 来对 Dep.target 赋值，其他时候 Dep.target 都是 null，而 get 方法只会在实例化 watcher 的时候调用</li><li>因此，在实现中，一个 watcher 的依赖在其实例化时就已经确定了，之后任何读取值的操作均不会增加依赖</li></ul></blockquote><div class="tip cogs"><p>依赖嵌套的对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w2 = <span class="keyword">new</span> <span class="title class_">Watcher</span>(obj, <span class="string">&quot;b.m.n&quot;</span>, <span class="function">(<span class="params">val, oldVal</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`obj.b.m.n 从 <span class="subst">$&#123;oldVal&#125;</span>(oldVal) 变成了 <span class="subst">$&#123;val&#125;</span>(newVal)`</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>w2 会依赖 obj.b.m.n，但是 w2 会依赖 obj.b, obj.b.m 吗？或者说，obj.b 和 obj.b.m，它们闭包中保存的 dep 中会有 w2 吗</p></div><blockquote><p>会</p><ul><li>如果让 obj.b = null，那么很显然 w2 的回调函数应该被触发，这就说明 w2 会依赖中间层级的对象属性</li><li>代码层面: new Watcher() 时，会调用 watcher 的 get 方法，将 Dep.target 设置为 w2，get 方法会调用 parsePath 来取值</li></ul><ol><li>局部变量 obj 为对象 obj，读取 obj.b 的值，触发 getter，触发 dep.depend() (该 dep 是 obj.b 的闭包中的 dep)，Dep.target 存在，添加依赖</li><li>局部变量 obj 为 obj.b，读取 obj.b.m 的值，触发 getter，触发 dep.depend() (该 dep 是 obj.b.m 的闭包中的 dep)，Dep.target 存在，添加依赖</li><li>局部变量 obj 为对象 obj.b.m，读取 obj.b.m.n 的值，触发 getter，触发 dep.depend() (该 dep 是 obj.b.m.n 的闭包中的 dep)，Dep.target 存在，添加依赖</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 模块化</title>
      <link href="/articles/engineering/jsModule/"/>
      <url>/articles/engineering/jsModule/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/engineering/jModule_1.png" alt=""></p><h2 id="演进历程"><a href="#演进历程" class="headerlink" title="演进历程"></a>演进历程</h2><h3 id="无模块化"><a href="#无模块化" class="headerlink" title="无模块化"></a>无模块化</h3><blockquote><p>面临问题</p><ul><li>需要在页面中加载不同的 JS: 动画、组件、格式化</li><li>多种 js 文件会被分在不同的文件中</li><li>不同的文件又被同一个模板所引用</li></ul><p>手动拆分各文件</p></blockquote><h3 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote><p>利用函数的块级作用域 - 隔离区</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iifeModule = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  <span class="title function_">increase</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题 1: 独立模块本身的额外依赖，如何优化</p></div><blockquote><p>依赖其他模块的传参型</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iifeModule = (<span class="function">(<span class="params">dependencyModule1, dependencyModule2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  <span class="title function_">increase</span>();</span><br><span class="line">&#125;)(dependencyModule1, dependencyModule2);</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题 2: jquery 或者其他很多开源框架的模块加载方案</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iifeModule = (<span class="function">(<span class="params">dependencyModule1, dependencyModule2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">  <span class="title function_">increase</span>();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    increase,</span><br><span class="line">    reset,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(dependencyModule1, dependencyModule2);</span><br><span class="line">iifeModule.<span class="title function_">increate</span>();</span><br><span class="line">iifeModule.<span class="title function_">increate</span>();</span><br></pre></td></tr></table></figure><div class="tip success"><p>总结: 揭示模式 revealing =&gt; 上层无需了解底层实现，仅关注抽象 =&gt; 框架</p></div><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="Commonjs"><a href="#Commonjs" class="headerlink" title="Commonjs"></a>Commonjs</h4><ul><li>通过 require 去引入外部模块</li><li>通过 module + exports 去对外暴露接口</li><li>最开始 CJS 中，<code>this</code>，<code>exports</code>，<code>module.exports</code> 是同一个东西，最后导出 module.exports</li><li>对模块的浅拷贝</li><li>同步运行，不适合前端</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">exports</span> = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">e</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">f</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终结果: this: &#123; a: 1, b: 2, f: 6&#125;  exports: &#123;c: 3, e: 5&#125;  module.exports: &#123; d: 4 &#125;</span></span><br><span class="line"><span class="comment">// 最终导出: &#123; d: 4 &#125;;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dependencyModule2 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line"><span class="title function_">increase</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">increase</span> = increase;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">reset</span> = increase;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  increase,</span><br><span class="line">  reset,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exe</span></span><br><span class="line"><span class="keyword">const</span> &#123; increase, reset &#125; = <span class="built_in">require</span>(<span class="string">&quot;./main.js&quot;</span>)(</span><br><span class="line">  <span class="comment">// 复合使用</span></span><br><span class="line">  <span class="keyword">function</span> (<span class="params">thisValue, <span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule1&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> dependencyModule2 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 业务逻辑……</span></span><br><span class="line">  &#125;</span><br><span class="line">).<span class="title function_">call</span>(thisValue, <span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些开源项目为何要把全局、指针以及框架本身引用作为参数</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="variable language_">window</span>, $, <span class="literal">undefined</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _show = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#app&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;hi test&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">webShow</span> = _show;</span><br><span class="line">&#125;)(<span class="variable language_">window</span>, jQuery);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻断思路</span></span><br><span class="line"><span class="comment">// window - 1. 全局作用域转化成局部作用域，提升执行效率 2. 编译时优化</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">c</span>) &#123;&#125;)(<span class="variable language_">window</span>); <span class="comment">// window会被优化成c</span></span><br><span class="line"><span class="comment">// jquery - 1. 独立定制复写和挂载 2.防止全局串扰</span></span><br><span class="line"><span class="comment">// undefined - 防止重写</span></span><br></pre></td></tr></table></figure><div class="tip success"><p>优点: CommonJs 率先在服务端实现了，从框架层面解决了依赖、全局变量污染的问题<br>缺点: 针对了服务端的解决方案。异步拉取依赖处理不是很完美</p></div><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><blockquote><p>通过异步加载 + 允许制定回调函数<br>经典实现框架: <code>require.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define定义模块</span></span><br><span class="line"><span class="title function_">define</span>(id, [depends], callback);</span><br><span class="line"><span class="comment">// require进行加载</span></span><br><span class="line"><span class="built_in">require</span>([<span class="variable language_">module</span>], callback);</span><br><span class="line"></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&quot;amdModule&quot;</span>, [<span class="string">&quot;dependencyModule1&quot;</span>, <span class="string">&quot;dependencyModule2&quot;</span>], <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  dependencyModule1,</span></span></span><br><span class="line"><span class="params"><span class="function">  dependencyModule2</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 业务逻辑……</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;amdModule&quot;</span>], <span class="function">(<span class="params">amdModule</span>) =&gt;</span> &#123;</span><br><span class="line">  amdModule.<span class="title function_">increase</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题 2: 如何在 AMDModule 中兼容已有代码</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&quot;amdModule&quot;</span>, [], <span class="function">(<span class="params"><span class="built_in">require</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> dependencyModule2 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule2&quot;</span>);</span><br><span class="line">  <span class="comment">// 业务逻辑……</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>手写兼容 CJS &amp; AMD</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断关键step1. object还是function step2. exports？ step3. define</span></span><br><span class="line">(<span class="title function_">define</span>(<span class="string">&#x27;amdModule&#x27;</span>), [], <span class="function">(<span class="params"><span class="built_in">require</span>, <span class="keyword">export</span>, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&#x27;./dependencyModule1&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> dependencyModule2 = <span class="built_in">require</span>(<span class="string">&#x27;./dependencyModule2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">export</span>.<span class="property">increase</span> = <span class="title function_">increase</span>();</span><br><span class="line">&#125;)(</span><br><span class="line">  <span class="comment">// 目标: 一次性区分CJS还是AMD</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&quot;object&quot;</span></span><br><span class="line">  &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span></span><br><span class="line">  &amp;&amp; <span class="keyword">typeof</span> define !== <span class="string">&quot;function&quot;</span></span><br><span class="line">    ? <span class="comment">// 是CJS</span></span><br><span class="line">      <span class="function"><span class="params">factory</span> =&gt;</span> <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>(<span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span>)</span><br><span class="line">    : <span class="comment">// AMD</span></span><br><span class="line">      define</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div class="tip success"><p>优点: 适合在浏览器中加载异步模块的方案<br>缺点: 引入成本；回调无法做到绝对的异步</p></div><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><blockquote><p>按需加载，异步运行<br>主要应用框架:  <code>sea.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&quot;module&quot;</span>, <span class="function">(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> $ = <span class="built_in">require</span>(<span class="string">&quot;jquery&quot;</span>);</span><br><span class="line">  <span class="comment">// jquery相关逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dependencyModule1 = <span class="built_in">require</span>(<span class="string">&quot;./dependencyModule1&quot;</span>);</span><br><span class="line">  <span class="comment">// dependencyModule1相关逻辑</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="tip success"><p>优点: 按需加载，依赖就近<br>缺点: 依赖打包，加载逻辑存在于每个模块中，扩大了模块体积，同时功能上依赖编译</p></div><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><blockquote><p>import &amp; export</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入区域</span></span><br><span class="line"><span class="keyword">import</span> dependencyModule1 <span class="keyword">from</span> <span class="string">&quot;./dependencyModule1&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> dependencyModule2 <span class="keyword">from</span> <span class="string">&quot;./dependencyModule2&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现业务逻辑……</span></span><br><span class="line"><span class="comment">// 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">increase</span> = (<span class="params"></span>) =&gt; ++count;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  increase,</span><br><span class="line">  reset,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div class="tip cogs"><p>问题 1: 如何按需、动态加载模块:<br>es11 新特性 ==&gt; Dynamic Module Imports</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&quot;./esModule.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">dynamicModule</span>) =&gt;</span> &#123;</span><br><span class="line">  dynamicModule.<span class="title function_">increase</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在条件语句中动态导入</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./esModule.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">dynamicModule</span>) =&gt;</span> &#123;</span><br><span class="line">    dynamicModule.<span class="title function_">increase</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数内部动态导入</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadModule</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./esModule.js&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用导入的模块</span></span><br><span class="line">    dynamicModule.<span class="title function_">increase</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;模块加载失败:&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>优点: 通过一种最终统一各端的形态，整合了 js 模块化的通用方案<br>局限性: 本质上还是运行时的依赖分析</p></div><h4 id="ES6-vs-CommonJS"><a href="#ES6-vs-CommonJS" class="headerlink" title="ES6 vs CommonJS"></a>ES6 vs CommonJS</h4><ol><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口</li><li>CommonJS 模块的 require()是同步加载模块，ES6 模块的 import 命令是异步加载，有一个独立的模块依赖的解析阶段</li><li>CommonJS 是对模块的浅拷贝，ES6 Module 是对模块的引入，即 ES6 Module 只存只读，不能改变其值，具体点就是指针指向不能变，类似 const 。commonjs 的 this 指向当前模块，ES6 的 this 指向 undefined</li><li>import 的接口是 read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向。可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错</li></ol><h2 id="新方案-前端工程化"><a href="#新方案-前端工程化" class="headerlink" title="新方案: 前端工程化"></a>新方案: 前端工程化</h2><blockquote><p>上述方案存在的根本问题: <code>运行时</code>进行依赖分析<br>对此提出的解决方案: <code>编译时</code>进行依赖分析</p></blockquote><div class="tip cogs"><p>实现一个编译时依赖处理的思路</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 给构建工具一个标识位</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">require</span>.<span class="title function_">config</span>(__FRAME_CONFIG__);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 业务逻辑</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">define</span>(<span class="string">&#x27;a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> c = <span class="built_in">require</span>(<span class="string">&#x27;c&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工程化实现"><a href="#工程化实现" class="headerlink" title="工程化实现"></a>工程化实现</h3><h4 id="扫描依赖关系表"><a href="#扫描依赖关系表" class="headerlink" title="扫描依赖关系表"></a>扫描依赖关系表</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">  <span class="attr">b</span>: [<span class="string">&#x27;d&#x27;</span>],</span><br><span class="line">  <span class="attr">e</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="根据依赖关系重制模板"><a href="#根据依赖关系重制模板" class="headerlink" title="根据依赖关系重制模板"></a>根据依赖关系重制模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 构建工具生成数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">require</span>.<span class="title function_">config</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;deps&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">a</span>: [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">b</span>: [<span class="string">&#x27;d&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">e</span>: []</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 业务逻辑</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">define</span>(<span class="string">&#x27;a&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> c = <span class="built_in">require</span>(<span class="string">&#x27;c&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模块化解决方案处理"><a href="#模块化解决方案处理" class="headerlink" title="模块化解决方案处理"></a>模块化解决方案处理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;a&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span>.<span class="property">run</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip success"><p>优点: 构建时生成配置，运行时去运行，最终转化成可执行的依赖处理，并可以拓展</p></div><h3 id="完全体"><a href="#完全体" class="headerlink" title="完全体"></a>完全体</h3><blockquote><p>webpack 为核心的前端工程化 + mvvm 框架的组件化 + 设计模式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 简介</title>
      <link href="/articles/vue/introduce/"/>
      <url>/articles/vue/introduce/</url>
      
        <content type="html"><![CDATA[<h3 id="父子组件生命周期"><a href="#父子组件生命周期" class="headerlink" title="父子组件生命周期"></a>父子组件生命周期</h3><blockquote><p>父子组件的生命周期是一个嵌套的过程</p></blockquote><ol><li>渲染的过程</li></ol><ul><li>父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount-&gt; 子 mounted-&gt; 父 mounted</li></ul><ol><li>子组件更新过程</li></ol><ul><li>父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</li></ul><ol><li>父组件更新过程</li></ol><ul><li>父 beforeUpdate-&gt; 父 updated</li></ul><ol><li>销毁过程</li></ol><ul><li>父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</li></ul><h3 id="computed-watch"><a href="#computed-watch" class="headerlink" title="computed / watch"></a>computed / watch</h3><blockquote><p>相同点</p></blockquote><ul><li>基于 vue 的依赖收集机制</li><li>都是被依赖的变化触发，进行改变进而进行处理计算</li></ul><blockquote><p>不同点</p></blockquote><ol><li>入和出</li></ol><ul><li>computed: 多入单出，多个值变化，组成一个值的变化</li><li>watch: 单入多出，单个值的变化，进而影响一系列的状态变更</li></ul><ol><li>性能</li></ol><ul><li>computed: 自动 diff 依赖，若依赖没有变化，会改从缓存中读取当前计算值</li><li>watch: 无论监听值变化与否，都会执行回调</li></ul><ol><li>写法</li></ol><ul><li>computed: 必须有 return 返回值</li><li>watch: 不一定</li></ul><ol><li>时机上</li></ol><ul><li>computed: 从首次生成赋值，就开始计算运行了</li><li>watch: 首次不会运行，除非设置 immediate: true</li></ul><h3 id="v-for-v-if"><a href="#v-for-v-if" class="headerlink" title="v-for / v-if"></a>v-for / v-if</h3><ul><li>vue2: v-for &gt; v-if 先循环 再判断</li><li>vue3: 反过来</li></ul><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><ol><li>模板编译原理: template =&gt; dom<br>template =&gt; 正则匹配语法 —— 生成 AST: 静态 + 动态 =&gt; 转换 AST 为可执行方法 =&gt; render() =&gt; dom</li><li>dom diff</li></ol><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="attr">search</span>: &#123;</span><br><span class="line">    <span class="attr">update</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ……</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div v-search&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><blockquote><p>应用: 抽离公共逻辑 (逻辑相同，但是模板不一样)<br>合并策略</p><ul><li>data 冲突时，以组件主体为优先</li><li>生命周期钩子会先后执行，先 mixin 后主体</li><li>递归合并，递归合并优先级仍以主体优先</li></ul></blockquote><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><blockquote><p>应用: 拓展独立逻辑<br>合并策略: 与 mixin 相同</p><ul><li>合并优先级上 mixin &gt; extends</li><li>回调优先级 extends &gt; mixin</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/articles/engineering/node/"/>
      <url>/articles/engineering/node/</url>
      
        <content type="html"><![CDATA[<h2 id="node-简介"><a href="#node-简介" class="headerlink" title="node 简介"></a>node 简介</h2><blockquote><p>node.js 是⼀个 JS 的服务端运⾏环境，基于 V8，是在 JS 语⾔规范的基础上，封装了⼀些服务端的 runtime，能够简单实现⾮常多的业务功能。在 2009 年 (第一版 npm 被创建) 诞生之初是为了实现高性能的 web 服务器，再后来 node.js 慢慢演化为了一门服务端 “语言”<br>commonjs 是一个 规范，node.js 是 cjs 的实现</p></blockquote><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="node-作用"><a href="#node-作用" class="headerlink" title="node 作用"></a>node 作用</h4><ul><li>跨平台开发:  PC  web  H5  RN  Weex</li><li>后端开发:  API, RPC</li><li>前端开发:  前端工具链</li><li>工具开发: 脚本、脚手架、命令行。</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul><li>压缩: UglifyJS、JSMin</li><li>管理: npm、yarn、bower</li><li>模块系统: Commonjs, ESM</li><li>模块构建: Babel、Browserify、Webpack、Gulp、Grunt</li><li>生成器: yeoman、slush、CRA、CLI</li></ul><h4 id="node-缺陷"><a href="#node-缺陷" class="headerlink" title="node 缺陷"></a>node 缺陷</h4><ul><li>单线程很脆弱，但是可以通过 cluster / pm2 多核并发实现负载均衡</li><li>node 对 MongoDB、Mysql、redis 的支持比较好，对 neo4j、tigerGraph 的支持比较差</li><li>安全问题</li></ul><h4 id="vs-浏览器"><a href="#vs-浏览器" class="headerlink" title="vs 浏览器"></a>vs 浏览器</h4><ul><li>Node 环境中是没有 <code>DOM</code>, <code>BOM</code>, 同样的，浏览器中也没有 <code>fs</code>, <code>path</code> 这些模块。</li><li>事件循环<ul><li>node 的事件循环</li><li>浏览器:  微任务、宏任务、raf、 render、 requestIdleCallback</li></ul></li><li><code>cjs</code> 和 <code>esm</code><ul><li>Node.js 使用 CommonJS 模块系统，而在浏览器中我们开始看到正在实施的 ESM 标准。</li></ul></li></ul><h4 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h4><p><img src="/images/engineering/node_1.png" alt=""></p><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><h4 id="npm-install-工作流程"><a href="#npm-install-工作流程" class="headerlink" title="npm install 工作流程"></a>npm install 工作流程</h4><p><img src="/images/engineering/node_2.png" alt=""></p><h4 id="npm-CI"><a href="#npm-CI" class="headerlink" title="npm CI"></a>npm CI</h4><blockquote><p>Continuous Integration (持续集成)，npm 从 5.7.0 版本开始引入的一个命令，专门为自动化的持续集成环境设计。和 install 的不同点</p><ul><li>必须要有 package-lock.json 文件</li><li>且下载完全依赖该文件</li><li>会删除 node_modules</li><li>如果和 package.json 冲突，则直接报错</li><li>只能一次性安装</li><li>永不改写 package.json 和 package-lock.json 文件</li></ul></blockquote><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><ul><li>dependencies: 项目依赖 (lodash (debounce, deepMerge))</li><li>devDependencies: 开发依赖 (webpack, rollup, jest)</li><li>peerDependencies: 同版本依赖。比如 vue 组件库，如果说连 vue 都没，那这个项目没有意义</li><li>bundledDependencies: 捆绑依赖</li><li>optionalDependencies: 可选依赖</li></ul><h4 id="npm、cnpm、yarn、pnmp、npx"><a href="#npm、cnpm、yarn、pnmp、npx" class="headerlink" title="npm、cnpm、yarn、pnmp、npx"></a>npm、cnpm、yarn、pnmp、npx</h4><ol><li><p>npm: 包管理器，方便开发者分享和下载开源包。经历了许多重大版本的更新，各方面已经和 yarn 在同一水平</p></li><li><p>npx: npm@5.2的产物，方便运行本地命令</p></li></ol><ul><li>npx 会帮你执行依赖包里的二进制文件: 不需要在 scripts 中声明命令</li><li>npx 原理: 运行的时候，会到 node_modules/.bin 路径和环境变量$PATH里面，检查命令是否存在。由于 npx 会检查环境变量$PATH，所以系统命令也可以调用。</li><li>避免全局安装模块: npx 将 create-react-app 下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载 create-react-app。</li><li>—no-install: 如果想让 npx 强制使用本地模块，不下载远程模块，可以使用—no-install 参数。如果本地不存在该模块，就会报错。</li><li>—ignore-existing: 如果忽略本地的同名模块，强制安装使用远程模块，可以使用—ignore-existing 参数。</li><li>使用不同版本的 node: $ npx node@0.12.8 -v，原理是从 npm 下载这个版本的 node，使用后再删掉。某些场景下，这个方法用来切换 Node 版本，要比 nvm 那样的版本管理器方便一些。</li><li>-p: 用于指定 npx 所要安装的模块。$ npx -p node@0.12.8 node -v，先指定安装node@0.12.8，然后再执行 node -v 命令。</li><li>-c: 如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。-c 参数可以将所有命令都用 npx 解释</li></ul><ol><li><p>cnpm: 方便中国开发者下载依赖包而诞生的下载器</p></li><li><p>yarn: 解决了 npm@5 之前的一些让人诟病的问题，同时拥有一些其它的优点。例如离线安装、失败自动重试安装和并行下载等</p></li><li><p>pnpm: 通过连接的方式，让多个项目的依赖公用同一个包，大大节省了磁盘空间</p></li></ol><ul><li>pnpm 运行起来非常的快，超过了 npm 和 yarn</li><li>pnpm 采用了一种巧妙的方法，利用硬链接和符号链接来避免复制所有本地缓存源文件， yarn 的最大的性能弱点之一</li><li>使用链接并不容易，会带来一堆问题需要考虑</li><li>pnpm 继承了 yarn 的所有优点，包括离线模式和确定性安装</li></ul><h2 id="node-API"><a href="#node-API" class="headerlink" title="node API"></a>node API</h2><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><blockquote><p>Buffer 是一种计算机中数据流结构。计算机中是以二进制的方式，进行数据存取的。而 js 在一开始，没有文件读写能力的，就要借助 Buffer 来实现一些缓冲区的内容。<br>Buffer 一般用于表示固定长度的缓冲区序列。浏览器中使用 File new Blob。</p></blockquote><ol><li>Buffer 的声明</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">5</span>); <span class="comment">// 单位是字节 00000000</span></span><br><span class="line"><span class="comment">// string ==&gt; buffer</span></span><br><span class="line"><span class="keyword">let</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;麓一&quot;</span>); <span class="comment">// node 中一般编码使用的是 utf-8, 所以一个汉字，是3个字节。</span></span><br><span class="line"><span class="keyword">let</span> buf3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">0xe9</span>, <span class="number">0xba</span>, <span class="number">0x93</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf1); <span class="comment">// -&gt; &lt;Buffer 00 00 00 00 00&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2); <span class="comment">// -&gt; &lt;Buffer e9 ba 93 e4 b8 80&gt;</span></span><br><span class="line"><span class="comment">// buffer ==&gt; string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf3.<span class="title function_">toString</span>()); <span class="comment">// -&gt; 麓</span></span><br><span class="line"><span class="comment">// copy</span></span><br><span class="line"><span class="comment">// 第一个0, 表示从0这个位置开始拷贝</span></span><br><span class="line"><span class="comment">// 第二和第三个数字，表示拷贝从几到几的长度。</span></span><br><span class="line">buf2.<span class="title function_">copy</span>(buf1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// concat</span></span><br><span class="line"><span class="keyword">let</span> bigBuffer = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([buf1, buf2], <span class="number">6</span>);</span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line">buf1.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 类型判断</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">isBuffer</span>(buf);</span><br></pre></td></tr></table></figure><h3 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h3><blockquote><p>防止淹没可用内存: Buffer 不适合大文件的读取，适合比较小的文件，对于大文件，需要使用流</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">const</span> res = fs.<span class="title function_">createReadStream</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../package.json&quot;</span>), &#123;</span><br><span class="line">  <span class="attr">flags</span>: <span class="string">&quot;r&quot;</span>,</span><br><span class="line">  <span class="attr">start</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">end</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">highWaterMark</span>: <span class="number">5</span>, <span class="comment">// 默认是 64K</span></span><br><span class="line">  <span class="attr">autoClose</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">emitClose</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">on</span>(<span class="string">&quot;open&quot;</span>, <span class="keyword">function</span> (<span class="params">fd</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fd&quot;</span>, fd);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">  arr.<span class="title function_">push</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>, <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(arr).<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">on</span>(<span class="string">&quot;close&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 子进程，开子进程。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">default</span>: cluster &#125; = <span class="built_in">require</span>(<span class="string">&quot;cluster&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cpu_num = os.<span class="title function_">cpus</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpu_num.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    cluster.<span class="title function_">fork</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  http</span><br><span class="line">    .<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;childPid&quot;</span>, process.<span class="property">pid</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="浏览器的事件循环"><a href="#浏览器的事件循环" class="headerlink" title="浏览器的事件循环"></a>浏览器的事件循环</h3><blockquote><p>messageBump: 宏任务 -&gt; 微任务 -&gt; RAF -&gt; Layout -&gt; RequestIdleCallback</p></blockquote><h3 id="Node-的事件循环"><a href="#Node-的事件循环" class="headerlink" title="Node 的事件循环"></a>Node 的事件循环</h3><blockquote><p>基于 Libuv。Libuv 是一个高性能的、事件驱动的 I/O 库，为 Node.js 提供了跨平台的异步 I/O 能力，使之能够高效地处理大量并发请求</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">             同步的代码</span><br><span class="line">                 |</span><br><span class="line">     process.nextTick / promise...</span><br><span class="line">                 |</span><br><span class="line">   ┌───────────────────────────┐</span><br><span class="line">┌─&gt;│           timers          │ 定时器:  setTimeout / setInterval</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">|    process.nextTick / promise...</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │     pending callbacks     │ 执行延迟到下一个循环迭代的I/O回调</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">|    process.nextTick / promise...</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">│  │       idle, prepare       │ 系统内部使用</span><br><span class="line">│  └─────────────┬─────────────┘      ┌───────────────┐</span><br><span class="line">|    process.nextTick / promise...</span><br><span class="line">│  ┌─────────────┴─────────────┐      │   incoming:   │</span><br><span class="line">│  │           poll            │&lt;─────┤  connections, │</span><br><span class="line">│  └─────────────┬─────────────┘      │   data, etc.  │</span><br><span class="line">|    process.nextTick / promise...</span><br><span class="line">│  ┌─────────────┴─────────────┐      └───────────────┘</span><br><span class="line">│  │           check           │ setImmediate</span><br><span class="line">│  └─────────────┬─────────────┘</span><br><span class="line">|    process.nextTick / promise...</span><br><span class="line">│  ┌─────────────┴─────────────┐</span><br><span class="line">└──┤      close callbacks      │ 关闭回调函数</span><br><span class="line">   └───────────────────────────┘</span><br></pre></td></tr></table></figure><ul><li>定时器: 本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。</li><li>待定回调: 执行延迟到下一个循环迭代的 I/O 回调。</li><li>idle, prepare: 仅系统内部使用。</li><li>轮询: 检索新的 I/O 事件; 执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞。</li><li>检测: setImmediate() 回调函数在这里执行。</li><li>关闭的回调函数: 一些关闭的回调函数，如: socket.on(‘close’, …)。</li></ul><blockquote><p>总结<br><code>Node.js: microtask 在事件循环的各个阶段之间执行</code> &gt; <code>浏览器: microtask 在事件循环的 macrotask 执行完之后执行</code></p></blockquote><ol><li>node 的初始化</li></ol><ul><li>初始化 node 环境</li><li>执行输入代码</li><li>执行 process.nextTick 回调</li><li>执行微任务队列</li></ul><ol><li>进入 event-loop</li></ol><ul><li>进入 timers 阶段(执行 setTimeout 和 SetInterval)<ul><li>检查 timer 队列是否有到期的 timer 回调，如果有，将到期的 timer 回调按照 timerid 升序进行</li><li>检查是否有 process.nextTick 任务，如果有全部执行</li><li>检查是否有 microtask，有全部执行</li><li>退出该阶段</li></ul></li><li>进入 IO 阶段<ul><li>检查是否有 pending 的 io 回调，如果有，执行回调，如果没有，退出该阶段</li><li>检查是否有 process.nextTick()任务，如果有，全部执行</li><li>检查是否有 MicroTask，如果有全部执行</li><li>退出该阶段</li></ul></li></ul><ol><li>进入 idle，prepare 阶段</li><li>进入 poll 阶段</li></ol><ul><li>首先检查是否存在尚未完成的回调，存在，则<ol><li>如果 有可用回调，</li></ol><ul><li>那么执行</li><li>检查是否有 process.nextTick()回调，有全部执行</li><li>检查是否有 MicroTask，如果有全部执行</li><li>退出该阶段</li></ul><ol><li>如果没有可用回调</li></ol><ul><li>检查是否有 immediate 回调，如果有退出 poll 阶段，如果没有，阻塞在此阶段，等待新的事件通知</li></ul></li><li>如果不存在尚未完成的回调，退出 poll 阶段</li></ul><ol><li>进入 check 阶段</li></ol><ul><li>如果有 immediate 回调，执行所有回调</li><li>检查是否有 process.nextTick()回调，如果有，全部执行</li><li>检查是否有 MicroTask，如果有全部执行</li><li>退出该阶段</li></ul><ol><li>进入 closing 阶段</li></ol><ul><li>如果有 immediate 回调，则执行所有 immediate 回调。</li><li>检查是否有 process.nextTick 回调，如果有，全部执行。</li><li>检查是否有 microtaks，如果有，全部执行。</li><li>退出 closing 阶段</li></ul><ol><li>检查是否有活跃的 handles(定时器、io 等事件)</li></ol><ul><li>如果有，继续下一轮循环</li><li>没有则结束事件循环，退出程序</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 started&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async end&quot;</span>); <span class="comment">// m 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start.&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout0&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout1&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setImmediate&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line">process.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;nextTick&quot;</span>); <span class="comment">// m 0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise.then&quot;</span>); <span class="comment">// m2</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// script start.</span></span><br><span class="line"><span class="comment">// async1 started</span></span><br><span class="line"><span class="comment">// async2</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// nextTick</span></span><br><span class="line"><span class="comment">// async end</span></span><br><span class="line"><span class="comment">// promise.then</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTimeout0</span></span><br><span class="line"><span class="comment">// setImmediate</span></span><br><span class="line"><span class="comment">// setTimeout1</span></span><br></pre></td></tr></table></figure><h2 id="Node-框架"><a href="#Node-框架" class="headerlink" title="Node 框架"></a>Node 框架</h2><h3 id="express-koa"><a href="#express-koa" class="headerlink" title="express / koa"></a>express / koa</h3><blockquote><p>express 是一个基于 node.js 平台的一个灵活的 web 应用开发框架，connect 中间件，内置了视图、static 等部分<br>koa2 相对来说更新一些，也是由 express 原班人马打造的框架，通过中间件来实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./public&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;server is running in 3000&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">api</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timing...&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying start 1&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">api</span>();</span><br><span class="line">  ctx.<span class="property">result</span> = result;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying end 1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying start 2&quot;</span>, ctx.<span class="property">result</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying end 2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying start 3&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;querying end 3&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params">ctx</span>) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(main);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3008</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// querying start 1</span></span><br><span class="line"><span class="comment">// timing...</span></span><br><span class="line"><span class="comment">// querying start 2 100</span></span><br><span class="line"><span class="comment">// querying start 3</span></span><br><span class="line"><span class="comment">// querying end 3</span></span><br><span class="line"><span class="comment">// querying end 2</span></span><br><span class="line"><span class="comment">// querying end 1</span></span><br></pre></td></tr></table></figure><h3 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">num</span>(<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;starting num ...&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>(ctx * <span class="number">10</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ending num ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">discount</span>(<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;starting discount ...&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>(ctx * <span class="number">0.8</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ending discount ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">express</span>(<span class="params">ctx, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;starting express ...&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>(ctx + <span class="number">12</span>); <span class="comment">// 不包邮，12运费</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ending express ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compose实现.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="comment">// ctx 初始化时，是我们放进去的 150 元，我们要不断地计算这个值。</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="keyword">function</span> (<span class="params">i, ctx</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> fn;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; args.<span class="property">length</span>) fn = args[i]; <span class="comment">// fn 就是我每一个函数。</span></span><br><span class="line">      <span class="keyword">if</span> (i === args.<span class="property">length</span>) &#123;</span><br><span class="line">        result = ctx;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fn</span>(ctx, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, ++i));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">dispatch</span>(i, ctx);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sell = <span class="title function_">compose</span>([num, discount, express]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sell</span>(<span class="number">150</span>)); <span class="comment">// 1212</span></span><br><span class="line"><span class="comment">// starting num ...</span></span><br><span class="line"><span class="comment">// starting discount ...</span></span><br><span class="line"><span class="comment">// starting express ...</span></span><br><span class="line"><span class="comment">// ending express ...</span></span><br><span class="line"><span class="comment">// ending discount ...</span></span><br><span class="line"><span class="comment">// ending num ...</span></span><br></pre></td></tr></table></figure><h3 id="koa-框架原理"><a href="#koa-框架原理" class="headerlink" title="koa 框架原理"></a>koa 框架原理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⼊⼝⽅法</span></span><br><span class="line"><span class="title function_">listen</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&#x27;listen&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="variable language_">this</span>.<span class="title function_">callback</span>());</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">listen</span>(...args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (res, req) =&gt; &#123;  &#125;</span></span><br><span class="line"><span class="title function_">callback</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 处理中间件，等一下看compose和this.middleware</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="title function_">compose</span>(<span class="variable language_">this</span>.<span class="property">middleware</span>);</span><br><span class="line"><span class="comment">// 错误处理，listenerCount是EventEmitter类的函数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">listenerCount</span>(<span class="string">&#x27;error&#x27;</span>)) <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onerror</span>);</span><br><span class="line"><span class="comment">// 传递给createServer的就是下面这个函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleRequest</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res);</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">handleRequest</span>(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> handleRequest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleRequest</span>(<span class="params">ctx, fnMiddleware</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = ctx.<span class="property">res</span>;</span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onerror</span> = err =&gt; ctx.<span class="title function_">onerror</span>(err);</span><br><span class="line">    <span class="comment">// 这里等到response再看</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResponse</span> = (<span class="params"></span>) =&gt; <span class="title function_">respond</span>(ctx);</span><br><span class="line">    <span class="comment">// 给请求结束增加一个回调，这个onerror是ctx的onerror，不是app的onerror</span></span><br><span class="line">    <span class="title function_">onFinished</span>(res, onerror);</span><br><span class="line">    <span class="comment">// 等一下看这个</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fnMiddleware</span>(ctx).<span class="title function_">then</span>(handleResponse).<span class="title function_">catch</span>(onerror);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加中间件⽅法</span></span><br><span class="line"><span class="title function_">use</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">middleware</span>.<span class="title function_">push</span>(fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createContext</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line"><span class="comment">// 每次请求，ctx都是一个新的对象</span></span><br><span class="line">    <span class="keyword">const</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>);</span><br><span class="line">    <span class="keyword">const</span> request = context.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>);</span><br><span class="line">    <span class="keyword">const</span> response = context.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>);</span><br><span class="line">    <span class="comment">// 原生的req和res</span></span><br><span class="line">    context.<span class="property">app</span> = request.<span class="property">app</span> = response.<span class="property">app</span> = <span class="variable language_">this</span>;</span><br><span class="line">    context.<span class="property">req</span> = request.<span class="property">req</span> = response.<span class="property">req</span> = req;</span><br><span class="line">    context.<span class="property">res</span> = request.<span class="property">res</span> = response.<span class="property">res</span> = res;</span><br><span class="line">    <span class="comment">// koa生成的request和response</span></span><br><span class="line">    request.<span class="property">ctx</span> = response.<span class="property">ctx</span> = context;</span><br><span class="line">    request.<span class="property">response</span> = response;</span><br><span class="line">    response.<span class="property">request</span> = request;</span><br><span class="line">    context.<span class="property">originalUrl</span> = request.<span class="property">originalUrl</span> = req.<span class="property">url</span>;</span><br><span class="line">    context.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa-compose"><a href="#koa-compose" class="headerlink" title="koa-compose"></a>koa-compose</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Expose compositor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = compose;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Compose `middleware` returning</span></span><br><span class="line"><span class="comment"> * a fully valid middleware comprised</span></span><br><span class="line"><span class="comment"> * of all those which are passed.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Array</span>&#125; <span class="variable">middleware</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">Function</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api</span> <span class="variable">public</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">middleware</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(middleware))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware stack must be an array!&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Middleware must be composed of functions!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">context</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Promise</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@api</span> <span class="variable">public</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">i</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;next() called multiple times&quot;</span>));</span><br><span class="line">      index = i;</span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i];</span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next;</span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="koa-常用中间件"><a href="#koa-常用中间件" class="headerlink" title="koa 常用中间件"></a>koa 常用中间件</h3><ul><li>koa2-cors</li><li>koa-static</li><li>koa-bodyparser</li></ul><h2 id="BFF"><a href="#BFF" class="headerlink" title="BFF"></a>BFF</h2><blockquote><p><a href="https://samnewman.io/patterns/architectural/bff/?fileGuid=xxQTRXtVcqtHK6j8">Backends For Frontends</a></p><p>在后端普遍采用微服务的情况下，作为适配层，更好的为前端服务。<br>优势: 降低沟通成本，提升用户体验<br>问题: 资源浪费，增加架构复杂度，管理复杂</p></blockquote><h2 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h2><blockquote><p>Sequelize 是一个基于 promise 的 Node.js ORM, 目前支持 Postgres, MySQL, MariaDB, SQLite 以及 Microsoft SQL Server. 它具有强大的事务支持, 关联关系, 预读和延迟加载,读取复制等功能</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/articles/engineering/webpack/"/>
      <url>/articles/engineering/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="案例引入"><a href="#案例引入" class="headerlink" title="案例引入"></a>案例引入</h2><ul><li>基于 Module Federation 的一些微前端方案</li><li>基于 webpack-dev-server 的一些 热更新</li><li>基于 tree-Shaking, code spliting, terser / minify / uglify 的一些压缩方案</li><li>lazy import 的一些懒加载方案</li><li>Js, Json，二进制的解析、生成能力</li></ul><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><blockquote><p>bundle: 由 webpack 打包出来的文件<br>chunk: 指 webpack 在进行模块依赖分析的时候，代码分割出来的代码块<br>module: 开发中的单个模块</p></blockquote><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><blockquote><p>从文件系统中读取代码</p></blockquote><ul><li>entry: 用于定义项目的入口，Webpack 会从这些入口文件中找到所有文件 (SFC 单文件组件)</li><li>context: 定义项目的执行上下文</li></ul><h3 id="模块递归处理"><a href="#模块递归处理" class="headerlink" title="模块递归处理"></a>模块递归处理</h3><blockquote><p>调用 Loader 转译 Module 内容，并将结果转换为 AST，从中分析出模块依赖关系，进一步递归调用模块处理过程，直到所有依赖文件都处理完毕；</p><ul><li>resolve: 用于配置模块路径的解析规则，可以帮助 webpack 更精确，更高效的找到指定模块；</li><li>module: 配置模块加载规则，loaders</li><li>externals: 声明资源之间的关系。用 externals 声明的外部资源， webpack 会进行忽略。</li><li>chunk: 代码块，一个 chunk 由多个模块组合而成，用于代码合并与分割</li></ul></blockquote><h3 id="后处理"><a href="#后处理" class="headerlink" title="后处理"></a>后处理</h3><blockquote><p>所有模块递归处理完毕后开始执行后处理，包括模块合并、注入运行时、产物优化等，最终输出 chunk 集合</p><ul><li>optimization: 用于控制如何优化产物包体积，scope hoisting、code spliting、代码混淆、代码压缩</li><li>target: 用于配置编译产物的目标环境， web,、node、electron</li><li>mode: dev prod 环境下的声明</li><li>output: 输出，产出物</li></ul></blockquote><h3 id="额外的开发效率工具"><a href="#额外的开发效率工具" class="headerlink" title="额外的开发效率工具"></a>额外的开发效率工具</h3><ul><li>devtools 决定 sourcemap 的生成规则</li><li>DevServer HMR: 内置 node 服务，websocket 通知，再根据新 hash 值请求更新内容</li><li>watch 模式，用于配置持续监听文件变化</li><li>cache  webpack 5 以后，缓存编译信息</li></ul><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>请求资源时，先通过 jsonp 的方式去加载 js 模块所对应的文件，会保存在一个全局的 webpackJsonp 中</li><li>加载回来后在浏览器中执行此 JS 脚本，将请求过来的模块定义合并到 main.js 中的 modules 中去: webpackJsonp.push 的的值，两个参数分别为异步加载的文件中存放的需要安装的模块对应的 id 和异步加载的文件中存放的需要安装的模块列表。</li><li>合并完后，去加载这个模块</li><li>拿到该模块导出的内容</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>代码分割（Code Splitting）: Webpack 允许将代码拆分为多个块（chunks），并在需要时动态加载这些块。意味着可以将应用程序划分为更小的模块，只在需要时加载，而不是一次性加载整个应用程序。这可以减少初始加载时间，提高性能。</li><li>动态导入语法: Webpack 提供了动态导入语法，例如使用 import() 函数或 require.ensure() 函数来异步加载模块。这些函数返回一个 Promise，可以使用 then 方法处理加载成功的回调，或使用 catch 方法处理加载失败的回调。</li><li>按需加载: 通过异步加载模块，可以根据需要加载特定的模块，而不是将所有模块打包到同一个文件中。这样可以减少初始加载时间，并在用户需要时动态加载额外的模块。</li><li>代码并行加载: Webpack 可以同时加载多个模块，利用浏览器的并行加载能力，从而加快加载速度。这对于大型应用程序和复杂的依赖关系特别有用。</li></ol><h2 id="loaders"><a href="#loaders" class="headerlink" title="loaders"></a>loaders</h2><blockquote><p>webpack 某个阶段的解析器，对不同文件进行解析<br>Webpack 选择了 compose 方式，函数组合是函数式编程中非常重要的思想。在 compose 中是采用 reduceRight，<code>从右往左执行</code></p></blockquote><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel loader"></a>babel loader</h3><h3 id="css-loaders"><a href="#css-loaders" class="headerlink" title="css loaders"></a>css loaders</h3><blockquote><p>原生 webpack 不能识别 css 语法，直接导入 .css 文件会失败，为此， 在 webpack 中，处理 css 文件，通常要使用到</p></blockquote><h4 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h4><blockquote><p>将 css 翻译成类似 module.exports = <code>$&#123;css&#125;</code> 的 JS 代码，使 CSS 文件可以和 JS 一样作为资源。同时可以提供 sourcemap、css-in-module</p></blockquote><h4 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h4><blockquote><p>在具体的产物中，注入 runtime 代码。让这些代码将 CSS 注入到页面中。</p></blockquote><h4 id="less-sass-loader"><a href="#less-sass-loader" class="headerlink" title="less/sass-loader"></a>less/sass-loader</h4><blockquote><p>通过原本的 less / sass 的解析器解析，最后生成 css.</p></blockquote><h4 id="postcss-loader"><a href="#postcss-loader" class="headerlink" title="postcss-loader"></a>postcss-loader</h4><blockquote><p>CSS 界的 babel.</p></blockquote><h3 id="file-loaders"><a href="#file-loaders" class="headerlink" title="file loaders"></a>file loaders</h3><h4 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h4><blockquote><p>经过 file-loader 处理后，原始图片会被重命名并复制到产物文件夹，同时在代码里插入图片 URL</p></blockquote><h4 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a>url-loader</h4><blockquote><p>对于小于阈值的图像，直接 base 64 编码</p></blockquote><h4 id="raw-loader"><a href="#raw-loader" class="headerlink" title="raw-loader"></a>raw-loader</h4><blockquote><p>都不处理，直接拷贝，一般 svg 会用他。</p></blockquote><h3 id="手写-loader"><a href="#手写-loader" class="headerlink" title="手写 loader"></a>手写 loader</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less-loader</span></span><br><span class="line"><span class="keyword">const</span> less = <span class="built_in">require</span>(<span class="string">&quot;less&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> callback = <span class="variable language_">this</span>.<span class="title function_">async</span>();</span><br><span class="line">  less.<span class="title function_">render</span>(source, &#123; <span class="attr">sourceMap</span>: &#123;&#125; &#125;, <span class="keyword">function</span> (<span class="params">err, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; css, map &#125; = res;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, css, map);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// style-loader</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">source, map</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> style = <span class="string">`</span></span><br><span class="line"><span class="string">    const style = document.createElement(&#x27;style&#x27;);</span></span><br><span class="line"><span class="string">    style.innerHTML = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(source)&#125;</span>;</span></span><br><span class="line"><span class="string">    document.head.appendChild(style);</span></span><br><span class="line"><span class="string">    `</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> style;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><blockquote><p>在打包过程中不同周期内加入一些功能</p></blockquote><h3 id="常见的-plugins"><a href="#常见的-plugins" class="headerlink" title="常见的 plugins"></a>常见的 plugins</h3><blockquote><ul><li>terser-webpack-plugin 压缩 js</li><li>pnp-webpack-plugin Yarn Plug Play 插件</li><li>html-webpack-plugin 自动生成带有入口文件的 index.html 模板注入</li><li>webpack-manifest-plugin 生产资产的显示清单</li><li>mini-css-extract-plugin</li><li>define-plugin</li><li>friendly-errors-webpack-plugin 友好的错误日志。</li></ul></blockquote><h3 id="webpack-运行原理"><a href="#webpack-运行原理" class="headerlink" title="webpack 运行原理"></a>webpack 运行原理</h3><ol><li>初始化参数: 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li><li>开始编译: 用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法，初始化一个 compilation 对象，执行 compilation 中的 build 方法开始执行编译，触发 compiler 对象的 done 钩子，完成编译</li><li>确定入口: 根据配置中的 entry 找出所有的入口文件</li><li>编译模块: 从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li><li>完成模块编译: 在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li><li>输出资源: 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li><li>输出完成: 在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol><p><img src="/images/engineering/webpack_1.png" alt=""></p><h3 id="compiler-compilation"><a href="#compiler-compilation" class="headerlink" title="compiler / compilation"></a>compiler / compilation</h3><h4 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h4><blockquote><p>该对象包含了 webpack 的所有配置信息，包括 entry、output、module、plugins 等，compiler 对象会在启动 webpack 时，一次性地初始化创建，它是全局唯一的，可以简单理解为 webpack 的实例</p></blockquote><h4 id="compilation"><a href="#compilation" class="headerlink" title="compilation"></a>compilation</h4><blockquote><p>该对象代表一次资源的构建，通过一系列 API 可以访问/修改本次模块资源、编译生成的资源、变化的文件、以及被跟踪依赖的状态信息等，当我们以开发模式运行 webpack 时，每当检测到一个文件变化，就会创建一个新的 compilation 对象，所以 compilation 对象也是一次性的，只能用于当前的编译</p><ul><li><code>compilation.modules</code>: 解析后的所有模块</li><li><code>compilation.chunks</code>: 所有的代码分块 chunk</li><li><code>compilation.assets</code>: 本次打包生成的所有文件</li><li><code>compilation.hookscompilation</code>:  所有的钩子</li></ul><p>总结: <code>compiler</code> 代表的是整个 webpack 从启动到关闭的生命周期（终端结束，该生命周期结束），而 <code>compilation</code> 只是代表了一次性的编译过程，如果是 watch 模式，每次监听到文件变化，都会产生一个新的 compilation，所以 compilation 代表一次资源的构建，会多次被创建，而 compiler 只会被创建一次</p></blockquote><h3 id="插件实现原理"><a href="#插件实现原理" class="headerlink" title="插件实现原理"></a>插件实现原理</h3><blockquote><p>通过 tapable 链式调用<br>通过 compiler 对象的 hooks 属性访问到 emit 钩子，再通过 tap 方法注册一个钩子函数，这个方法接收两个参数: 插件名称，callback(compilation: 上下文，其中 assets 属性为即将写入输出目录的资源文件信息， for in 去遍历 assets ，得到键名，即每个文件的名称，然后通过遍历的值对象中的 source 方法获取文件内容，处理过后暴露一个 source 方法用来返回新的内容。另外还需要再暴露一个 size 方法，用来返回内容大小)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="title class_">SyncHook</span>,</span><br><span class="line">  <span class="title class_">SyncBailHook</span>,</span><br><span class="line">  <span class="title class_">SyncWaterfallHook</span>,</span><br><span class="line">  <span class="title class_">SyncLoopHook</span>,</span><br><span class="line">  <span class="title class_">AsyncHook</span>,</span><br><span class="line">  <span class="title class_">AsyncParallelHook</span>,</span><br><span class="line">  <span class="title class_">AsyncParallelBailHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesBailHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesLoopHook</span>,</span><br><span class="line">  <span class="title class_">AsyncSeriesWaterfallHook</span>,</span><br><span class="line">  <span class="title class_">Hook</span>,</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册事件</span></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&quot;flag1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag1:::&quot;</span>, arg1, arg2, arg3);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&quot;flag2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag2:::&quot;</span>, arg1, arg2, arg3);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  hook.<span class="title function_">call</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpack = &#123;</span><br><span class="line">  <span class="attr">compiler</span>: &#123;</span><br><span class="line">    <span class="attr">hooks</span>: &#123;</span><br><span class="line">      <span class="attr">make</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line">      <span class="attr">seal</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line">      <span class="attr">compile</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line"></span><br><span class="line">      <span class="attr">emit</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line">      <span class="attr">afterEmit</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>(),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">compilation</span>: &#123;</span><br><span class="line">    <span class="attr">hooks</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">compiler.<span class="property">hooks</span>.<span class="property">emit</span>.<span class="title function_">tap</span>(<span class="string">&quot;flag1&quot;</span>, <span class="function">(<span class="params">stats, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag1:::&quot;</span>, stats, callback);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APlugin</span> &#123;</span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">tap</span>(<span class="string">&quot;APlugin&quot;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree-shaking"></a>tree-shaking</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><h4 id="依赖标记阶段"><a href="#依赖标记阶段" class="headerlink" title="依赖标记阶段"></a>依赖标记阶段</h4><blockquote><p>Make 阶段: 收集模块导出变量并记录到模块依赖关系图 ModuleGraph 变量中</p></blockquote><ol><li>将模块的所有 ESM 导出语句转换为 Dependency 对象，并记录到 module 对象的 dependencies 集合，转换规则:  - 具名导出转换为 HarmonyExportSpecifierDependency 对象 - default 导出转换为 HarmonyExportExpressionDependency 对象</li><li>所有模块都编译完毕后，触发 compilation.hooks.finishModules 钩⼦，开始执行 FlagDependencyExportsPlugin 插件回调</li><li>FlagDependencyExportsPlugin 插件从 entry 开始读取 ModuleGraph 中存储的模块信息，遍历所有 module 对象</li><li>遍历 module 对象的 dependencies 数组，找到所有 HarmonyExportXXXDependency 类型的依赖对象，将其转换为 ExportInfo 对象，并记录到 ModuleGraph 体系中</li></ol><blockquote><p>Seal 阶段: 遍历 ModuleGraph 标记模块导出变量有没有被使⽤</p></blockquote><ol><li>触发 compilation.hooks.optimizeDependencies 钩⼦，开始执⾏ FlagDependencyUsagePlugin 插件逻辑</li><li>在 FlagDependencyUsagePlugin 插件中，从 entry 开始逐步遍历 ModuleGraph 存储的所有 module 对象</li><li>遍历 module 对象对应的 exportInfo 数组</li><li>.为每⼀个 exportInfo 对象执⾏ compilation.getDependencyReferencedExports ⽅法，确定其对应的 dependency 对象有否被其它模块使⽤</li><li>被任意模块使⽤到的导出值，调⽤ exportInfo.setUsedConditionally ⽅法将其标记为已被使⽤</li><li>exportInfo.setUsedConditionally 内部修改 exportInfo._usedInRuntime 属性，记录该导出被如何使⽤</li><li>结束</li></ol><blockquote><p>产物生成: 若变量没有被其他模块使用时，则删除对应的导出语句</p></blockquote><ol><li>打包阶段，调⽤ HarmonyExportXXXDependency.Template.apply ⽅法⽣成代码</li><li>在 apply ⽅法内，读取 ModuleGraph 中存储的 exportsInfo 信息，判断哪些导出值被使⽤，哪些未被使⽤</li><li>对已经被使⽤及未被使⽤的导出值，分别创建对应的 HarmonyExportInitFragment 对象，保存到 initFragments 数组</li><li>遍历 initFragments 数组，⽣成最终结果 (<code>__webpack_exports__</code>对象)</li></ol><div class="tip warning"><p>标记阶段会将 import &amp; export 标记为 3 类</p></div><blockquote><ul><li>所有 import 标记为 <code>/* harmony import */</code></li><li>被使用过的 export 标记为 <code>/* harm export([type])*/</code> ，其中 [type] 和 webpack 内部相关，可能是 binding，immutable 等等</li><li>未被使用过的 import 标记为 <code>/* unused harmony export [FuncName] */</code>，其中 [FuncName] 为 export 的方法名称</li></ul></blockquote><h4 id="删除阶段"><a href="#删除阶段" class="headerlink" title="删除阶段"></a>删除阶段</h4><blockquote><p>使用 Terser 删除没有用到的导出语句 (dead code)</p></blockquote><h3 id="原理总结"><a href="#原理总结" class="headerlink" title="原理总结"></a>原理总结</h3><ul><li>在 FlagDependencyExportsPlugin 插件中根据模块的 dependencies 列表收集模块导出值，并记录到 ModuleGraph 体系的 exportsInfo 中</li><li>在 FlagDependencyUsagePlugin 插件中收集模块的导出值的使用情况，并记录到 exportInfo._usedInRuntime 集合中</li><li>在 HarmonyExportXXXDependency.Template.apply 方法中根据导出值的使用情况生成不同的导出语句</li><li>使用 DCE 工具删除 Dead Code，实现完整的树摇效果</li></ul><h3 id="启用-tree-shaking"><a href="#启用-tree-shaking" class="headerlink" title="启用 tree-shaking"></a>启用 tree-shaking</h3><blockquote><p>需满足三个条件</p></blockquote><ol><li>使用 ESM 规范编写模块，在引入模块时应局部引入，才可以触发 tree shaking 机制</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入所有内容（不会触发 tree-shaking）</span></span><br><span class="line"><span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入命名导出 (会触发 tree-shaking)</span></span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接导入项目 (会触发 tree-shaking)</span></span><br><span class="line"><span class="keyword">import</span> debounce <span class="keyword">from</span> <span class="string">&quot;lodash/lib/debounce&quot;</span>;</span><br></pre></td></tr></table></figure><ol><li><p>配置 optimization.usedExport 为 true，启用标记功能，标记代码无副作用。在 package.json 中配置 sideEffects: false，可以安全删除</p></li><li><p>启用代码优化功能，有以下途径</p></li></ol><ul><li>配置 mode = production</li><li>配置 optimization.minimize = true</li><li>提供 optimization.minimizer 数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=&#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index&quot;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>:<span class="literal">false</span>，</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">usedExports</span>:<span class="literal">true</span>，</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li>避免无意义的赋值: Tree Shaking 逻辑停留在代码静态分析层面，只是浅显地判断: </li></ol><ul><li>模块导出变量是否被其它模块引用</li><li>引用模块的主体代码中有没有出现这个变量</li></ul><p>无法从语义上分析模块导出值是不是真的被有效使用，导致出现一些无意义复制被保留的情况</p><ol><li>使用 #pure 标注纯函数调用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>(<span class="string">&quot;jack&quot;</span>); <span class="comment">// 会保留</span></span><br><span class="line"><span class="comment">/*#__pure__*/</span> <span class="title function_">fun</span>(<span class="string">&quot;lucy&quot;</span>); <span class="comment">// 不会保留</span></span><br></pre></td></tr></table></figure><ol><li>禁止 Babel 转译模块导入导出语句: 避免 ESM 语句转译成 CommonJS 语句</li><li>优化导出值的粒度: 尽量明确导出对象最小粒度</li><li>使用支持 Tree Shaking 的包</li></ol><h2 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h2><blockquote><p>Source Map 是一个信息文件，存储了代码打包转换后的位置信息，实质是一个 json ，维护了打包前后的代码映射关系</p></blockquote><h3 id="生成-source-map"><a href="#生成-source-map" class="headerlink" title="生成 source-map"></a>生成 source-map</h3><h4 id="UglifyJS"><a href="#UglifyJS" class="headerlink" title="UglifyJS"></a>UglifyJS</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uglifyjs app.<span class="property">js</span> - o app.<span class="property">min</span>.<span class="property">js</span>--source - map app.<span class="property">min</span>.<span class="property">js</span>.<span class="property">map</span></span><br></pre></td></tr></table></figure><h4 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">grunt.<span class="title function_">initConfig</span>(&#123;</span><br><span class="line">  <span class="attr">concat</span>: &#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">uglify</span>: &#123;</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">sourceMapIn</span>: <span class="keyword">function</span> (<span class="params">uglifySource</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> uglifySource + <span class="string">&quot;.map&quot;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> plugin1 = <span class="built_in">require</span>(<span class="string">&quot;gulp-plugin1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> plugin2 = <span class="built_in">require</span>(<span class="string">&quot;gulp-plugin2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">&quot;gulp-sourcemaps&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;javascript&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;src/**/*.js&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(sourcemaps.<span class="title function_">init</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">plugin1</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">plugin2</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(sourcemaps.<span class="title function_">write</span>(<span class="string">&quot;../maps&quot;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="SystemJS"><a href="#SystemJS" class="headerlink" title="SystemJS"></a>SystemJS</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">builder.<span class="title function_">bundle</span>(<span class="string">&quot;myModule.js&quot;</span>, <span class="string">&quot;outfile.js&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">minify</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">sourceMaps</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Webpack-中的-Source-Map"><a href="#Webpack-中的-Source-Map" class="headerlink" title="Webpack 中的 Source Map"></a>Webpack 中的 Source Map</h3><blockquote><p>配置 devtool 的不同取值使用不同的 source map 策略</p><ul><li>内联: 构建速度更快</li><li>外部: 会生成 .map 文件</li></ul></blockquote><ul><li><code>source-map</code>: 外部。可以查看错误代码准确信息和源代码的错误位置</li><li><code>inline-source-map</code>: 内联。只生成一个内联 Source Map，可以查看错误代码准确信息和源代码的错误位置</li><li><code>hidden-source-map</code>: 外部。可以查看错误代码准确信息，但不能追踪源代码错误，只能提示到构建后代码的错误位置</li><li><code>eval-source-map</code>: 内联。每一个文件都生成对应的 Source Map，都在 eval 中，可以查看错误代码准确信息和源代码的错误位置</li><li><code>nosources-source-map</code>: 外部。可以查看错误代码错误原因，但不能查看错误代码准确信息，并且没有任何源代码信息</li><li><code>cheap-source-map</code>: 外部。可以查看错误代码准确信息和源代码的错误位置，只能把错误精确到整行，忽略列</li><li><code>cheap-module-source-map</code>: 外部。可以错误代码准确信息和源代码的错误位置，module 会加入 loader 的 Source Map</li></ul><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ol><li>开发环境: 需要考虑速度快，调试更友好。综合速度 (eval &gt; inline &gt; cheap) 和调试 (souce-map)，有两种方案</li></ol><ul><li>eval-source-map: 完整度高，内联速度快</li><li>eval-cheap-module-souce-map: 错误提示忽略列但是包含其他信息，内联速度快</li></ul><ol><li>生产环境: 需要考虑源代码要不要隐藏，调试要不要更友好 (内联会让代码体积变大，生产环境不用内联)，有两种方案</li></ol><ul><li>nosources-source-map: 全部隐藏 (打包后的代码与源代码)</li><li>hidden-source-map: 只隐藏源代码，会提示构建后代码错误信息</li></ul><blockquote><p>综合选择</p><ul><li>dev: <code>source-map</code> (最完整)</li><li>prod: <code>cheap-module-souce-map</code> (错误提示一整行忽略列)</li></ul></blockquote><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="减少打包体积"><a href="#减少打包体积" class="headerlink" title="减少打包体积"></a>减少打包体积</h3><ol><li>只打包需要的模块: 使用 tree-shaking</li><li>代码压缩: </li></ol><ul><li>使用 css-minimizer-webpack-plugin: 压缩和去重 CSS</li><li>terser-webpack-plugin: 压缩和去重 JavaScript，或其他 UglifyJS 插件</li><li>source-map: 在开发模式下生成更准确 (但更大) 的 source-map；在生产模式下生成更小 (但不那么准确) 的 source-map</li><li>webpack-bundle-analyzer: 查看打包后的体积，后续优化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;eval-cheap-module-source-map&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生产模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;nosources-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><ol><li>使用缓存提高打包速度: 避免每次修改代码后重新构建和打包，可使用 cache-loader 、 hard-source-webpack-plugin 、HotModuleReplacementPlugin 等插件缓存打包结果</li><li>使用浏览器缓存加快页面速度: 避免重复访问服务器。可以通过在 Webpack 中设置 output.chunkFilename 和 output.filename 来控制静态资源的命名规则，并设置 max-age 等缓存策略</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[hash:8].js&#x27;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;[name].[hash:8].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化图片加载"><a href="#优化图片加载" class="headerlink" title="优化图片加载"></a>优化图片加载</h3><ol><li>使用 file-loader 和 url-loader 进行图片处理: file-loader 会将图片打包后生成一个 url，url-loader (或者 webpack5 的 assets-moudle) 会根据图片大小来决定是否将图片转为 base64 编码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg|webp)$/</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">  <span class="attr">parser</span>: &#123;</span><br><span class="line">     <span class="comment">// Conditions for converting to base64</span></span><br><span class="line">     <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">        <span class="attr">maxSize</span>: <span class="number">25</span> * <span class="number">1024</span>, <span class="comment">// 25kb</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">generator</span>: &#123;</span><br><span class="line">   <span class="attr">filename</span>: <span class="string">&#x27;images/[contenthash][ext][query]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ol><li>使用图片压缩工具压缩: tinyPng、Gzip (需后端配合) 等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// gzip</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">algorithm</span>: <span class="string">&quot;gzip&quot;</span>,</span><br><span class="line">    <span class="attr">threshold</span>: <span class="number">10240</span>,</span><br><span class="line">    <span class="attr">minRatio</span>: <span class="number">0.8</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="代码分割和加载"><a href="#代码分割和加载" class="headerlink" title="代码分割和加载"></a>代码分割和加载</h3><ol><li>使用 SplitChunksPlugin 插件进行代码分割: 可以将公共的依赖模块抽取成 chunk，并且将多个 chunk 之间的重复依赖提取成单独的 chunk</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>按需加载: 资源动态加载，使用 React.lazy() 函数或者 import() 语法，可以实现组件的按需加载</li></ol><h3 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h3><blockquote><p>CDN: 内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。 CDN 其实是通过优化物理链路层传输过程中的网速有限、丢包等问题来提升网速的，其大致原理可以如下:  因为 CDN 都有缓存，所以为了避免 CDN 缓存导致用户加载到老版本的问题，需要遵循以下规则: </p></blockquote><ul><li>针对 HTML 文件: 不开启任何缓存，不放入 CDN</li><li>针对静态 JS 、CSS 、图片等文件: 开启 CDN 和缓存，放入 CDN 服务器，并且给每一个文件名带入 Hash 值，避免文件重名导致访问到同名缓存废弃文件的问题</li><li>介于浏览器对同一时刻、同一域名的请求个数有限制的状况，请求资源过多的话，可能导致加载文件被阻塞。所以，当同一时间加载资源过多时，我们可以针对不同的文件类型放入不同的 CDN 上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 1. 在 output 中设置 publicPath</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;http://cdn.example.com/&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 配置 externals，将一些第三方库从打包文件中抽离出来，以便于在 HTML 文件中引入 CDN 资源。</span></span><br><span class="line">  <span class="comment">//    当使用 externals 时，需要在页面中手动引入对应的 CDN 资源</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;https://cdn.example.com/jquery.min.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 使用插件 html-webpack-plugin，可以在打包后的 HTML 文件中自动插入对应的 CDN 资源链接</span></span><br><span class="line">  <span class="comment">// 4. 使用 copy-webpack-plugin，若存在一些与打包无关的静态资源，此插件将其从源码目录复制到</span></span><br><span class="line">  <span class="comment">//    打包后的目录中，同时修改 HTML 文件中的引用路径为 CDN 地址</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">publicPath</span>: <span class="string">&#x27;https://cdn.example.com/&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">from</span>: <span class="string">&#x27;src/assets&#x27;</span>,</span><br><span class="line">          <span class="attr">to</span>: <span class="string">&#x27;assets&#x27;</span>,</span><br><span class="line">          <span class="title function_">transformPath</span>(<span class="params">targetPath</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;PUBLIC_PATH&#125;</span><span class="subst">$&#123;targetPath&#125;</span>`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 设置 Cache-Control 和 Expires 响应头，可以让浏览器在第一次请求时缓存资源，</span></span><br><span class="line"><span class="comment">//    并在过期前使用本地缓存，从而减少重复请求数据</span></span><br><span class="line">location /<span class="keyword">static</span>/ &#123;</span><br><span class="line">  expires 1d;</span><br><span class="line">  add_header <span class="title class_">Cache</span>-<span class="title class_">Control</span> <span class="string">&quot;public&quot;</span>;</span><br><span class="line">  alias /www/<span class="keyword">static</span>/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化打包速度"><a href="#优化打包速度" class="headerlink" title="优化打包速度"></a>优化打包速度</h3><ol><li>使用 HappyPack : 可以将 loader 进行多线程并行处理，加快速度 (thread-loader 也可以启用多线程)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HappyPack</span> = <span class="built_in">require</span>(<span class="string">&quot;happypack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;happypack/loader?id=js&quot;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HappyPack</span>(&#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&quot;js&quot;</span>, <span class="comment">// 代表唯一标识符</span></span><br><span class="line">      <span class="attr">threads</span>: <span class="number">4</span>, <span class="comment">// 代表启动的线程数</span></span><br><span class="line">      <span class="attr">loaders</span>: [<span class="string">&quot;babel-loader&quot;</span>], <span class="comment">// 要处理的loader</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>使用 DLLPlugin 进行预编译: 可以将第三方库先进行打包，然后在开发时直接使用已经打包好的 dll 文件，从而减少重复打包的时间</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">vendors</span>: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;react-dom&quot;</span>, <span class="string">&quot;lodash&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].dll.js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;/dll&quot;</span>,</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&quot;[name]_lib&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">context</span>: __dirname,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;[name]_lib&quot;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;[name].manifest.json&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>使用 IgnorePlugin 忽略部分模块: 忽略掉不需要的模块，在打包时跳过它们，从而提升打包速度。</li></ol><blockquote><p>也可以使用 exclude 、include 来指定需要特定 loader 编译的文件，并非不编译，而是使用默认的 loader 还是指定 loader 的区别。exclude 的优先级高于 include</p><p>Webpack 配置中的 module.noParse 则是在 include/exclude 的基础上，进一步省略了使用默认 js 模块编译器进行编译的时间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">   <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">   <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">   <span class="attr">use</span>: [</span><br><span class="line">       <span class="string">&#x27;babel-loader&#x27;</span></span><br><span class="line">   ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">IgnorePlugin</span>(<span class="regexp">/^\.\/locale$/</span>, <span class="regexp">/moment$/</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>设置 resolve.alias 配置: 可以将一些常用的模块路径映射为绝对路径，从而缩短 Webpack 查找模块的时间</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">      <span class="attr">react</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;node_modules/react/cjs/react.production.min.js&quot;</span></span><br><span class="line">      ),</span><br><span class="line">      <span class="string">&quot;react-dom&quot;</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;node_modules/react-dom/cjs/react-dom.production.min.js&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>TypeScript 编译优化</li></ol><ul><li>使用 ts-loader: 默认在编译前进行类型检查，因此编译时间往往比较慢，通过加上配置项 transpileOnly: true，可以在编译时忽略类型检查</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">transpileOnly</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><ul><li>使用 babel-loader: 需要单独安装 @babel/preset-typescript 来支持编译 TS,配合 ForkTsCheckerWebpackPlugin 使用类型检查功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;babel-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">TSCheckerPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">typescript</span>: &#123;</span><br><span class="line">        <span class="attr">diagnosticOptions</span>: &#123;</span><br><span class="line">          <span class="attr">semantic</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">syntactic</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="其他优化项"><a href="#其他优化项" class="headerlink" title="其他优化项"></a>其他优化项</h3><blockquote><p>结合其他插件: MiniCssExtractPlugin、Webpack Shell Plugin、Autoprefixer</p></blockquote><ol><li>Scope Hoisting (作用域提升)</li></ol><blockquote><p>普通打包只是将一个模块最终放入一个单独的函数中,如果模块很多，就意味着在输出结果中会有很多的模块函数。concatenateModules 配置的作用,尽可能将所有模块合并到一起输出到一个函数中，既提升了运行效率，又减少了代码的体积</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ... 其他配置项</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 模块只导出被使用的成员</span></span><br><span class="line">    <span class="attr">usedExports</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 尽可能合并每一个模块到一个函数中</span></span><br><span class="line">    <span class="attr">concatenateModules</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>parallel-webpack</li></ol><blockquote><p>并发构建的第二种场景是针对与多配置构建。Webpack 的配置文件可以是一个包含多个子配置对象的数组，在执行这类多配置构建时,默认串行执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = [</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./pageA.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;pageA.bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./pageB.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;pageB.bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多入口并发构建</span></span><br><span class="line"><span class="string">&quot;build:parallel&quot;</span>: <span class="string">&quot;parallel-webpack --config webpack.parallel.config.js&quot;</span></span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// &#x27;production&#x27;, //&#x27;development&#x27;,</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.js&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">presets</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.jpg$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;file-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">include</span>: &#123;</span><br><span class="line">          <span class="attr">and</span>: [path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./src/&quot;</span>)],</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// &#x27;./lib/style-loader&#x27;,</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;./lib/style-loader&quot;</span>, <span class="string">&quot;./lib/less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">        &#123;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">inject</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">template</span>: <span class="string">&quot;./index.html&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包工具</title>
      <link href="/articles/engineering/packTools/"/>
      <url>/articles/engineering/packTools/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/engineering/pTools_1.png" alt=""></p><h2 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h2><blockquote><p>流式工程化 pipeline</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line">gulp.<span class="title function_">src</span>(<span class="string">&#x27;xxx.js&#x27;</span>)  <span class="comment">// 获取流的目标</span></span><br><span class="line">  .<span class="title function_">pipe</span>(            <span class="comment">// 途径过程编排</span></span><br><span class="line">    gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/xxx.js&#x27;</span>);  <span class="comment">// 流目的地</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h3 id="src"><a href="#src" class="headerlink" title="src()"></a>src()</h3><blockquote><p>获取到想要处理的流文件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">src</span>(globs[, options]); <span class="comment">// =&gt; stream 并非原本文件流，虚拟文件对象流 =&gt; 减少IO次数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. globs 文件匹配模式</span></span><br><span class="line"><span class="comment">// 使用数组的方式匹配文件种类</span></span><br><span class="line">gulp.<span class="title function_">src</span>([<span class="string">&#x27;./js/*.js&#x27;</span>, <span class="string">&#x27;./css/*.css&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. options 处理文件的配置项</span></span><br><span class="line"><span class="comment">// options.buffer - boolean 返回buffer，使用场景大文件 =&gt; false时，返回一个抽象的stream而非文件本身</span></span><br><span class="line"><span class="comment">// options.read - boolean文件内容是否返回 =&gt; 判断文件内容是否读取返回，file.content返回值</span></span><br><span class="line"><span class="comment">// options.base - 文件基础路径</span></span><br><span class="line">gulp.<span class="title function_">src</span>(<span class="string">&#x27;./main/js/*.js&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;main&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><ol><li>base 路径问题</li></ol><blockquote><ul><li>默认会以匹配模式中最左边的通配符之前的路径作为 base，并保留之前的目录结构</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base 路径是 src，最左边的通配符 * 之前的路径是 src，所以，src/js 目录下的所有 .js 文件会被复制到 dist/js 目录中，最终产物的路径会保留 src 之后的目录结构</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&quot;src/js/*.js&quot;</span>).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// base 路径是 src/js，那么 src/js 目录下的所有 .js 文件会被直接复制到 dist 目录中，而不会保留 src/js 这一层目录结构</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&quot;src/js/*.js&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;src/js&quot;</span> &#125;).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;dist&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>通配符分类</li></ol><ul><li><code>*</code>: 匹配任意数量的任意字符，但不包括路径分隔符 <code>/</code></li><li><code>**</code>: 匹配任意数量的任意字符，包括路径分隔符 <code>/</code>，可以用于递归匹配</li><li><code>?</code>: 匹配单个任意字符</li></ul><h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe()"></a>pipe()</h3><blockquote><p>把文件流通过 pipe 形式导入到 gulp 的通路中，途径插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line">  .<span class="title function_">src</span>(<span class="string">&quot;./main/js/*.js&quot;</span>, &#123; <span class="attr">base</span>: <span class="string">&quot;main&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">minify</span>())</span><br><span class="line">  .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;build&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="dest"><a href="#dest" class="headerlink" title="dest()"></a>dest()</h3><blockquote><p>用于将处理后的文件写入到指定的目标路径<br>文件产出的路径是 gulp.dest(path) 指定的目录与 base 之后的目录结构的组合</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">dest</span>(path[, options])</span><br><span class="line"><span class="comment">// 1. path - 写入文件的路径</span></span><br><span class="line"><span class="comment">// 2. options可选参数</span></span><br><span class="line">  <span class="comment">// options.mode - string 0777 所在目录的权限</span></span><br></pre></td></tr></table></figure><h3 id="watch"><a href="#watch" class="headerlink" title="watch()"></a>watch()</h3><blockquote><p>监视文件变化，用以触发相应编排流程的开展</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">watch</span>(glob[, opts], tasks);</span><br><span class="line"><span class="comment">// glob - 监视文件的匹配模式</span></span><br><span class="line"><span class="comment">// tasks - 文件变化后要执行的任务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 任务内容</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main minify&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;uglify&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 任务内容</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main uglify&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt; 4.0版本</span></span><br><span class="line">gulp.<span class="title function_">watch</span>(<span class="string">&#x27;./page/**/*.js&#x27;</span>, [<span class="string">&#x27;uglify&#x27;</span>, <span class="string">&#x27;minify&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; 4.0版本</span></span><br><span class="line">gulp.<span class="title function_">watch</span>(</span><br><span class="line">  <span class="string">&#x27;./page/**/*.js&#x27;</span></span><br><span class="line">  gulp.<span class="title function_">parallel</span>(</span><br><span class="line">    [<span class="string">&#x27;uglify&#x27;</span>, <span class="string">&#x27;minify&#x27;</span>]</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="task"><a href="#task" class="headerlink" title="task()"></a>task()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> gulp.<span class="title function_">task</span>(name[, deps], fn)</span><br><span class="line"> <span class="comment">// name - 任务名</span></span><br><span class="line"> <span class="comment">// deps - 当前任务所依赖的前置 =&gt; 当前任务会在所有依赖的指向完成后，被调用执行</span></span><br><span class="line"> <span class="comment">// fn - 执行函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量执行/打包任务</span></span><br><span class="line"> gulp.<span class="title function_">task</span>(<span class="string">&#x27;js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> gulp.<span class="title function_">task</span>(<span class="string">&#x27;es&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;es&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> gulp.<span class="title function_">task</span>(<span class="string">&#x27;webpack&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> gulp.<span class="title function_">task</span>(<span class="string">&#x27;main&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">   [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;es&#x27;</span>, <span class="string">&#x27;webpack&#x27;</span>]</span><br><span class="line"> ))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 异步任务不会等待</span></span><br><span class="line"> gulp.<span class="title function_">task</span>(<span class="string">&#x27;async&#x27;</span>, <span class="title function_">funtion</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="title function_">setTimout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;main async&#x27;</span>)</span><br><span class="line">   &#125;, <span class="number">1000</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="webpack-gulp"><a href="#webpack-gulp" class="headerlink" title="webpack / gulp"></a>webpack / gulp</h2><ol><li>执行粒度上</li></ol><ul><li>webpack: 以功能依赖模块为粒度，区分 loaders 或 plugins</li><li>gulp: 以任务为配置粒度，配置是将依赖、工具、功能抽象组装成任务，编排成任务流</li></ul><ol><li>执行顺序上</li></ol><ul><li>webpack: 以文件类型负责区域来网状构造项目，弱化顺序项目复杂程度</li><li>gulp: 流式的方式串联每一项工具依赖，更适合作为自动化工具链来使用</li></ul><h2 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h2><h3 id="webpack-升级"><a href="#webpack-升级" class="headerlink" title="webpack 升级"></a>webpack 升级</h3><h4 id="v3-gt-v4"><a href="#v3-gt-v4" class="headerlink" title="v3 =&gt; v4"></a>v3 =&gt; v4</h4><ol><li>零配置</li></ol><blockquote><ul><li>不强制依赖 webpack.config.js =&gt; 默认项: entry: ‘./src/index.js &amp; output: ‘./dist/main.js’</li><li>wepack-cli 分离安装</li></ul></blockquote><ol><li>状态上</li></ol><blockquote><ul><li>提供 mode 区分 development &amp; production，提升开发编译效率，专注于编译产品</li></ul></blockquote><ol><li>scope hoisting</li></ol><blockquote><ul><li>作用域提升: 分析模块之间的依赖关系，将所有模块的代码按照顺序放在一个函数作用域中，减少函数闭包的数量，从而减小打包后的文件体积，提高代码的执行效率</li><li>开启方式: Webpack 4 开始，默认开启，但需要使用 ES6 模块语法</li></ul></blockquote><ol><li>tree shaking</li></ol><blockquote><ul><li>摇树优化: 在打包过程中静态分析模块之间的导入和导出关系，找出那些没有被引用的代码 (死代码)，并将其从打包结果中移除，从而减小打包后的文件体积</li><li>开启方式: ES6 模块语法 + production 自动开启</li></ul></blockquote><ol><li>细节配置差异</li></ol><blockquote><ul><li>commonChunkPlugin =&gt; splitChunks</li><li>loaders =&gt; rules</li><li>css loader 增加 use</li><li>css-loader =&gt; style-loader =&gt; miniCssExtract.loader</li></ul></blockquote><h4 id="v4-优化"><a href="#v4-优化" class="headerlink" title="v4 优化"></a>v4 优化</h4><blockquote><p>对产品打包以及开发编译的速度做出了优化</p></blockquote><h4 id="v4-gt-v5"><a href="#v4-gt-v5" class="headerlink" title="v4 =&gt; v5"></a>v4 =&gt; v5</h4><ol><li>持久化缓存: 阶段性编译结果存放如持久化缓存磁盘区域</li></ol><blockquote><ul><li>v4 需要使用插件，hard-source-webpack-plugin</li><li>development，cache.type 默认被设置为 ‘memory’；production，默认开启，且 cache.type 通常建议设置为 ‘filesystem’</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">cache</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;fileSystem&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>资源模块: 通过规整统一处理资源文件，优化资源文件引入的方式，直接与文件目标结合处理</li></ol><blockquote><ul><li>old: raw-loader、url-loader、file-loader</li><li>new: asset/resource =&gt; file-loader、asset/inline =&gt; url-loader、asset/source =&gt; raw-loader</li></ul></blockquote><ol><li>打包优化</li></ol><blockquote><ul><li>tree-shaking: 跨模块 shaking</li><li>splitchunk: 精细化配置</li></ul></blockquote><ol><li>代码压缩<blockquote><p>自带 js 压缩功能，v4 需要下载安装 terser-webpack-plugin 插件</p></blockquote></li></ol><h4 id="v5-优化"><a href="#v5-优化" class="headerlink" title="v5 优化"></a>v5 优化</h4><blockquote><p>进一步优化配置，优化编译速度以及包大小</p></blockquote><h3 id="webpack-插件"><a href="#webpack-插件" class="headerlink" title="webpack 插件"></a>webpack 插件</h3><h4 id="缓存加速"><a href="#缓存加速" class="headerlink" title="缓存加速"></a>缓存加速</h4><blockquote><ul><li>cache-loader，缓存耗时的工作</li><li>terser-webpack-plugin / uglifyjs-webpack-loguin 的 cache 以及 parrallel</li></ul></blockquote><h4 id="减肥瘦身"><a href="#减肥瘦身" class="headerlink" title="减肥瘦身"></a>减肥瘦身</h4><blockquote><ul><li>imagemin-webpack-plugin 批量压缩图片</li><li>purifycss-wepack，删除未使用的 css 代码</li><li>optimize-css-assets-webpack-plugin, 压缩 css</li></ul></blockquote><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote><ul><li>cleanWebpackPlugin，打包前清理上次项目生成的 bundle 文件</li><li>happypack…</li></ul></blockquote><h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><blockquote><ul><li>冷启动 / 冷服务: 开发状态下不重新走编译打包</li><li>热更新: 更新源文件时依旧可以实时更新视图</li><li>按需更新: 不刷新所有节点，只更新改动部分</li></ul></blockquote><h3 id="vs-webpack"><a href="#vs-webpack" class="headerlink" title="vs webpack"></a>vs webpack</h3><blockquote><p>webpack - 编译支撑开发</p><ul><li>打包生成 bundle =&gt; 启动 dev-server =&gt; 建立开发环境</li><li>HMR =&gt; 改动到的模块以及相关依赖重新打包编译</li></ul><p>vite - 路由劫持 + 实时编译</p><ul><li>启动 dev-server =&gt; 直接请求所需模块并且实时编译（rollup js 模块打包器 AMD CJS =&gt; ESM）</li><li>HMR =&gt; 让浏览器重新请求当前页面所需模块 =&gt; 利用浏览器的强缓存和协商缓存优化请求（源码模块协商缓存，依赖模块用强缓存）</li></ul><p>总结</p></blockquote><ol><li>省去打包生成 bundle 过程</li><li>通过 rollup 对模块进行按需实时编译</li><li>利用缓存机制对不同模块进行缓存优化</li></ol><h3 id="dev-prod"><a href="#dev-prod" class="headerlink" title="dev / prod"></a>dev / prod</h3><blockquote><p>dev: esbuilder</p><ul><li>依赖预构建 cjs / AMD =&gt; ESM</li><li>依赖缓存到 node_modules/.vite</li><li>package.json / lockfile / vite.config.js =&gt; 三者之一触发 =&gt; 重新预构建</li><li>通过浏览器的缓存机制 =&gt; 缓存请求处理 =&gt; 提升页面性能</li></ul><p>prod: rollup</p></blockquote><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>原生的 ts 支持</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>原生的文件引入支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./src/assets/reset.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./src/assets/mock.json&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>新增依赖支持，vite.config.js</li></ul><h3 id="原理实践"><a href="#原理实践" class="headerlink" title="原理实践"></a>原理实践</h3><blockquote><p>vite 缓存控制依赖模块，浏览器缓存控制静态资源、业务代码、js 文件等</p></blockquote><ol><li>ESM 静态定义，编译时做加载 =&gt; 生成只读引用</li><li>路由脚本进入只引用需要被加载模块 from 只读引用 =&gt; 实时编译运行包含依赖的代码</li><li>浏览器缓存优化 =&gt; 分模块按需加载，未变化直接用缓存 / 模块变化只更新模块</li></ol><h2 id="主流构建工具"><a href="#主流构建工具" class="headerlink" title="主流构建工具"></a>主流构建工具</h2><h3 id="底层-JS-TS-转译器"><a href="#底层-JS-TS-转译器" class="headerlink" title="底层 JS/TS 转译器"></a>底层 JS/TS 转译器</h3><blockquote><p>纯粹用于将 TypeScript/JavaScript/JSX 编译到某种特定运行环境下的底层转译器，代表有 BabelO(Js)、TSC(Ts)、esbuild(Go) 和 SWC(Rust) 等。虽然我将它们归类为转译器，但是它们大都也支持打包的能力，比如 esbuild 就把自己定位为打包器。</p></blockquote><h3 id="上层打包器"><a href="#上层打包器" class="headerlink" title="上层打包器"></a>上层打包器</h3><blockquote><p>通常不会具备转译能力，而是借助上面提到的这些转译器来实现转移能力。它们更专注于完成一些范围更广、更加具体的打包任务。代表有 Webpack、Rollup、Parcel、esbuild、Snowpack、Vite、wmr、microbundle、tsup、tsdx、tsup 等。</p></blockquote><h4 id="dev-环境"><a href="#dev-环境" class="headerlink" title="dev 环境"></a>dev 环境</h4><ol><li>通过监听源代码变化然后重新构建项目将打包后的代码推送到浏览器的传统模式</li></ol><ul><li>Webpack+Babel</li><li>Rollup: 通常打包第三方库</li><li>Parcel: 和 Webpack 的功能类似，但是它简化了配置，号称零配置、开箱即用。Parcel 2 的 JS 转译器部分基于 SWC 进行开发，性能有很大提升。</li></ul><ol><li>通过浏览器的原生 module 来实现动态打包的 bundleless 模式</li></ol><ul><li>Snowpack: 最大的特点就是闪电般的速度。最终部署它会使用 Webpack/Parcel 插件。不过已经不再积极维护了</li><li>Vite: 也是以速度著称，打包部分使用 Rollup，所以最终部署时打包体积相比 Snowpack 会更小。</li><li>wmr: 非常轻量级的打包工具，它没有任何 npm 依赖。所以它没有 Snowpack 和 Vite 成熟，但是 wmr 更适合用在 Preact 或者一些简单的项目上</li></ul><h4 id="ts-打包器"><a href="#ts-打包器" class="headerlink" title="ts 打包器"></a>ts 打包器</h4><ul><li>TSDX: 对自身的定位不是一个打包器那么简单，而是覆盖了一个 TypeScript 项目开发时所需的所有东西的零配置 CLI: Rollup、Jest、tsc、yarn、TSLint、VSCode……，有点 All in One 的感觉。</li><li>tsup: 优势也是零配置，并且底层是使用 esbuild 作为支持的。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点:"></a>优缺点:</h3><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><ul><li>热更新方面: webpack 支持 HMR，但是 webpack 需要全部重新编译并更新，效率较低</li><li>tree-shaking: webpack2 开始支持且消除效果不好，但是 webpack5 有更好的 tree-shaking（去除未使用代码）</li><li>分包方面: webpack 支持代码切割。（分包）</li><li>ESM 打包: 现在 webpack 支持 es6module 输出</li></ul><h4 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h4><blockquote><p>优点</p></blockquote><ul><li>Rollup 是一款 ES Modules 打包器，从作用上来看，Rollup 与 Webpack 非常类似。不过相比于 Webpack，Rollup 要小巧的多，打包生成的文件更小。（识别 commonJs 需要插件）</li><li>热更新: Rollup 不支持 HMR，在对 js 以外的模块的支持上不如 webpack，但是如果是打包纯 js 库例如 react，前期的 vue 的话，使用 rollup 是很合适的，打包的产物比较干净，没有 webpack 那么多工具函数</li><li>Rollup 的插件机制设计得相对更干净简洁，单个模块的 resolve / load / transform 跟打包环节完全解耦，所以 Vite 才能在开发时模拟 Rollup 的插件机制，并且兼容大部分 Rollup 插件</li><li>rollup 原生支持 tree-shaking</li></ul><blockquote><p>缺点</p></blockquote><ul><li>加载其他类型的资源文件或者支持导入 CommonJS 模块，又或是编译 ES 新特性，这些额外的需求 Rollup 需要使用插件去完成</li><li>rollup 并不适合开发应用使用，因为需要使用第三方模块，而目前第三方模块大多数使用 CommonJs 方式导出成员，并且 rollup 不支持 HMR，使开发效率降低</li></ul><h4 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h4><blockquote><p>组成: </p><ul><li>一个开发服务器，它基于 原生 ES 模块 提供了丰富的内建功能，如速度很快的 【模块热更新 HMR】</li><li>一套构建指令，它使用 Rollup 打包你的代码，并且它是预配置的，可以输出用于生产环境的优化过的静态资源</li></ul><p>特点: </p><ul><li>快速的冷启动: vite 会直接启动开发服务器，不需要进行打包操作，所以不需要分析模块的依赖、不需要编译，因此启动速度非常快</li><li>即时的模块热更新</li><li>真正的按需编译: 利用现代浏览器支持 ES Module 的特性，当浏览器请求某个模块的时候，再根据需要对模块的内容进行编译，这种方式大大缩短了编译时间</li></ul><p>优点</p></blockquote><ol><li>vite 热更新，实现按需编译，按模块更新。（快）</li></ol><ul><li>在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失效，使 HMR 更新始终快速，无论应用的大小。</li><li>Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）: 源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。</li><li>热更新原理: 在热模块 HMR 方面，当修改一个模块的时候，仅需让浏览器重新请求该模块即可，无须像 webpack 那样需要把该模块的相关依赖模块全部编译一次，效率更高</li></ul><ol><li>vite 在生产环境通过 Rollup 进行打包（特点: 打包体积小），生成 esm 模块包。（特点: 快）</li></ol><ul><li>vite 在开发环境时，基于浏览器支持 esm，让浏览器解析模块，然后服务器按需编译返回。同时基于 esbuild（go）进行预构建打包不常变动的第三包，并用进行缓存。（缓存+快）</li><li>Vite 使用 esbuild 预构建依赖。Esbuild 使用 Go 编写，并且比以 Node.js 编写的打包器预构建依赖快 10-100 倍。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>生态: 生态不如 webpack，wepback 在于 loader 和 plugin 非常丰富</li><li>prod 环境的构建: 目前用的 Rollup，原因在于 esbuild 对于 css 和代码分割不是很友好</li><li>还没有被大规模使用,很多问题或者诉求没有真正暴露出来</li></ul><h2 id="前端测试"><a href="#前端测试" class="headerlink" title="前端测试"></a>前端测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ol><li>覆盖率: 测试案例覆盖的场景</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">top10</span>(<span class="params">number, sum</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (number &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (sum += number);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">top10</span>(<span class="number">8</span>);</span><br><span class="line"><span class="title function_">top10</span>(<span class="number">9</span>);</span><br><span class="line"><span class="comment">// 覆盖率 =&gt; 50%</span></span><br></pre></td></tr></table></figure><ol><li>单元拆分</li></ol><ul><li>逻辑闭环的最小模块</li><li>最小实现的视图组件</li></ul><ol><li>环境准备</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 依赖安装</span></span><br><span class="line">npm i --save-dev jest</span><br><span class="line">npm i @type/jest babel-jest @vue/test-utlis@next @testing-library/jest-dom ts-jest vue-jest @babel/preset-env --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 配置babel</span></span><br><span class="line"><span class="comment">// jest文件支持es6语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 配置jest</span></span><br></pre></td></tr></table></figure><h3 id="E2E-测试"><a href="#E2E-测试" class="headerlink" title="E2E 测试"></a>E2E 测试</h3><blockquote><p>业务功能触发，不关注具体实现，只验证是否实现业务功能 =&gt; 开发 or 测试，例如 cypress 库</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器性能优化</title>
      <link href="/articles/engineering/browser/"/>
      <url>/articles/engineering/browser/</url>
      
        <content type="html"><![CDATA[<h2 id="Navigation-Timing"><a href="#Navigation-Timing" class="headerlink" title="Navigation Timing"></a>Navigation Timing</h2><p><img src="/images/engineering/browser_1.png" alt=""></p><p><img src="/images/engineering/browser_2.png" alt=""></p><ol><li>navigationStart</li></ol><blockquote><p>前一个文档卸载时间戳 =&gt; 无上一层页面时，从 fetchStart 开始</p></blockquote><ol><li>unloadEventStart / unloadEventEnd</li></ol><blockquote><p>与前一个网页 unload 时的时间戳 =&gt; 无上一个网页，默认 0<br>执行完毕的时间戳</p></blockquote><ol><li>redirectStart / redirectEnd</li></ol><blockquote><p>通常用来计算 redirect 完成的时间</p></blockquote><ol><li>worker</li></ol><blockquote><p>worker 初始化时间</p></blockquote><ol><li>fetchStart</li></ol><blockquote><p>整个全新开始页面的 start<br>浏览器网络层 ready 的时间</p></blockquote><ol><li>domainInLookupStart / domainInLookupEnd</li></ol><blockquote><p>DNS 连接的开始结束</p></blockquote><ol><li>connectStart / connectEnd</li></ol><blockquote><p>TCP 连接的开始结束</p><ul><li><code>connectEnd</code> - <code>domainInLookupStart</code> 为网络的建立连接过程</li><li><code>secureConnectionStart</code>: 若使用 https 会有此过程，建立安全链接</li></ul></blockquote><ol><li>requestStart / responseEnd</li></ol><blockquote><p>整个请求的发起开始到完成接收耗时</p></blockquote><h2 id="Processing"><a href="#Processing" class="headerlink" title="Processing"></a>Processing</h2><blockquote><p>纯前端可做的性能优化，主要集中在 dom 渲染过程中</p></blockquote><ol><li>domLoading</li></ol><blockquote><p>开始解析渲染 dom 树的事件 =&gt; readyStateChange</p></blockquote><ol><li>domInterActive</li></ol><blockquote><p>完成了 dom 树的解析 =&gt; readyStateChange =&gt; 只是完成了 dom 树的解析，并没有开始加载网页资源 (async/defer)</p><ul><li><code>domInterActive</code> - <code>domLoading</code> 为解析 dom 树的时间</li></ul></blockquote><ol><li>domContentLoaddedEventStart / domContentLoaddedEventEnd</li></ol><blockquote><p>Dom 树解析完成后，资源的加载</p></blockquote><ol><li>domComplete</li></ol><blockquote><p>Dom 树 ready</p><ul><li><code>domComplete</code> - <code>domLoading</code> 为整个 dom 树初始化所需要的时间</li></ul></blockquote><ol><li>loadEventStart / loadEventEnd</li></ol><blockquote><p>执行脚本开始与结束</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="attr">javascript</span>:(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> performance = <span class="variable language_">window</span>.<span class="property">performance</span>.<span class="property">timing</span>;</span><br><span class="line">  <span class="keyword">const</span> pageLoadTime = performance.<span class="property">loadEventEnd</span> - performance.<span class="property">navigationStart</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印、上报、存储</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前页面加载耗时: &#x27;</span>, pageLoadTime, <span class="string">&#x27;ms&#x27;</span>);</span><br><span class="line">  &#125;)()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="W3C-Paint-Timing"><a href="#W3C-Paint-Timing" class="headerlink" title="W3C Paint Timing"></a>W3C Paint Timing</h2><blockquote><p>新时代下的指标</p></blockquote><ol><li>DCL(DOMContentLoad): HTML 加载完成时间</li><li>L(onLoad): 页面所有资源加载完成时间</li></ol><blockquote><p>performance.getEntriesByType(‘paint’) 获取以下两个时间点的值</p></blockquote><ol><li>FP(First Paint): 页面在导航后首次呈现出不同于导航前内容的时间点</li><li>FCP(Fisrt Contentful Paint): 首次绘制任何文本、图像、非空白 canvas 或 svg 的时间点</li><li>FMP(First Meaningful Paint): 首次绘制页面“主要内容”的时间点</li><li>LCP(Largest Contentful Paint): 可视区域“内容”最大的可见元素开始出现在页面上的时间点</li><li>CLS(Cumulative Layout Shift): 表示用户经历的意外 layout 的频率</li><li>TBT(Total Blocking Time): 表示从 FCP 到 TTI(可交互时间 Time to Interactive) 之间所有 long task 的阻塞时间之和</li></ol><h2 id="Core-Web-Vitals"><a href="#Core-Web-Vitals" class="headerlink" title="Core Web Vitals"></a>Core Web Vitals</h2><blockquote><p>CWV 网页核心性能指标<br>加载、交互、视觉稳定 —— 代表不同方向的衡量标准 + 可衡量且接近真是体验的数据化参数</p></blockquote><h3 id="Largest-Contentful-Paint-LCP"><a href="#Largest-Contentful-Paint-LCP" class="headerlink" title="Largest Contentful Paint(LCP)"></a>Largest Contentful Paint(LCP)</h3><blockquote><p>衡量装载的性能<br>页面加载前 2.5s 内，必须要进行最大内容的渲染</p></blockquote><ol><li>什么是最大内容</li></ol><ul><li>图片 <code>&lt;image&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;svg&gt;</code></li><li>视频 <code>&lt;video&gt;</code></li><li>通过 url 加载内容的模块 (例如 background 为 url)</li><li>主要文本模块以及其内联模块</li></ul><ol><li>LCP 值低下的原因及解决方案</li></ol><ul><li>资源慢: 使用缓存 =&gt; 强缓存 + 协商缓存</li><li>渲染被阻断: 简化结构与逻辑 + 内联、合并方式简化整体解析逻辑</li><li>资源交互: 图片分类 =&gt; 1. 图片上传 2. 云资源管理</li><li>静态资源: CDN</li></ul><h3 id="First-Input-Delay-FID"><a href="#First-Input-Delay-FID" class="headerlink" title="First Input Delay(FID)"></a>First Input Delay(FID)</h3><blockquote><p>衡量交互体验<br>页面首次输入延迟小于 100ms</p></blockquote><ol><li>减少 JS 的执行时间</li></ol><ul><li>优化算法</li><li>尽量减少 JS 的占用:  空间 + 时间</li><li>首屏加载:  1. 服务端渲染 2. 预加载、懒加载</li></ul><ol><li>解决长任务问题</li></ol><ul><li>阻塞渲染 50ms 以上:  尽量拆分，或者交互弥补</li></ul><ol><li>提升性能来帮助提速</li></ol><ul><li>JS workers: Web worker | service worker | worklet</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="comment">// 新增一个worker</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;worker.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main thread 通信</span></span><br><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&quot;Come on &amp; work~&quot;</span>);</span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* worker.js */</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">  <span class="comment">// 回调主人喊话 =&gt; 业务逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 完成后发给main</span></span><br><span class="line">  self.<span class="title function_">postMessage</span>(<span class="comment">/* 业务逻辑 */</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// service worker - 网络 + 内存</span></span><br><span class="line"> <span class="comment">/* main.js */</span></span><br><span class="line"> navigator.<span class="property">seviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;service-worker.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/* service-worker.js */</span></span><br><span class="line"> self.<span class="title function_">addEventLister</span>(<span class="string">&quot;install&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span><br><span class="line"> self.<span class="title function_">addEventLister</span>(<span class="string">&quot;activate&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span><br><span class="line"> self.<span class="title function_">addEventLister</span>(<span class="string">&quot;fetch&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">     e.<span class="title function_">respondwith</span>(</span><br><span class="line">         caches.<span class="title function_">match</span>(event.<span class="property">request</span>);</span><br><span class="line">     )</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器概念流程:  JS =&gt; style =&gt; layout =&gt; paint =&gt; composite</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="variable constant_">CSS</span>.<span class="property">paintWorklet</span>.<span class="title function_">addModule</span>(<span class="string">&#x27;worklet.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* worklet.js */</span></span><br><span class="line"><span class="title function_">registerPaint</span>(<span class="string">&#x27;myGradient&#x27;</span>, <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">paint</span>(<span class="params">ctx, size, prop</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> gradient = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, size.<span class="property">height</span> - <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">        ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, size.<span class="property">width</span>, size.<span class="property">height</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* app */</span></span><br><span class="line">.<span class="property">content</span> &#123;</span><br><span class="line">    background-<span class="attr">image</span>: <span class="title function_">paint</span>(myGradient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cumulative-Layout-Shift-CLS"><a href="#Cumulative-Layout-Shift-CLS" class="headerlink" title="Cumulative Layout Shift(CLS)"></a>Cumulative Layout Shift(CLS)</h3><blockquote><p>衡量视觉稳定性<br>页面要保持 CLS 小于 0.1: 可见元素从前一帧到后一帧改变位置的动作</p></blockquote><ol><li>不使用无尺寸元素</li></ol><blockquote><p>srcset &amp; sizes: 根据屏幕自适应，多用于移动端，效果如 web 端的 media</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;width-320w.jpg 320w, width-480w.jpg 480w, width-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 320px) 300px, (max-width: 480px) 440px, 800px&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ol><li>减少内容内部的插入</li></ol><blockquote><p>影响到整体的布局</p></blockquote><ol><li>字体控制</li></ol><h3 id="CWV-工具"><a href="#CWV-工具" class="headerlink" title="CWV 工具"></a>CWV 工具</h3><blockquote><p>Core Web Vitals Annotations</p></blockquote><h2 id="性能评估指标-performance"><a href="#性能评估指标-performance" class="headerlink" title="性能评估指标 - performance"></a>性能评估指标 - performance</h2><h3 id="页面性能评估参考指标"><a href="#页面性能评估参考指标" class="headerlink" title="页面性能评估参考指标:"></a>页面性能评估参考指标:</h3><ol><li>FPS、CPU、网络请求</li><li>网络任务队列</li><li>JS 消耗时间、性能占用</li><li>浏览器绘制页面的帧布局</li></ol><h3 id="工程化监控体系"><a href="#工程化监控体系" class="headerlink" title="工程化监控体系"></a>工程化监控体系</h3><ol><li>上报 =&gt; 信息采集 =&gt; 数据回收 =&gt; 获取场景数据</li><li>数据分析 =&gt; timing 节点计算 =&gt; 阈值设置 + 数据分类 + 数据重组</li><li>可视化展示<blockquote><p>一些埋点工具流程参考: growing.io (采集上报) =&gt; fineBi / powerBi (数据分析) =&gt; grafana (数据展示看板) =&gt; 钉钉、企业微信、飞书 webhook (监控信息告警)</p></blockquote></li></ol><h3 id="性能优化的另一种可能-bigpipe-——-页面分解成若干的-pagelet"><a href="#性能优化的另一种可能-bigpipe-——-页面分解成若干的-pagelet" class="headerlink" title="性能优化的另一种可能:  bigpipe —— 页面分解成若干的 pagelet"></a>性能优化的另一种可能:  bigpipe —— 页面分解成若干的 pagelet</h3><ol><li>服务前端接收客户端请求</li><li>node 生成 HTML * n =&gt; 若干个 pagelet</li><li>浏览器获取到 pagelet 后开始加载资源做 layout paint</li><li>客户端整合形成页面</li></ol><h3 id="MVVM-优化"><a href="#MVVM-优化" class="headerlink" title="MVVM 优化"></a>MVVM 优化</h3><ol><li>自身特性优化<br>vue - template<br>react - dom diff</li><li>技巧上的优化</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setNewState = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setSate</span>(&#123;</span><br><span class="line">        <span class="comment">/* */</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// 每点击一次新生成一个方法示例</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> &#123; this.setState(/* ^ */) &#125;&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 优化</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setNewState&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// computed代替watch</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">      <span class="title function_">preData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span> + data;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">preData</span>: <span class="string">&#x27;123&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">      <span class="title function_">preData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">preData</span> = <span class="string">&#x27;123&#x27;</span> + data;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="首屏方案选择"><a href="#首屏方案选择" class="headerlink" title="首屏方案选择"></a>首屏方案选择</h3><blockquote><p>几个方案的实现都依赖于 MutationObserver API 用于监听 DOM 变动</p><ul><li>在页面加载中 初始化 MutationObserver, 当每一次页面发生变化时，会去判断页面是不是一次有意义的变化，例如变化的标签是不是一些有意义需要统计的标签，例如 meta link script 这类标签就认为这一次变动是无意义的，无需后面的步骤</li><li>然后会记录下发生变化的时间，以及通过 setTag 给此次变化的 DOM 打上标记</li><li>一个简单的递归 DOM 树，为每一个在屏幕范围内具有大小的可见元素进行标记，一旦发现父级不满足要求就不会向下递归</li></ul></blockquote><p><img src="/images/engineering/browser_3.png" alt=""></p><ol><li>首屏内加载最慢的图片: 监听首屏内所有图片的 onload 事件，获取图片 onload 时间的最大值，即可获得近似的首屏时间。</li><li>页面的 DOM 树第一次稳定: 这个方案想要比较好的实现比较有难度，并且精确度值得商榷。</li><li>不够规范</li><li>最大变化: 在之前只通过大小一个维度来描述首屏的基础上，又衍生出了，计算最大的一次变化，通过层级、标签权重、元素面积等因素，通过计分的方式，记录下最大的一次变化。</li></ol><h2 id="首屏优化手段"><a href="#首屏优化手段" class="headerlink" title="首屏优化手段"></a>首屏优化手段</h2><ol><li>路由懒加载</li><li>非首屏使用异步组件</li><li>首屏不要使用组件延迟加载</li><li>静态资源 CDN</li><li>避免不必要的重定向</li><li>减少页面唯一域名，从而减少 DNS 查询次数/使用 dns prefetch 做预解析</li><li>减小首屏上 JS、CSS 等资源文件大小</li><li>服务端渲染</li><li>减少 DOM 的数量和层级</li><li>精灵图请求</li><li>loading 效果</li><li>gzip</li><li>图片懒加载</li><li>组件按帧率来分别加载: 结合 requestAnimationFrame 使用</li></ol><h2 id="requestAnimationFrame、setTimeout、setInterval"><a href="#requestAnimationFrame、setTimeout、setInterval" class="headerlink" title="requestAnimationFrame、setTimeout、setInterval"></a>requestAnimationFrame、setTimeout、setInterval</h2><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li>setTimeout: 这个函数会将要执行的代码或函数放入事件循环队列中，等待当前代码执行完毕后，再等待指定的时间后执行一次。如果设置了定时器，那么每隔一定时间就会执行一次代码，直到 clearTimeout 被调用或窗口被关闭。</li><li>setInterval: 与 setTimeout 类似，setInterval 也会将要执行的代码或函数放入事件循环队列中，但它在指定的时间间隔后会一直重复执行，直到 clearInterval 被调用或窗口被关闭。也就是说，setInterval 会不断地调用函数，直到被取消。</li><li>requestAnimationFrame: 这个函数的工作原理与 setInterval 和 setTimeout 略有不同。它会将回调函数加入到浏览器下一次重绘之前要执行的队列中。这样做的目的是为了确保动画的流畅度，因为浏览器会自动优化这个 API，只在浏览器处于激活状态并且页面处于可见状态时才会执行回调函数。此外，requestAnimationFrame 会根据系统的刷新率来自动匹配时间间隔，从而确保每帧动画的间隔时间尽可能地准确。</li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>执行时机: requestAnimationFrame 是由浏览器提供的 API，它会在浏览器下一次重绘之前执行回调函数。这意味着它能够确保动画的流畅度，并且能够自动匹配系统的刷新率。相比之下，setInterval 和 setTimeout 会在指定的时间间隔后执行回调函数，无论浏览器是否处于激活状态或正在进行其他操作。</li><li>性能优化: requestAnimationFrame 由浏览器自动优化，只在浏览器处于激活状态并且页面处于可见状态时才会执行回调函数。这可以节省 CPU、GPU 和内存的使用，特别是在移动设备上。相比之下，setInterval 和 setTimeout 不会自动优化，如果页面处于隐藏或不可见状态，它们会继续执行回调函数，这可能会导致资源的浪费。</li><li>回调函数执行时间: requestAnimationFrame 的回调函数会在浏览器下一次重绘之前执行，因此它能够确保回调函数的执行时间相对准确。相比之下，setInterval 和 setTimeout 的回调函数执行时间取决于浏览器事件循环中的队列和执行时间，因此可能会有一定的延迟</li><li>停止操作: requestAnimationFrame 的回调函数只会在浏览器下一次重绘之前执行一次，因此可以通过清除队列中的回调函数来停止操作。相比之下，setInterval 和 setTimeout 会不断地执行回调函数，直到 clearInterval 或 clearTimeout 被调用或关闭页面为止</li><li>函数节流: 在高频率事件(resize,scroll 等)中，为了防止在一个刷新间隔内发生多次函数执行，使用 requestAnimationFrame 可保证每个刷新间隔内，函数只被执行一次，这样既能保证流畅性，也能更好的节省函数执行的开销</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>setTimeout: 可用于在网页加载后延迟执行某些操作，例如加载页面内容、初始化组件等。也可用于定时触发某些操作，例如定时发送数据、定时检查任务等。</li><li>setInterval: 常用于需要周期性执行的操作，例如定时更新数据、定时触发事件等。在 web 端，如果列表需要定时更新，可以使用 setInterval 来定时获取列表的请求。另外，如果需要在某一特定情况下清除定时任务，可以使用 clearInterval 来停止定时器。</li><li>requestAnimationFrame: 主要用于实现流畅的动画效果。它会在浏览器下一次重绘之前执行指定的函数，避免了频繁的重绘导致的性能问题。requestAnimationFrame 会自动匹配系统的刷新率，从而确保每帧动画的间隔时间尽可能地准确。在需要反复触发的情况下，使用 requestAnimationFrame 可以避免连续调用导致的相互干扰。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN</title>
      <link href="/articles/engineering/cdn/"/>
      <url>/articles/engineering/cdn/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><ol><li>CDN 的全称是 (Content Delivery Network)，即内容分发网络。</li><li>组成: 分布式存储 + 负载均衡 + 网络请求的重定向 + 内容管理 + 全局的网络流量管理，后两项为核心。内容服务基于缓存服务器，也称作代理缓存。</li><li>将源站的资源缓存到位于全球各地的 CDN 节点上，用户请求资源时，就近返回节点上缓存的资源，而不需要每个用户的请求都从源站获取。</li><li>解决由于网络带宽小、用户访问量大、网点分布不均等原因，避免网络拥塞、缓解源站压力，提高用户访问网站的响应速度。</li></ol><h3 id="CDN-回源"><a href="#CDN-回源" class="headerlink" title="CDN 回源"></a>CDN 回源</h3><ol><li>回源是 CDN 领域的专用词，指的是 CDN 缓存服务器从源站获取所需要分发的资源。</li><li>CDN 缓存服务器一般是不会主动回源的，只有在缓存服务器缺少用户请求的资源时（可能是该资源 CDN 缓存服务器没有缓存，也可能是缓存过期），CDN 缓存服务器才会向源站发起请求，获取所需要分发的资源。</li><li>通常有三种情况: <ul><li>CDN 节点没有对应资源时主动到源站获取资源</li><li>缓存失效后，CDN 节点到源站获取资源</li><li>CDN 管理后台或者使用开放接口主动刷新</li></ul></li></ol><h2 id="CDN-工作原理"><a href="#CDN-工作原理" class="headerlink" title="CDN 工作原理"></a>CDN 工作原理</h2><h3 id="调度原理"><a href="#调度原理" class="headerlink" title="调度原理"></a>调度原理</h3><h4 id="传统网络访问过程"><a href="#传统网络访问过程" class="headerlink" title="传统网络访问过程"></a>传统网络访问过程</h4><ol><li>用户输入访问的域名,操作系统向 LocalDns 查询域名的 ip 地址</li><li>LocalDns 向 ROOT DNS 查询域名的授权服务器(这里假设 LocalDns 缓存过期)</li><li>ROOT DNS 将域名授权 dns 记录回应给 LocalDns</li><li>LocalDns 得到域名的授权 dns 记录后,继续向域名授权 dns 查询域名的 ip 地址</li><li>域名授权 dns 查询域名记录后，回应给 LocalDns</li><li>LocalDns 将得到的域名 ip 地址，回应给用户端</li><li>用户得到域名 ip 地址后，访问站点服务器</li><li>站点服务器应答请求，将内容返回给客户端</li></ol><h4 id="CDN-访问过程"><a href="#CDN-访问过程" class="headerlink" title="CDN 访问过程"></a>CDN 访问过程</h4><blockquote><p>用户-本地 DNS-根 DNS-授权 DNS-智能调度 DNS-CDN 节点 IP</p></blockquote><ol><li>用户输入访问的域名,操作系统向 LocalDns 查询域名的 ip 地址</li><li>LocalDns 向 ROOT DNS 查询域名的授权服务器(这里假设 LocalDns 缓存过期)</li><li>ROOT DNS 将域名授权 dns 记录回应给 LocalDns</li><li>LocalDns 得到域名的授权 dns 记录后,继续向域名授权 dns 查询域名的 ip 地址</li><li>域名授权 dns 查询域名记录后(一般是 CNAME)，回应给 LocalDns</li><li>LocalDns 得到域名记录后,向智能调度 DNS 查询域名的 ip 地址</li><li>智能调度 DNS 根据一定的算法和策略(比如静态拓扑，容量等),将最适合的 CDN 节点 ip 地址回应给 LocalDns</li><li>LocalDns 将得到的域名 ip 地址，回应给用户端</li><li>用户得到域名 ip 地址后，访问站点服务器</li><li>CDN 节点服务器应答请求，将内容返回给客户端.(缓存服务器一方面在本地进行保存，以备以后使用，二方面把获取的数据返回给客户端，完成数据服务过程)</li></ol><h3 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h3><blockquote><p>如果用户首次访问个数据，数据会从源服务器缓存到 CDN 服务器上，当有其他用户在再次访问这些数据的时候，数据会从 CDN 服务器反馈给用户</p></blockquote><ol><li>用户输入 URL，浏览器将解析过后的域名发给 DNS 服务器</li><li>CDN 返回该域名对应的 CNAME，此时浏览器需要再次对获得的 CNAME 进行解析，才能得到 CDN 缓存服务器的 IP 地址。在此过程中全局负载均衡 DNS 解析服务器会将用户的访问请求定位到离用户最近、负载最轻的 CDN 缓存服务器上。这种技术也被称为“DNS 重定向”。DNS 服务器不是为每个请求返回相同的 IP 地址，计算出距离这个用户最近的 CDN 服务器，于是返回一个悉尼 CDN 节点的 IP 地址。这种方法也不一定是最优的，因为地理位置上最近的两个点，延迟可能反而很高。</li><li>再次解析后，浏览器得到 CDN 缓存服务器的实际 IP 地址，向缓存服务器发起请求。</li><li>缓存服务器根据浏览器提供的域名，通过内部 DNS 解析得到此域名源服务器的真实 IP 地址，再由缓存服务器向该服务器发起访问请求。</li><li>缓存服务器拿到数据后，一方面将数据发回浏览器，另一方面进行本地保存，以备后用。之后再次访问，数据将从 CDN 缓存服务器中被返回。CDN 不会永久保存数据，可以设置 CDN 的刷新频率，来达到数据的更新。</li><li>浏览器得到由缓存服务器发回的数据，并将其显示出来。</li></ol><h3 id="技术手段"><a href="#技术手段" class="headerlink" title="技术手段"></a>技术手段</h3><ol><li>高速缓存: 适用于静态内容</li><li>镜像站点服务器: 让内容直截了当地进行分布，适用于静态和准动态的数据同步。</li></ol><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><blockquote><p>当用户访问加入 CDN 服务的网站时，域名解析请求将最终交给全局负载均衡 DNS 进行处理。全局负载均衡 DNS 通过一组预先定义好的策略，将当时最接近用户的节点地址提供给用户，使用户能够得到快速的服务。同时，它还与分布在世界各地的所有 CDN 节点保持通信，搜集各节点的通信状态，确保不将用户的请求分配到不可用的 CDN 节点上，实际上是通过 DNS 做全局负载均衡。</p><p>CDN 节点组成: </p><ol><li>负载均衡设备: 负责每个节点中各个 Cache 的负载均衡，保证节点的工作效率；同时，负载均衡设备还负责收集节点与周围环境的信息，保持与全局负载 DNS 的通信，实现整个系统的负载均衡。</li><li>高速缓存服务器: 负责存储客户网站的大量信息，就像一个靠近用户的网站服务器一样响应本地用户的访问请求。</li></ol></blockquote><ol><li>中心: 指 CDN 网管中心和 DNS 重定向解析中心，负责全局负载均衡，设备系统安装在管理中心机房。</li><li>边缘: 指异地节点，CDN 分发的载体，主要由 Cache 和负载均衡器等组成。</li></ol><h2 id="动态-CDN-特点"><a href="#动态-CDN-特点" class="headerlink" title="动态 CDN 特点"></a>动态 CDN 特点</h2><blockquote><p>通过智能路由、多线回源、协议优化、数据压缩等技术，达到加速目的</p><ul><li>首页加载速度更快</li><li>更可靠的连接（只要负责连接边缘服务器，如果直接走回源线路的话，线路会很长，不可靠）</li></ul></blockquote><p><img src="/images/engineering/cdn_1.png" alt=""></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="CDN-能缓存接口吗"><a href="#CDN-能缓存接口吗" class="headerlink" title="CDN 能缓存接口吗"></a>CDN 能缓存接口吗</h3><ol><li>在一般情况下，CDN 只会对 HTTP GET 请求的 URL 进行缓存，而 HTTP POST 请求的数据是不进行缓存的。因为 HTTP POST 请求中的数据有可能是用户的个人信息或者其他重要数据，一旦被缓存下来就会存在安全问题。</li><li>在一些特殊情况下，CDN 也可以缓存服务接口。比如，当 CDN 作为反向代理服务器（Reverse Proxy）时，CDN 会缓存后端服务的响应内容并且将响应结果返回给用户，这时候 CDN 就会缓存服务接口。</li></ol><h3 id="图片各格式的区别"><a href="#图片各格式的区别" class="headerlink" title="图片各格式的区别"></a>图片各格式的区别</h3><ol><li>PNG: PNG 是一种无损压缩格式，支持透明度和高品质图像，最适合用于对精度和细节要求较高的图像，但文件体积较大。</li><li>JPG/JPEG: JPG 是一种有损压缩格式，可以压缩图像文件尺寸而不影响图像质量，适用于对文件大小有限制的情况，但对于较大的文件，它可能会导致失真。不支持透明度</li><li>BMP: BMP 是一种无压缩的图像格式，可以保持完美的图像质量，但是文件体积很大，适合用于处理要求高质量的文件。</li><li>SVG: SVG 是一种矢量图形语言，可无限缩放而不失真，支持亚像素级渲染，适合用于网页与移动设备。</li><li>TIFF: TIFF 是一种无损压缩格式，支持多种色彩模式，可用于高品质打印和艺术品的制作，但文件体积较大。</li><li>WebP: 由谷歌开发的 WebP 格式是一种无损压缩图像格式，与 JPG 相比，可大幅减少文件体积，但在一些老旧的浏览器中可能不受支持。<ul><li>有损 WebP 压缩使用预测编码对图像进行编码，相同 VP8 视频编解码器用于压缩视频中的关键帧的方法。预测编码使用相邻像素块中的值来预测值在一个块中，然后只编码差异。</li><li>无损 WebP 压缩使用已经看到的图像片段，以便精确重建新像素。如果没有，它也可以使用本地调色板 找到有趣的匹配。</li></ul></li><li>GIF: GIF 是一种支持动画和透明度的图像格式，对于一些小的简单动画效果，它是最好的选择，但对于大多数图像类型，它可能会有限制和色彩限制。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/articles/engineering/nginx/"/>
      <url>/articles/engineering/nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>Nginx 是一个轻量级/高性能的反向代理 Web 服务器，由 C 语言写的，速度快、性能优秀。主要功能有反向代理、负载均衡、配置 SSL 证书、防盗链、解决跨域问题、缓存、限流、动静资源分离等等</p></blockquote><h3 id="nginx-作用体现"><a href="#nginx-作用体现" class="headerlink" title="nginx 作用体现"></a>nginx 作用体现</h3><blockquote><p>提升系统整体性能</p></blockquote><h4 id="动静资源分离"><a href="#动静资源分离" class="headerlink" title="动静资源分离"></a>动静资源分离</h4><blockquote><p>一般静态资源文件都放在 Nginx 服务器中，当 Nginx 接收到了获取静态资源文件的请求，就直接在 Nginx 服务器中把放进去的静态资源返回，而不用真正到达后端接口，效率非常高</p></blockquote><h4 id="请求转发分配"><a href="#请求转发分配" class="headerlink" title="请求转发分配"></a>请求转发分配</h4><blockquote><p>所有的请求都经过 Nginx，由 Nginx 决定分发到哪个端口程序上，这样即使后端有很多个 Java 程序，但对于前端来说，是无感知的，好比后台只有一个项目在跑</p></blockquote><h4 id="Keepalive-保活"><a href="#Keepalive-保活" class="headerlink" title="Keepalive 保活"></a>Keepalive 保活</h4><blockquote><p>Nginx 会不断监听后端程序的接口 (健康检查)，看该服务是不是在正常运行，万一有一个程序挂了，那么 Nginx 就不会把前端发来的请求转发给这个接口，确保后端服务的高可用性和稳定性</p></blockquote><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><blockquote><p>匹配用户请求中的 URI，优先级为: <code>=</code> &gt; <code>完整路径</code> &gt; <code>^~</code> &gt; <code>~</code>、<code>~*</code> &gt; <code>部分起始路径</code> &gt; <code>/</code></p><ul><li><code>=</code>: 精确匹配，优先级最高。如果找到了这个精确匹配，则停止查找</li><li><code>^~</code>: URI 以某个常规字符串开头，不是正则匹配</li><li><code>~</code>: 区分大小写的正则匹配</li><li><code>~*</code>: 不区分大小写的正则匹配</li><li><code>/</code>: 通用匹配, 优先级最低。任何请求都会匹配到这个规则</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location 前缀字符串  URL &#123;</span><br><span class="line">    [ 配置 ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-break"><a href="#if-break" class="headerlink" title="if/break"></a>if/break</h3><blockquote><p>判断语句，if 的上下文为 server、location；break 的上下文为 server、location、if</p><ul><li><code>=</code>、<code>!=</code>: 变量跟字符串的比较</li><li><code>~</code>、<code>~*</code>: 变量与正则表达式匹配，区分/不区分 大小写</li><li><code>-f</code>、<code>!-f</code>: 检查文件是否存在</li><li><code>-d</code>、<code>!-d</code>: 检查目录是否存在</li><li><code>-e</code>、<code>!-e</code>: 检查文件、目录或符号链接的存在性</li><li><code>-x</code>、<code>!-x</code>: 检查可执行文件</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果用户代理 User-Agent 包含&quot;MSIE&quot;，rewrite 请求到 /msie/ 目录下。通过正则匹配的捕获可以用 $1 $2 等使用</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 cookie 匹配正则，设置变量 $id 等于匹配到的正则部分</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_cookie</span> ~* <span class="string">&quot;id=([^;]+)(?:;|$)&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">set</span> <span class="variable">$id</span> <span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果请求的文件存在，则开启缓存，并通过 break 停止后面的检查</span></span><br><span class="line"><span class="keyword">if</span> (-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">    expires max;</span><br><span class="line">    <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果请求的文件、目录或符号链接都不存在，则用 rewrite 在 URI 头部添加 /index.php</span></span><br><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">    rewrite ^/(.*)$ /index.php/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><blockquote><ul><li>重写的 URL 适用于每个匹配的 server 或 location 的请求</li><li>使用标准的 nginx 变量构建重写的 URL</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># 同时用于 HTTP 和 HTTPS 流量</span></span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.old-name.com;</span><br><span class="line">    <span class="comment"># 停止处理请求，直接返回 301 (Moved Permanently) 代码和指定的重写过的 URL 到客户端</span></span><br><span class="line">    <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://www.new-name.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h3><blockquote><p>改变部分或整个用户请求中的 URL</p><ul><li>通知客户端，请求的资源已经换地方了。例如网站改版后添加了 www 前缀，通过 rewrite 规则可以将所有请求导向新站点</li><li><p>控制 Nginx 中的处理流程。例如当需要动态生成内容时，将请求转发到应用程序服务器。try_files 指令经常用于这个目的</p></li><li><p>rewrite 指令只能返回代码 301 或 302。要返回其他代码，需要在 rewrite 指令后面包含 return 指令</p></li><li>rewrite 指令不一定会暂停 nginx 对请求的处理，因为它不一定会发送重定向到客户端。除非明确指出 (使用 flag 或 URL 的语法) 你希望 nginx 停止处理或发送重定向，否则它将在整个配置中运行，查找在重写模块中定义的指令 (break、if、return、rewrite 和 set)，并按顺序处理。如果重写的 URL 与 rewrite 模块中的后续指令匹配，nginx 会对重写的 URL 执行指定的操作 (通常会重新写入)</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    rewrite ^(/download/.*)/media/(\w+)\.?.*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.mp3 last;</span><br><span class="line">    rewrite ^(/download/.*)/audio/(\w+)\.?.*$ <span class="variable">$1</span>/mp3/<span class="variable">$2</span>.ra  last;</span><br><span class="line">    <span class="built_in">return</span>  403;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>它匹配以字符串 /download 开头的 URL，然后用 /mp3/ 替换在路径稍后的某个位置包含的 /media/ 或 /audio/ 目录，并添加适当的文件扩展名 .mp3 或 .ra。$1 和 $2 变量捕获不变的路径元素。例如，/download/cdn-west/media/file1 变为 /download/cdn-west/mp3/file1.mp3。如果文件名上有扩展名（例如.flv），表达式会将其剥离并用.mp3 替换</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex URL [flag];</span><br></pre></td></tr></table></figure><h4 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h4><blockquote><ul><li>last: 停止处理当前的 ngx_http_rewrite_module 指令集，并开始对匹配更改后的 URI 的新 location 进行搜索 (再从 server 走一遍匹配流程)。此时对于当前 server 或 location 上下文，不再处理 ngx_http_rewrite_module 重写模块的指令</li><li>break: 停止处理当前的 ngx_http_rewrite_module 指令集</li><li>redirect: 返回包含 302 代码的临时重定向，在替换字符串不以 “<a href="http://”，“https://”">http://”，“https://”</a> 或 “$scheme” 开头时使用</li><li>permanent: 返回包含 301 代码的永久重定向</li></ul></blockquote><h3 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h3><blockquote><p>参数是一个或多个文件或目录的列表，以及最后面的 URI 参数</p><ul><li>Nginx 会按顺序检查文件及目录是否存在 (根据 root 和 alias 指令设置的参数构造完整的文件路径)，并用找到的第一个文件提供服务。在元素名后面添加斜杠 / 表示这个是目录。如果文件和目录都不存在，Nginx 会执行内部重定向，跳转到命令的最后一个 uri 参数定义的 URI 中</li><li>必须定义一个 location 块捕捉内部重定向。最后一个参数可以是命名过的 location，由初始符号（@）指示</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /images/default.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /images/default.gif &#123;</span><br><span class="line">    expires 30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果客户端请求的文件不存在，Nginx 会响应一个默认的 GIF 文件。假设客户请求 “<a href="http://www.domain.com/images/image1.gif”，Nginx">http://www.domain.com/images/image1.gif”，Nginx</a> 会首先通过用于这个 location 的 root 和 alias 指令，在本地目录中查找这个文件。如果“image1.gif”文件不存在，Nginx 会查找“image1.gif/”目录，如果都不存在，会重定向到“/images/default.gif”。这个值精确匹配后面的 location 指令，因此处理过程停止，Nginx 返回这个文件，并标注其缓存 30 秒</li></ul><h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><ol><li>正向代理: </li></ol><ul><li>防止服务端获取客户端的 ip 地址</li></ul><p><img src="/images/engineering/nginx_1.png" alt=""></p><ol><li>反向代理</li></ol><ul><li>防火墙: 应用不想直接暴露给客户端，通过 nginx 过滤掉没有权限或者非法的请求，来保障内部服务器的安全</li><li>负载均衡</li></ul><p><img src="/images/engineering/nginx_2.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen  80;  // 本机ip下的端口</span><br><span class="line">  server_name  1.1.1.1;  // 本机ip</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://a.com:8080/;</span><br><span class="line">    root  html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>当一个应用单位时间内访问量激增，服务器的带宽及性能受到影响，影响大到自身承受能力时，服务器就会宕机崩溃，可以通过 nginx 来转发请求给不同的程序应用来分担服务器压力</p></blockquote><h4 id="常见的负载均衡算法"><a href="#常见的负载均衡算法" class="headerlink" title="常见的负载均衡算法"></a>常见的负载均衡算法</h4><ol><li>轮询算法: 按顺序、平均地把每一条请求分发出去</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.configupstream backserver &#123; server 192.168.0.1; server 192.168.0.2;&#125;</span><br></pre></td></tr></table></figure><ol><li>权重分配: 权重值高的分配请求也越多</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx.configupstream backserver &#123;server 192.168.0.1 weight=2;server 192.168.0.2 weight=8;&#125;</span><br></pre></td></tr></table></figure><ol><li>按用户端的 ip 进行 hash 运算分配</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backserver &#123;</span><br><span class="line"> ip_hash;</span><br><span class="line"> server 192.168.0.11:88;</span><br><span class="line"> server 192.168.0.13:80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="comment">#允许跨域请求的域，* 代表所有</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> *;</span><br><span class="line">    <span class="comment">#允许请求的header</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> *;</span><br><span class="line">    <span class="comment">#允许带上cookie请求</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    <span class="comment">#允许请求的方法，比如 GET,POST,PUT,DELETE</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> *;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> 204;</span><br><span class="line">    &#125;</span><br><span class="line">    proxy_pass http://192.168.1.12:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置白名单"><a href="#配置白名单" class="headerlink" title="配置白名单"></a>配置白名单</h3><blockquote><p>可以配置 nginx 的白名单，规定有哪些 ip 可以访问你的服务器，防爬虫</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    deny  192.168.0.1; // 禁止该ip访问    deny  all; // 禁止所有</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="variable">$ip_whitelist</span> = 0 )&#123;</span><br><span class="line">      <span class="built_in">return</span> 403; //不在白名单返回 403</span><br><span class="line">    &#125;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="适配-PC-与移动端环境"><a href="#适配-PC-与移动端环境" class="headerlink" title="适配 PC 与移动端环境"></a>适配 PC 与移动端环境</h3><blockquote><p>当用户从移动端打开 PC 端 baidu.com 的场景时，将自动跳转指移动端 m.baidu.com，本质上是 Nginx 可以通过内置变量 <code>$http_user_agent</code> ，获取到请求客户端的 userAgent，从而知道当前用户当前终端是移动端还是 PC，进而重定向到 H5 站还是 PC 站</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    //移动、pc设备agent获取</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&#x27;(Android|webOS|iPhone)&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">set</span> <span class="variable">$mobile_request</span> <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$mobile_request</span> = <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">      rewrite ^.+ http://m.baidu.com;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-Gzip"><a href="#配置-Gzip" class="headerlink" title="配置 Gzip"></a>配置 Gzip</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  gzip on; //启动</span><br><span class="line">  gzip_buffers 32 4K;</span><br><span class="line">  gzip_comp_level 6; //压缩级别，1-10，数字越大压缩的越好</span><br><span class="line">  gzip_min_length 100; //不压缩临界值，大于100的才压缩，一般不用改</span><br><span class="line">  gzip_types application/javascript text/css text/bash;</span><br><span class="line">  gzip_disable <span class="string">&quot;MSIE [1-6].&quot;</span>; // IE6对Gzip不友好</span><br><span class="line">  gzip_vary on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h3><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><blockquote><p>用户端的大量请求 (突发流量)会进入 nginx 内维护的漏桶中，漏桶会按照已定义的固定的速率给服务器分发请求，正常的请求在服务器处理完后会正常返回给用户端。如果水流过大 (突发流量过大)时，漏桶内的水会溢出，这时 nginx 就把这些溢出的水 (流量)直接丢弃，也就是给用户端返回错误信息</p></blockquote><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><blockquote><p>用户端发请求给 nginx 时，每个请求都要去 nginx 的令牌桶中取一个令牌，令牌桶的容量可设定。如果某个请求成功取到了令牌，那么 nginx 就会把这个请求转发到服务器上进行处理。如果令牌桶已空，请求在 nginx 令牌桶中取不到令牌，那么 nginx 会直接返回该请求，也就是给用户端返回错误信息</p></blockquote><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="vpn-和-服务器代理"><a href="#vpn-和-服务器代理" class="headerlink" title="vpn 和 服务器代理"></a>vpn 和 服务器代理</h3><ol><li>vpn 是怎么实现在家也能连到公司内网的</li></ol><ul><li>vpn 代理是通过隧道技术在公共网络上模拟出一条点到点的逻辑专线，在公网上建立一条专门的隧道，从而达到安全数据传输的目的。需要用户端和服务端都部署和配置专门的 vpn 设备，即 vpn 网关，例如路由器式 vpn、交换机式 vpn</li></ul><ol><li>vpn 设计与实现</li></ol><ul><li>vpn 最主要的技术就是隧道技术，用另一种协议去封装当前正在使用的协议。隧道协议分为第二、第三层隧道协议，第二层隧道协议 (如 L2TP、PPTP、L2F 等) 工作在 OSI 体系结构的第二层 (数据链路层)；第三层隧道协议 (如 IPSec、GRE 等) 工作在 OSI 体系结构的第三层 (网络层)，这两个协议会在网络层封装完 IP 头后，再封装 IPSec 或者 GRE 头，并进行信息加密，这是代理服务器不会做的。然后再交由网络接口层添加 mac 头再丢到公网中，这样公网就认得你的 ip 并且能找到你公司内网前架设的 vpn 网关</li><li>vpn 设备还会使用常用加解密技术，例如对称密钥加密和非对称密钥加密组合使用，例如用 https 的 TLS 加密技术</li><li>密钥管理技术和身份认证及访问控制技术的支持</li></ul><ol><li>代理服务器和 vpn 有什么不一样</li></ol><ul><li>匿名性不同。虽然它们都位于请求的中间，都隐藏了 IP 地址，并且都将信息转发。主要区别在于 vpn 需要隧道过程，该过程建立了到 vpn 服务器的直接且不可穿透的连接。代理只是一个开放的端口，是任何人都可以连接到的单个 IP 地址</li><li>安全性不同。vpn 会加密数据信息，代理服务器不会，因此 vpn 更加私有，连接不会被穿透，是一个开在公网上的封闭系统</li><li>运行级别不同。vpn 是运行在操作系统上，由操作系统内核封装，重定向请求流量。代理服务器是软件级别，处于用户态</li><li>速度不同。vpn 涉及加密解密，数据封装，速度较慢，但因其安全性，价格成本会更高</li></ul><h3 id="nginx-配置-https"><a href="#nginx-配置-https" class="headerlink" title="nginx 配置 https"></a>nginx 配置 https</h3><blockquote><p>Nginx 常用来配置 Https 认证，主要有两个步骤: 签署第三方可信任的 SSL 证书 和 配置 HTTPS</p></blockquote><h4 id="签署第三方-SSL"><a href="#签署第三方-SSL" class="headerlink" title="签署第三方 SSL"></a>签署第三方 SSL</h4><blockquote><p>配置 https 要用到私钥 .key 文件和 .crt 证书文件，而申请证书文件的时候要用到 .csr 文件</p></blockquote><ol><li>配置 https</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  <span class="comment">#ssl参数</span></span><br><span class="line">  listen   443 ssl; //监听443端口，443端口是https的默认端口。80为http的默认端口</span><br><span class="line">  server_name  example.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#证书文件</span></span><br><span class="line">  ssl_certificate     example.com.crt; // 证书的绝对路径</span><br><span class="line"></span><br><span class="line">  <span class="comment">#私钥文件</span></span><br><span class="line">  ssl_certificate_key   example.com.key;  // 密钥的绝对路径</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端设计模式</title>
      <link href="/articles/engineering/designMode/"/>
      <url>/articles/engineering/designMode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>针对设计问题的通用解决方案<br>为什么要学设计模式</p><ul><li>利于代码复用</li><li>利于代码稳定可拓展</li><li>利于代码可读性提升</li></ul><p>什么时候需要设计模式</p><ul><li>优先考虑全局设计</li><li>合理权衡使用需求和维护成本</li></ul></blockquote><h2 id="五种设计原则"><a href="#五种设计原则" class="headerlink" title="五种设计原则"></a>五种设计原则</h2><p><img src="/images/engineering/dMode_1.png" alt=""></p><h3 id="OCP"><a href="#OCP" class="headerlink" title="OCP"></a>OCP</h3><blockquote><p>开闭原则 (Open Closed Principle)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 已有的场景下，对于需要拓展的功能进行开放、拒绝直接的对于系统功能进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sprint1 - 中秋节活动 吃鸡高亮 + LOL要弹出折扣</span></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="keyword">if</span> (game === <span class="string">&quot;PUBG&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 高亮</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// event</span></span><br><span class="line"><span class="keyword">if</span> (game === <span class="string">&quot;LOL&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 弹出折扣框</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 付款</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sprint2 - 要对部分游戏置灰 + 付款页面要显示停止发售</span></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="keyword">if</span> (game === <span class="string">&quot;PUBG&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 高亮</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (game === <span class="string">&quot;AAA&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 灰色</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// event</span></span><br><span class="line"><span class="keyword">if</span> (game === <span class="string">&quot;LOL&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// 弹出折扣框</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (game === <span class="string">&quot;AAA&quot;</span>) &#123;</span><br><span class="line">  <span class="comment">// break + 提示停止发售</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 付款</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构 =&gt; 核心化</span></span><br><span class="line"><span class="comment">// render</span></span><br><span class="line"><span class="title function_">gameManager</span>(game).<span class="title function_">setColor</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// event</span></span><br><span class="line"><span class="title function_">gameManager</span>(game).<span class="title function_">openDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// game库</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gameManager</span>(<span class="params">game</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;game&#125;</span>Manager`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导引</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LOLManager</span> = &#123;</span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 正常</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 折扣</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PUBGManager</span> = &#123;</span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 付款</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构2</span></span><br><span class="line"><span class="comment">// 默认逻辑抽离</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 设置颜色</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 默认</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LOL</span> <span class="keyword">extends</span> <span class="title class_ inherited__">game</span> &#123;</span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 折扣</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PUBG</span> <span class="keyword">extends</span> <span class="title class_ inherited__">game</span> &#123;</span><br><span class="line">  <span class="title function_">setColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 高亮</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; yunying@2000@cn@zw =&gt; 中国 爪哇 2000年 云隐</span></span><br><span class="line"><span class="comment">// function = 拆分 + 排序 + 翻译 =&gt; formatter() + spliter() + sorter() + tranlater()</span></span><br><span class="line"><span class="comment">// =&gt; 函数式编程</span></span><br></pre></td></tr></table></figure><h3 id="SRP"><a href="#SRP" class="headerlink" title="SRP"></a>SRP</h3><blockquote><p>单一职责 (Single Responsibility Principle)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SRP - 通过解耦让每一个职责更加的独立</span></span><br><span class="line"><span class="comment">// 目标: 一个功能模块只做一件事情</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// game store</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PUBGManager</span> &#123;</span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 弹框</span></span><br><span class="line">    <span class="comment">// 计算金额</span></span><br><span class="line">    <span class="title function_">setPrice</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">PUBGManager</span>();</span><br><span class="line">game.<span class="title function_">openDialog</span>(); <span class="comment">// 弹框 &lt;=&gt; 计算金额 两个模块存在功能上的耦合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构</span></span><br><span class="line"><span class="comment">// gameManager.js - 业务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PUBGManager</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">command</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">command</span> = command;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">openDialog</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">command</span>.<span class="title function_">setPrice</span>(price);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// optManager.js - 底层库</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriceManager</span> &#123;</span><br><span class="line">  <span class="title function_">setPrice</span>(<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算金额</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> exe = <span class="keyword">new</span> <span class="title class_">PriceManager</span>();</span><br><span class="line"><span class="keyword">const</span> game1 = <span class="keyword">new</span> <span class="title class_">PUBGManager</span>(exe);</span><br><span class="line"></span><br><span class="line">game1.<span class="title function_">openDialog</span>(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// dialog弹框 =&gt; slots(HOC) / decorator / wrapper</span></span><br></pre></td></tr></table></figure><h3 id="DIP"><a href="#DIP" class="headerlink" title="DIP"></a>DIP</h3><blockquote><p>依赖倒置 (Dependency Inversion Principle)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 上层应用面向抽象进行coding，而不是面相实现 =&gt; 降低需求与实现的耦合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求 - 分享功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">share</span> = <span class="keyword">new</span> <span class="title class_">Share</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Share</span> &#123;</span><br><span class="line">  <span class="title function_">shareTo</span>(<span class="params">platform</span>) &#123;</span><br><span class="line">    <span class="comment">// 分享</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>();</span><br><span class="line">store.<span class="property">share</span>.<span class="title function_">shareTo</span>(<span class="string">&quot;wx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 评分功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">share</span> = <span class="keyword">new</span> <span class="title class_">Share</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">rate</span> = <span class="keyword">new</span> <span class="title class_">Rate</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Share</span> &#123;</span><br><span class="line">  <span class="title function_">shareTo</span>(<span class="params">platform</span>) &#123;</span><br><span class="line">    <span class="comment">// 分享</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rate</span> &#123;</span><br><span class="line">  <span class="title function_">star</span>(<span class="params">stars</span>) &#123;</span><br><span class="line">    <span class="comment">// 评分</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.<span class="property">rate</span>.<span class="title function_">star</span>(<span class="string">&quot;wx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标: 底层不改变 + 动态挂载</span></span><br><span class="line"><span class="comment">// 重构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rate</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化动作</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">store</span>) &#123;</span><br><span class="line">    store.<span class="property">rate</span> = <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">store</span>(<span class="params">stars</span>) &#123;</span><br><span class="line">    <span class="comment">// 评分</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Share</span> &#123;</span><br><span class="line">  <span class="comment">// 初始化动作</span></span><br><span class="line">  <span class="title function_">init</span>(<span class="params">store</span>) &#123;</span><br><span class="line">    store.<span class="property">share</span> = <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shareTo</span>(<span class="params">platform</span>) &#123;</span><br><span class="line">    <span class="comment">// 分享</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="comment">// 维护模块名单</span></span><br><span class="line">  <span class="keyword">static</span> modules = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 遍历名单 + 做初始化挂载</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> <span class="variable language_">module</span> <span class="keyword">of</span> <span class="title class_">Store</span>.<span class="property">module</span>.<span class="title function_">values</span>()) &#123;</span><br><span class="line">      <span class="variable language_">module</span>.<span class="title function_">init</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提供注入功能模块</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">inject</span>(<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Store</span>.<span class="property">modules</span>.<span class="title function_">set</span>(<span class="variable language_">module</span>.<span class="property">constructor</span>.<span class="property">name</span>, <span class="variable language_">module</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次注册所有模块</span></span><br><span class="line"><span class="keyword">const</span> rate = <span class="keyword">new</span> <span class="title class_">Rate</span>();</span><br><span class="line"><span class="title class_">Store</span>.<span class="title function_">inject</span>(rate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化商城</span></span><br><span class="line"><span class="comment">// const store = new Store();</span></span><br><span class="line">store.<span class="property">rate</span>.<span class="title function_">start</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖收集</span></span><br></pre></td></tr></table></figure><h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><blockquote><p>接口隔离 (Interface Segregation Principle)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标: 多个专业接口比单个胖接口好用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏中台 - 快速生产游戏</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 跑</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shot</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 射击</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">mega</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 大招</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// PUBG、LOL</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PUBG</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// pubg contructor</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LOL</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// lol contructor</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubg = <span class="keyword">new</span> <span class="title function_">PUBG</span>(<span class="string">&quot;pubg&quot;</span>);</span><br><span class="line">pubg.<span class="title function_">run</span>();</span><br><span class="line">pubg.<span class="title function_">shot</span>();</span><br><span class="line">pubg.<span class="title function_">mega</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构 - 用多个接口替代，每个接口服务于一个子模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 跑</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FPS</span> &#123;</span><br><span class="line">  <span class="title function_">aim</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MOBA</span> &#123;</span><br><span class="line">  <span class="title function_">TP</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PUBG</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">shot</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 层级深度 + 划分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构组件划分 + 状态机 / 命名空间</span></span><br></pre></td></tr></table></figure><h3 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h3><blockquote><p>里氏替换(Liskov Substitution Principle)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子类可以覆盖父类 =&gt; 父类能出现的地方，子类一定能出现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// sprint1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 开机</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shutdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 关机</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 开始游戏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="keyword">new</span> <span class="title class_">Game</span>();</span><br><span class="line">game.<span class="title function_">play</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// sprint2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileGame</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">tombStore</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 移动端游戏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mobile = <span class="keyword">new</span> <span class="title class_">MobileGame</span>();</span><br><span class="line">mobile.<span class="title function_">play</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 开机</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shutdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 关机</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MobileGame</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">tombStore</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 移动端游戏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PCGame</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Game</span> &#123;</span><br><span class="line">  <span class="title function_">speed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 加速器</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// PC游戏</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 维护核心 =&gt; 抽离妥协 增加分层</span></span><br></pre></td></tr></table></figure><h2 id="三类设计模式"><a href="#三类设计模式" class="headerlink" title="三类设计模式"></a>三类设计模式</h2><p><img src="/images/engineering/dMode_2.png" alt=""></p><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><blockquote><p>全局只有一个实例，和状态相关</p></blockquote><ol><li>工厂模式: 批量生产同类型应用来满足频繁使用同一类型素材时</li><li>建造者模式: 需要将元功能模块化解耦，并且需要频繁编排时</li><li>单例模式: 当全局只有一个实例，注重的是一体化和状态统一。<code>可使用代理来实现</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">singleton</span>(<span class="params">className</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> ins;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(className, &#123;</span><br><span class="line">    <span class="title function_">construct</span>(<span class="params">target, args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!ins) &#123;</span><br><span class="line">        ins = <span class="keyword">new</span> <span class="title function_">target</span>(...args);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ins;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务场景</p></blockquote><ul><li>工厂: 生产不同类型的按钮</li><li>建造者: Header 组件，包含 title、button、breadcum，生产多种不同元素的组合</li><li>单例: router、store</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能: 创建元素</span></span><br><span class="line"><span class="comment">// 目的:  规范创建步骤</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="comment">// 隐藏创建过程、暴露共同接口</span></span><br><span class="line"><span class="comment">// 需求: </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shop</span> &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Game</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shop = <span class="keyword">new</span> <span class="title class_">Shop</span>();</span><br><span class="line"><span class="keyword">const</span> pubg = <span class="keyword">new</span> <span class="title class_">Game</span>(<span class="string">&quot;pubg&quot;</span>);</span><br><span class="line"></span><br><span class="line">pubg.<span class="title function_">init</span>();</span><br><span class="line">pubg.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造者</span></span><br><span class="line"><span class="comment">// 拆分简单模块、独立运行 =&gt; 注重过程与搭配</span></span><br><span class="line"><span class="comment">// 需求: </span></span><br><span class="line"><span class="comment">// 优惠套餐，商品 + 皮肤 进行打折售卖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;game: &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Skin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;skin: &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shop</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">package</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">package</span> = <span class="keyword">new</span> <span class="title class_">PackageBuilder</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getGamePackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">package</span>.<span class="title function_">getPackage</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PackageBuilder</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">game</span> = <span class="keyword">new</span> <span class="title class_">Product</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">skin</span> = <span class="keyword">new</span> <span class="title class_">Skin</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getPackage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">game</span>.<span class="title function_">init</span>() + <span class="variable language_">this</span>.<span class="property">skin</span>.<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单例模式</span></span><br><span class="line"><span class="comment">// 全局只有一个实例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlayStation</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;on&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">shutdown</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&quot;off&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;off&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="title class_">PlayStation</span>.<span class="property">instance</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="title class_">PlayStation</span>.<span class="property">getInstance</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">PlayStation</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="title class_">PlayStation</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">PlayStation</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">PlayStation</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ps = <span class="title class_">PlayStation</span>.<span class="title function_">getInstance</span>();</span><br><span class="line">ps.<span class="title function_">play</span>();</span><br><span class="line">ps.<span class="title function_">shutdown</span>();</span><br></pre></td></tr></table></figure><h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3><blockquote><p>不影响用户体验</p></blockquote><ol><li>适配器模式: 中间参数转换，兼容\适配已有方案时</li><li>装饰器模式: 在已有方案中批量提供\提升相应功能时</li><li>代理模式: 把调用方和被调用方分离，不直接产生调用关系时</li></ol><blockquote><p>业务场景</p></blockquote><ul><li>适配器: 需求中添加适配器做数据结构的转换</li><li>装饰器: title、button、breadcum 三个组件同时都具有发生改变触发页面刷新的功能</li><li>代理: ul 标签监听 li 标签，代理到 ul 上监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 功能:  优化结构实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器模式</span></span><br><span class="line"><span class="comment">// 适配独立模块，保证模块间的独立解耦以及连接兼容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HKDevice</span> &#123;</span><br><span class="line">  <span class="title function_">getPlug</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;港行插头&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">plug</span> = <span class="keyword">new</span> <span class="title class_">HKDevice</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getPlug</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">plug</span>.<span class="title function_">getPlug</span>() + <span class="string">&quot;+ 插头转接器&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">Target</span>();</span><br><span class="line">target.<span class="title function_">getPlug</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器模式</span></span><br><span class="line"><span class="comment">// 动态将责任附加在对象上</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;PlayStation4&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iphone13&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">device</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">device</span> = device;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">device</span>.<span class="title function_">create</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">update</span>(<span class="variable language_">this</span>.<span class="property">device</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params">device</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(device + <span class="string">&quot;pro&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> device = <span class="keyword">new</span> <span class="title class_">Device</span>();</span><br><span class="line">device.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newDevice = <span class="keyword">new</span> <span class="title class_">Decorator</span>(device);</span><br><span class="line">newDevice.<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理模式</span></span><br><span class="line"><span class="comment">// 使用代理人来替代原始对象</span></span><br><span class="line"><span class="comment">// 游戏防沉迷</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> &#123;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;playing&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GameProxy</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">player</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">player</span> = player;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">age</span> &lt; <span class="number">16</span> ? <span class="string">&quot;too young to play&quot;</span> : <span class="keyword">new</span> <span class="title class_">Game</span>().<span class="title function_">play</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><blockquote><p>节点互斥、前后链式相连</p></blockquote><ol><li>命令模式: 具有发出方 + 媒介 + 接收方 的完整流程时</li><li>模板模式: 对于基础说明书，进行的一次实际业务结合操作时</li><li>观察者模式: 通过观察者，可以让被观察者实时接收消息，平且触发一定的业务操作时</li><li>职责链模式: 独立指责单元链式执行，逐步操作流程时</li></ol><blockquote><p>业务场景</p></blockquote><ul><li>命令: 组件 A 通知组件 B，媒介抽象为数据处理中间层</li><li>模板: echarts、canvas、config…</li><li>观察者: 输入框变化，下拉框实时更新选项</li><li>职责链: 提交表单，链式调用 validate，依次执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不同对象之间行为逻辑的抽象化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令模式</span></span><br><span class="line"><span class="comment">// 请求以命令的形式包裹在对象中，并传给调用对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色命令接受者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">  <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始奔跑&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operator</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">command</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">command</span> = command;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">command</span>.<span class="title function_">execute</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指令器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">execute</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> soldier = <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line"><span class="keyword">const</span> order = <span class="keyword">new</span> <span class="title class_">Command</span>(soldier);</span><br><span class="line"><span class="keyword">const</span> player = <span class="keyword">new</span> <span class="title class_">Operator</span>(order);</span><br><span class="line">player.<span class="title function_">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板模式</span></span><br><span class="line"><span class="comment">// 模板中，定义好个方法的步骤，方法本身更关注自己的事情</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executePipeLine</span>) &#123;</span><br><span class="line">    <span class="comment">// executePipeLine</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">powerOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开机&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">login</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录账号&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">clickStart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始游戏&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">enterGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进入战场&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">powerOn</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">login</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">clickStart</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">enterGame</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者模式</span></span><br><span class="line"><span class="comment">// 当一个属性发生改变时，观察者会连续引发所有的相关类型的状态改变</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MediaCenter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">attach</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = state;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">notifyAllobservers</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notifyAllobservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">ob</span>) =&gt;</span> &#123;</span><br><span class="line">      ob.<span class="title function_">update</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, center</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">center</span> = center;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">center</span>.<span class="title function_">attach</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="variable language_">this</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">state</span>: <span class="variable language_">this</span>.<span class="property">center</span>.<span class="title function_">getState</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> center = <span class="keyword">new</span> <span class="title class_">MediaCenter</span>();</span><br><span class="line"><span class="keyword">const</span> ps = <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="string">&quot;ps&quot;</span>, center);</span><br><span class="line"></span><br><span class="line">center.<span class="title function_">setState</span>(<span class="string">&quot;on&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 职责链</span></span><br><span class="line"><span class="comment">// 1. 链式调用 2. 职责独立 3. 顺序执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nextAction</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setNextAction</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nextAction</span> = action;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">handle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;请审批&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextAction</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">nextAction</span>.<span class="title function_">handle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dad = <span class="keyword">new</span> <span class="title class_">Action</span>(<span class="string">&quot;爸&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mom = <span class="keyword">new</span> <span class="title class_">Action</span>(<span class="string">&quot;妈&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> wife = <span class="keyword">new</span> <span class="title class_">Action</span>(<span class="string">&quot;夫人&quot;</span>);</span><br><span class="line"></span><br><span class="line">dad.<span class="title function_">setNextAction</span>(mom);</span><br><span class="line">mom.<span class="title function_">setNextAction</span>(wife);</span><br><span class="line"></span><br><span class="line">dad.<span class="title function_">handle</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// generator()</span></span><br><span class="line"><span class="comment">// .next()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 19 新特性</title>
      <link href="/articles/react/v19/"/>
      <url>/articles/react/v19/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考 React 19 <a href="https://zh-hans.react.dev/blog/2024/12/05/react-19">官网</a></p></blockquote><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><blockquote><p>支持异步函数</p></blockquote><ul><li>待定状态: 提供一个待定状态，该状态在请求开始时启动，并在最终状态更新提交时自动重置</li><li>乐观更新: 支持新的 useOptimistic Hook，可以在请求提交时向用户显示即时反馈</li><li>错误处理: 当请求失败时，可以显示错误边界，并自动将乐观更新恢复到其原始值</li><li>表单: <form> 元素支持将函数传递给 action 和 formAction 属性。将函数传递给 action 属性默认使用 Actions，并在提交后自动重置表单</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用表单的 Actions 和 useActionState</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; name, setName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [error, submitAction, isPending] = <span class="title function_">useActionState</span>(</span><br><span class="line">    <span class="title function_">async</span> (previousState, formData) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> error = <span class="keyword">await</span> <span class="title function_">updateName</span>(formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 你可以返回操作的任何结果。</span></span><br><span class="line">        <span class="comment">// 这里，我们只返回错误。</span></span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理成功的情况。</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;isPending&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Update</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;error &amp;&amp; <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useActionState"><a href="#useActionState" class="headerlink" title="useActionState"></a>useActionState</h3><blockquote><p>接受一个函数 (Action)，并返回一个被包装的用于调用的 Action。这是因为 Actions 是可以组合的。当调用被包装的 Action 时，useActionState 将返回 Action 的最后结果作为 data，以及 Action 的待定状态作为 pending</p></blockquote><h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><blockquote><p>新 <code>&lt;form&gt;</code> 功能集成在 react-dom 中。我们已经添加了对将函数作为 <code>&lt;form&gt;</code>、<code>&lt;input&gt;</code> 和 <code>&lt;button&gt;</code> 元素的 action 和 formAction 属性的支持，以便使用 Actions 自动提交表单<br>当 <code>&lt;form&gt;</code> Action 成功时，React 将自动为非受控组件重置表单。如果需要手动重置 <code>&lt;form&gt;</code>，你可以调用新的 requestFormReset React DOM API</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&#123;actionFunction&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="useFormStatus"><a href="#useFormStatus" class="headerlink" title="useFormStatus"></a>useFormStatus</h3><blockquote><p>在设计系统中，常常需要编写设计一类能够访问其所在的 <code>&lt;form&gt;</code> 的信息而无需将属性传递到组件内的组件。这可以通过 Context 来实现，但为了使这类常见情况更简单，我们添加了一个新的 Hook useFormStatus</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useFormStatus &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DesignButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pending &#125; = <span class="title function_">useFormStatus</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">disabled</span>=<span class="string">&#123;pending&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useOptimistic"><a href="#useOptimistic" class="headerlink" title="useOptimistic"></a>useOptimistic</h3><blockquote><p>执行数据变更时的另一个常见 UI 模式是在异步请求进行时乐观地显示最终状态<br>useOptimistic 会在 updateName 请求进行时立即渲染 optimisticName。当更新完成或出错时，React 将自动切换回 currentName 值</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChangeName</span>(<span class="params">&#123; currentName, onUpdateName &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [optimisticName, setOptimisticName] = <span class="title function_">useOptimistic</span>(currentName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">submitAction</span> = <span class="keyword">async</span> (<span class="params">formData</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newName = formData.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="title function_">setOptimisticName</span>(newName);</span><br><span class="line">    <span class="keyword">const</span> updatedName = <span class="keyword">await</span> <span class="title function_">updateName</span>(newName);</span><br><span class="line">    <span class="title function_">onUpdateName</span>(updatedName);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;submitAction&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Your name is: &#123;optimisticName&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Change Name:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">disabled</span>=<span class="string">&#123;currentName</span> !== <span class="string">optimisticName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><blockquote><p>在渲染中读取资源。例如，可以使用 use 读取一个 promise，React 将挂起，直到 promise 解析完成</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Comments</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// `use` 将被暂停直到 promise 被解决.</span></span><br><span class="line">  <span class="keyword">const</span> comments = <span class="title function_">use</span>(commentsPromise);</span><br><span class="line">  <span class="keyword">return</span> comments.<span class="title function_">map</span>(<span class="function">(<span class="params">comment</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">&#123;comment.id&#125;</span>&gt;</span>&#123;comment&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page</span>(<span class="params">&#123; commentsPromise &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 当“use”在注释中暂停时,</span></span><br><span class="line">  <span class="comment">// 将显示此悬念边界。</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Comments</span> <span class="attr">commentsPromise</span>=<span class="string">&#123;commentsPromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以在循环和条件语句（如 if）中调用 use。但需要注意的是，调用 use 的函数仍然必须是一个组件或 Hook</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./ThemeContext&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Heading</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (children == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 因为过早的返回</span></span><br><span class="line">  <span class="comment">// 这里 useContext 无法正常工作。</span></span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">use</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">theme.color</span> &#125;&#125;&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取-context"><a href="#读取-context" class="headerlink" title="读取 context"></a>读取 context</h3><blockquote><p>当 context 被传递给 use 时，它的工作方式类似于 useContext。而 useContext 必须在组件的顶层调用，use 可以在条件语句如 if 和循环如 for 内调用。相比之下，use 比 useContext 更加灵活</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">use</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="数据传递"><a href="#数据传递" class="headerlink" title="数据传递"></a>数据传递</h3><blockquote><p>数据可以通过将 Promise 作为 prop 从 服务器组件 传递到 客户端组件，以从服务器流式传输到客户端</p></blockquote><div class="tip warning"><p>将来自服务器组件的 Promise 传递至客户端组件时，其解析值必须可序列化以在服务器和客户端之间传递。像函数这样的数据类型不可序列化，不能成为这种 Promise 的解析值</p></div><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fetchMessage &#125; <span class="keyword">from</span> <span class="string">&quot;./lib.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./message.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> messagePromise = <span class="title function_">fetchMessage</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>waiting for message...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Message</span> <span class="attr">messagePromise</span>=<span class="string">&#123;messagePromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>客户端组件将 从 prop 中接收到的 Promise 传递给 use API。这允许客户端组件从最初由服务器组件创建的 Promise 中读取值</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// message.js</span></span><br><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; use &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params">&#123; messagePromise &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> messageContent = <span class="title function_">use</span>(messagePromise);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is the message: &#123;messageContent&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rejected-Promise"><a href="#rejected-Promise" class="headerlink" title="rejected Promise"></a>rejected Promise</h3><blockquote><p>传递给 use 的 Promise 可能会被拒绝（rejected）。可以通过以下方式处理 rejected Promise</p></blockquote><div class="tip warning"><p>不能在 try-catch 块中调用 use</p></div><h4 id="ErrorBoundary"><a href="#ErrorBoundary" class="headerlink" title="ErrorBoundary"></a>ErrorBoundary</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; use, <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ErrorBoundary</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-error-boundary&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">MessageContainer</span>(<span class="params">&#123; messagePromise &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ErrorBoundary</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>⚠️Something went wrong<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>⌛Downloading message...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Message</span> <span class="attr">messagePromise</span>=<span class="string">&#123;messagePromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ErrorBoundary</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Message</span>(<span class="params">&#123; messagePromise &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="title function_">use</span>(messagePromise);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is the message: &#123;content&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-catch"><a href="#Promise-catch" class="headerlink" title="Promise.catch"></a>Promise.catch</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./message.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> messagePromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;no new message found.&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">p</span>&gt;</span>waiting for message...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Message</span> <span class="attr">messagePromise</span>=<span class="string">&#123;messagePromise&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="React-DOM-Static-APIs"><a href="#React-DOM-Static-APIs" class="headerlink" title="React DOM Static APIs"></a>React DOM Static APIs</h2><h3 id="prerender"><a href="#prerender" class="headerlink" title="prerender"></a>prerender</h3><blockquote><p>使用 Web 流将 React 树渲染为静态 HTML 字符串</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;prelude&#125; = <span class="keyword">await</span> <span class="title function_">prerender</span>(reactNode, options?)</span><br></pre></td></tr></table></figure><h3 id="prerenderToNodeStream"><a href="#prerenderToNodeStream" class="headerlink" title="prerenderToNodeStream"></a>prerenderToNodeStream</h3><blockquote><p>使用 Node.js 流将 React 树渲染为静态 HTML 字符串</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;prelude&#125; = <span class="keyword">await</span> <span class="title function_">prerenderToNodeStream</span>(reactNode, options?)</span><br></pre></td></tr></table></figure><h2 id="Server-Components"><a href="#Server-Components" class="headerlink" title="Server Components"></a>Server Components</h2><blockquote><p>一种全新的组件渲染模式，允许在打包前提前渲染组件，与客户端应用程序或 SSR 服务器在不同的环境中。这个独立的环境就是 React 服务器组件中的 “服务器”。服务器组件可以在你的 CI 服务器上在构建时运行一次，或者可以在每次请求时使用 web 服务器运行</p><ul><li>支持在构建时或请求时生成组件</li><li>无需引入额外的工具链，即可与现有 React 项目集成</li></ul></blockquote><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>现在可以在函数组件中将 ref 作为 prop 进行访问，新的函数组件将不再需要 forwardRef。在未来的版本中，我们将弃用并移除 forwardRef<br>在类组件中，ref 不作为 props 传递，因为它们引用的是组件实例。这意味着，如果你在类组件中需要访问 ref，你需要使用 React.forwardRef 或者 React.createRef</p></blockquote><h3 id="函数清理"><a href="#函数清理" class="headerlink" title="函数清理"></a>函数清理</h3><blockquote><p>使得在 ref 改变时执行清理操作变得更加容易，当组件卸载时，React 将调用从 ref 回调返回的清理函数。例如，你可以在 ref 改变时取消订阅事件</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  ref=&#123;<span class="function">(<span class="params">ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ref 创建</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新特性: 当元素从 DOM 中被移除时</span></span><br><span class="line">    <span class="comment">// 返回一个清理函数来重置 ref</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ref cleanup</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="Document-Metadata"><a href="#Document-Metadata" class="headerlink" title="Document Metadata"></a>Document Metadata</h2><blockquote><p>支持 <code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code> 和 <code>&lt;link&gt;</code> 等文档元数据标签。这些标签可直接在组件中声明，React 会自动将它们提升至 <code>&lt;head&gt;</code>，并确保与服务端渲染和客户端渲染兼容，简化 SEO 和元数据管理逻辑</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">BlogPost</span>(<span class="params">&#123; post &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;post.title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Josh&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;author&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://twitter.com/joshcstory/&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&#123;post.keywords&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Eee equals em-see-squared...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h2><blockquote><p>增强了样式表的加载管理，通过指定 precedence 属性，React 可以动态调整样式表的插入顺序，确保正确的样式覆盖</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&quot;loading...&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;high&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;foo-class bar-class&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;...&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ComponentTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;...&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123; /* will be inserted between foo &amp; bar */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">precedence</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Async-脚本"><a href="#Async-脚本" class="headerlink" title="Async 脚本"></a>Async 脚本</h2><blockquote><p>在 HTML 中，普通脚本 <code>(&lt;script src=&quot;...&quot;&gt;)</code> 和延迟脚本 <code>(&lt;script defer=&quot;&quot; src=&quot;...&quot;&gt;)</code> 按照文档顺序加载，这使得在组件树深处渲染这些类型的脚本变得具有挑战性。然而，异步脚本 <code>(&lt;script async=&quot;&quot; src=&quot;...&quot;&gt;)</code> 将去重并以任意顺序加载</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span>=<span class="string">&#123;true&#125;</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> /&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      Hello World</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><blockquote><p>preload 和 preinit 指定浏览器提前加载的资源</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; prefetchDNS, preconnect, preload, preinit &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// loads and executes this script eagerly</span></span><br><span class="line">  <span class="title function_">preinit</span>(<span class="string">&quot;https://.../path/to/some/script.js&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;script&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// preloads this font</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/font.woff&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;font&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// preloads this stylesheet</span></span><br><span class="line">  <span class="title function_">preload</span>(<span class="string">&quot;https://.../path/to/stylesheet.css&quot;</span>, &#123; <span class="attr">as</span>: <span class="string">&quot;style&quot;</span> &#125;);</span><br><span class="line">  <span class="comment">// when you may not actually request anything from this host</span></span><br><span class="line">  <span class="title function_">prefetchDNS</span>(<span class="string">&quot;https://...&quot;</span>);</span><br><span class="line">  <span class="comment">// when you will request something but aren&#x27;t sure what</span></span><br><span class="line">  <span class="title function_">preconnect</span>(<span class="string">&quot;https://...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误报告"><a href="#错误报告" class="headerlink" title="错误报告"></a>错误报告</h2><blockquote><p>改进了错误日志系统，减少了重复日志，并添加了更详细的调试信息。例如，对于 SSR 和客户端渲染不匹配的问题，提供了差异化日志</p><ul><li><code>onCaughtError</code>: 当 React 在错误边界中捕获错误时调用</li><li><code>onUncaughtError</code>: 当抛出错误并且未被错误边界捕获时调用</li><li><code>onRecoverableError</code>: 当抛出错误并自动恢复时调用</li></ul></blockquote><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote><p>可以将 <code>&lt;Context&gt;</code> 渲染为提供者，无需再使用 <code>&lt;Context.Provider&gt;</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title function_">createContext</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext</span> <span class="attr">value</span>=<span class="string">&quot;dark&quot;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">ThemeContext</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Immutable与Immer</title>
      <link href="/articles/react/immutable/"/>
      <url>/articles/react/immutable/</url>
      
        <content type="html"><![CDATA[<h2 id="Immutable"><a href="#Immutable" class="headerlink" title="Immutable"></a>Immutable</h2><blockquote><p>Javascript 中不可变的集合 <a href="https://immutable-js.com/">官网</a></p></blockquote><h3 id="immutable-引入"><a href="#immutable-引入" class="headerlink" title="immutable 引入"></a>immutable 引入</h3><blockquote><p>在 JavaScript 中有引用类型和基本类型。</p><ul><li>如果变量 a 是基本类型，将 a 赋值给变量 b，再修改 b 的值，则变量 a 不受影响</li><li>如果变量 a 是引用类型，将 a 赋值给变量 b， 则 b 与 a 是同一个对象的引用，若修改 b 对象的属性，a 对象的该属性也会跟着变化。</li></ul><p>解决方案就是深拷贝，比如最简单的方式<code>JSON.parse(JSON.stringify(obj))</code>。</p><p>但是深拷贝这种方式比较耗费性能（空间和时间），有没有折中的方案呢？即修改 b 的同时不影响 a，且比深拷贝节省性能。</p><p>所以有了 immutable.js，简单说就是按需深拷贝。</p><p>此外还有一个重要原因，开发中经常遇到函数带有副作用，副作用的函数修改了一个引用类型某个属性的值或者浅 copy 的问题，immutable 为此类问题提供了一种优雅的解决方案。</p></blockquote><h3 id="immutable-简介"><a href="#immutable-简介" class="headerlink" title="immutable 简介"></a>immutable 简介</h3><ul><li>Immutable Data 就是一旦创建，就不能再被更改的数据</li><li>对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象；</li><li>Immutable 实现的原理是 Persistent Data Structure（<strong>持久化数据结构</strong>）: <strong>也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变</strong>。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（<strong>结构共享</strong>），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。</li></ul><p><img src="/images/react/immutable_1.gif" alt=""></p><h4 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h4><blockquote><p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像 Collection、List、Map、Set、Record、Seq。有非常全面的 map、filter、groupBy、reduce、find 函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的写法</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line">bar.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">a</span>.<span class="property">b</span>); <span class="comment">// 打印 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo === bar); <span class="comment">//  打印 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 immutable.js 后</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Immutable</span> <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="title class_">Immutable</span>.<span class="title function_">fromJS</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;);</span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">setIn</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>], <span class="number">2</span>); <span class="comment">// 使用 setIn 赋值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="title function_">getIn</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>])); <span class="comment">// 使用 getIn 取值，打印 1</span></span><br><span class="line"><span class="comment">// 等价于 foo.getIn([&#x27;a&#x27;]).getIn([&#x27;b&#x27;])</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo === bar); <span class="comment">//  打印 false</span></span><br></pre></td></tr></table></figure><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="Map-类型"><a href="#Map-类型" class="headerlink" title="Map 类型"></a>Map 类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果是对象类型，在immutable中使用 Map</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>] &#125;);</span><br><span class="line"><span class="comment">// 修改原对象的属性会产生一个新对象， 原对象保持不变</span></span><br><span class="line"><span class="keyword">const</span> map2 = map1.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 .equals 方法比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">equals</span>(map2)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 取值 .get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">get</span>(<span class="string">&quot;b&quot;</span>), map2.<span class="title function_">get</span>(<span class="string">&quot;b&quot;</span>)); <span class="comment">// 2, 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1.<span class="title function_">get</span>(<span class="string">&quot;c&quot;</span>) === map2.<span class="title function_">get</span>(<span class="string">&quot;c&quot;</span>)); <span class="comment">// true， c 没有改变</span></span><br></pre></td></tr></table></figure><h4 id="不可变类型比较"><a href="#不可变类型比较" class="headerlink" title="不可变类型比较"></a>不可变类型比较</h4><p>引用类型的比较是基于引用地址，而不可变对象的比较是基于集合的值是否一一相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;);</span><br><span class="line">map1.<span class="title function_">equals</span>(map2); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Immutable.is(map1, map2); // true</span></span><br><span class="line">map1 === map2; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map3 = map2.<span class="title function_">set</span>(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">map3 === map2; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个对象是不可变的，</span></span><br><span class="line"><span class="comment">// 则可以简单地通过对它进行另一个引用而不是复制整个对象来“复制”它。</span></span><br><span class="line"><span class="comment">// 因为这可以节省内存并潜在地提高依赖副本的程序的执行速度（例如撤消堆栈）。</span></span><br></pre></td></tr></table></figure><p>补充:  不可变对象的比较是基于值，算法复杂度 O(N), 而引用类型比较算法复杂度 O(1), 因此使用时要考虑性能权衡。</p><h4 id="JavaScript-优先的-API"><a href="#JavaScript-优先的-API" class="headerlink" title="JavaScript 优先的 API"></a>JavaScript 优先的 API</h4><div class="table-container"><table><thead><tr><th>JavaScript</th><th>immutable</th></tr></thead><tbody><tr><td>Map</td><td>Map</td></tr><tr><td>Set</td><td>Set</td></tr><tr><td>Array</td><td>List</td></tr><tr><td>Object</td><td>fromJS or Map</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Map</span>, <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="title class_">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> map2 = <span class="title class_">Map</span>(&#123; <span class="attr">c</span>: <span class="number">10</span>, <span class="attr">a</span>: <span class="number">20</span>, <span class="attr">t</span>: <span class="number">30</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">d</span>: <span class="number">100</span>, <span class="attr">o</span>: <span class="number">200</span>, <span class="attr">g</span>: <span class="number">300</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map3 = map1.<span class="title function_">merge</span>(map2, obj);</span><br><span class="line"><span class="comment">// Map &#123; a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 &#125;</span></span><br><span class="line"><span class="keyword">const</span> list1 = <span class="title class_">List</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> list2 = <span class="title class_">List</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> list3 = list1.<span class="title function_">concat</span>(list2, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面的示例可以看出</span></span><br><span class="line"><span class="comment">// 1. 与JS API靠拢 如 Array.prototype.concat</span></span><br><span class="line"><span class="comment">// 2. api可以与JS对象互相操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有 Immutable.js 集合都是可迭代的</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> aList = <span class="title class_">List</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> anArray = [<span class="number">0</span>, ...aList, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">// [ 0, 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h4 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a>嵌套结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套结构</span></span><br><span class="line"><span class="keyword">const</span> &#123; fromJS &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> nested = <span class="title function_">fromJS</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>] &#125; &#125; &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> nested.<span class="title function_">toJS</span>()); <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nested2 = nested.<span class="title function_">mergeDeep</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">d</span>: <span class="number">6</span> &#125; &#125; &#125;);</span><br><span class="line"><span class="comment">// nested2 &#123; a: &#123; b: &#123; c: [3, 4, 5] &#125;, d: 6 &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested2.<span class="title function_">getIn</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>])); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested2.<span class="title function_">getIn</span>([<span class="string">&quot;a&quot;</span>]).<span class="title function_">getIn</span>([<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>])); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nested3 = nested2.<span class="title function_">updateIn</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>], <span class="function">(<span class="params">value</span>) =&gt;</span> value + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nested3);</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5 ], d: 7 &#125; &#125; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nested4 = nested3.<span class="title function_">updateIn</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], <span class="function">(<span class="params">list</span>) =&gt;</span> list.<span class="title function_">push</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// Map &#123; a: Map &#123; b: Map &#123; c: List [ 3, 4, 5, 6 ], d: 7 &#125; &#125; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="批处理突变"><a href="#批处理突变" class="headerlink" title="批处理突变"></a>批处理突变</h4><p>默认情况下 immutable.js 中的 api 每执行一次就会返回一个新的 immutable 对象<br>那么如果我只需要最后生成的 immutable 对象，中间的对象都不要，可不可以只返回新一个新对象呢？<br>这就用到了 <code>withMutations</code> ，批量处理节省开销，目前只有少数方法 set push pop  可直接应用于持久化数据结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">List</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;immutable&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> list1 = <span class="title class_">List</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> list2 = list1.<span class="title function_">withMutations</span>(<span class="keyword">function</span> (<span class="params">list</span>) &#123;</span><br><span class="line">  list.<span class="title function_">push</span>(<span class="number">4</span>).<span class="title function_">push</span>(<span class="number">5</span>).<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list1.<span class="property">size</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list2.<span class="property">size</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h4 id="惰性序列"><a href="#惰性序列" class="headerlink" title="惰性序列"></a>惰性序列</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Seq</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> oddSquares = <span class="title class_">Seq</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line">  .<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;filter&#x27;</span>, x)</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> !== <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"><span class="comment">// 因为oddSquares是一个immutable对象，是惰性执行的，上述代码不会做任何操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当把 immutable 对象转换成 JavaScript 对象是 才会执行</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oddSquares.<span class="title function_">toJS</span>()); <span class="comment">// 控制台打印了 ‘filter’</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Range 是一种特殊的 Lazy 序列。</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Range</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;immutable&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> a = <span class="title class_">Range</span>(<span class="number">990</span>, <span class="number">1010</span>)</span><br><span class="line"><span class="comment">// .skip(100)</span></span><br><span class="line">.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">return</span> -n;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">reduce</span>(<span class="function">(<span class="params">r, n</span>) =&gt;</span> r \* n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---&#x27;</span>, a) <span class="comment">// --- 9.897178826145609e+59</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="cursor"><a href="#cursor" class="headerlink" title="cursor"></a>cursor</h4><p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Immutable</span> <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cursor</span> <span class="keyword">from</span> <span class="string">&quot;immutable/contrib/cursor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="title class_">Immutable</span>.<span class="title function_">fromJS</span>(&#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">1</span> &#125; &#125; &#125;);</span><br><span class="line"><span class="comment">// 让 cursor 指向 &#123; c: 1 &#125;</span></span><br><span class="line"><span class="keyword">let</span> cursor = <span class="title class_">Cursor</span>.<span class="title function_">from</span>(data, [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>], <span class="function">(<span class="params">newData</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当 cursor 或其子 cursor 执行 update 时调用</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newData);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cursor.<span class="title function_">get</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">// 1</span></span><br><span class="line">cursor = cursor.<span class="title function_">update</span>(<span class="string">&quot;c&quot;</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>);</span><br><span class="line">cursor.<span class="title function_">get</span>(<span class="string">&quot;c&quot;</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>降低了 mutable 带来的复杂性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">touchAndLog</span>(<span class="params">touchFn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> data = &#123; <span class="attr">key</span>: <span class="string">&quot;value&quot;</span> &#125;;</span><br><span class="line">  <span class="title function_">touchFn</span>(data);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">key</span>);</span><br><span class="line">  <span class="comment">// 因为不知道touchFn进行了什么操作，所以无法预料，但使用immutable，肯定是value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>节省内存</li></ol><p>会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Map</span> &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Map</span>(&#123;</span><br><span class="line">  <span class="attr">select</span>: <span class="string">&quot;users&quot;</span>,</span><br><span class="line">  <span class="attr">filter</span>: <span class="title class_">Map</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Cam&quot;</span> &#125;),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> b = a.<span class="title function_">set</span>(<span class="string">&quot;select&quot;</span>, <span class="string">&quot;people&quot;</span>);</span><br><span class="line"></span><br><span class="line">a === b; <span class="comment">// false</span></span><br><span class="line">a.<span class="title function_">get</span>(<span class="string">&quot;filter&quot;</span>) === b.<span class="title function_">get</span>(<span class="string">&quot;filter&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li>Undo/Redo，Copy/Paste<br>因为每次数据都是不一样的，所有可以存储在数组里，想回退到哪里就拿出对应数据即可</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol><li>需要学习新的 API</li><li>容易与原生对象混淆<ul><li>虽然 Immutable.js 尽量尝试把 API 设计的原生对象类似，有的时候还是很难区别到底是 Immutable 对象还是原生对象，容易混淆操作。</li><li>Immutable 中的 Map 和 List 虽对应原生 Object 和 Array，但操作非常不同，比如你要用 map.get(‘key’) 而不是 map.key，array.get(0) 而不是 array[0]。另外 Immutable 每次修改都会返回新对象，也很容易忘记赋值；</li><li>当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。</li></ul></li></ol><p>下面给出一些办法来避免类似问题发生: </p><ol><li>使用 TypeScript 这类有静态类型检查的工具；</li><li>约定变量命名规则: 如所有 Immutable 类型对象以 $$ 开头；</li><li>使用 Immutable.fromJS 而不是 Immutable.Map 或 Immutable.List 来创建对象，这样可以避免 Immutable 和原生对象间的混用；</li></ol><h3 id="使用-immutable-js-优化-react"><a href="#使用-immutable-js-优化-react" class="headerlink" title="使用 immutable.js 优化 react"></a>使用 immutable.js 优化 react</h3><ol><li>React 可以使用 shouldComponentUpdate()进行性能优化，但它默认返回 true，即始终会执行 render() 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新；</li><li>可以在 shouldComponentUpdate 周期里执行 deepCopy 和 deepCompare 避免无意义的 render，但 deepFn 也很耗时；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; is &#125; <span class="keyword">from</span> <span class="string">&quot;immutable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="attr">shouldComponentUpdate</span>: <span class="function">(<span class="params">nextProps = &#123;&#125;, nextState = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> thisProps = <span class="variable language_">this</span>.<span class="property">props</span> || &#123;&#125;,</span><br><span class="line">    thisState = <span class="variable language_">this</span>.<span class="property">state</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(thisProps).<span class="property">length</span> !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(nextProps).<span class="property">length</span> ||</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(thisState).<span class="property">length</span> !== <span class="title class_">Object</span>.<span class="title function_">keys</span>(nextState).<span class="property">length</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">is</span>(thisProps[key], nextProps[key])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> nextState) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      thisState[key] !== nextState[key] &amp;&amp;</span><br><span class="line">      !<span class="title function_">is</span>(thisState[key], nextState[key])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="immer"><a href="#immer" class="headerlink" title="immer"></a>immer</h2><blockquote><p><a href="https://immerjs.github.io/immer/zh-CN/">官方地址</a></p><p>对于处理修改引用类型副作用问题，ImmutableJS 有两个较大的不足: </p><ul><li>需要使用者学习它的数据结构操作方式，没有 Immer 提供的使用原生对象的操作方式简单、易用；</li><li>它的操作结果需要通过toJS方法才能得到原生对象，这使得在操作一个对象的时候，时刻要知道操作的是原生对象还是 ImmutableJS 的返回结果，稍不注意，就会产生问题；</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentState = &#123;</span><br><span class="line">  <span class="attr">x</span>: [<span class="number">2</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o1 = currentState;</span><br><span class="line">o1.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;</span><br><span class="line">  ...currentState,</span><br><span class="line">&#125;;</span><br><span class="line">o2.<span class="property">x</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentState); <span class="comment">// &#123; x: [ 2, 3 ], a: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用immer解决上述问题 */</span></span><br><span class="line"><span class="keyword">import</span> produce <span class="keyword">from</span> <span class="string">&quot;immer&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">  <span class="attr">x</span>: [<span class="number">2</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="title function_">produce</span>(state, <span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">  draft.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title function_">produce</span>(state, <span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">  draft.<span class="property">x</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#123; x: [ 2 ] &#125;     &#123; x: [ 2 ], a: 1 &#125;      &#123; x: [ 2, 3 ] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state, obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// produce方法做了哪些事情？</span></span><br><span class="line"><span class="comment">// 遍历原始对象，依次冻结个属性。</span></span><br></pre></td></tr></table></figure><h3 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h3><p><code>produce(currentState, recipe: (draftState) =&gt; void | draftState, ?PatchListener): nextState</code></p><ul><li>currentState: 被操作对象的最初状态</li><li>draftState: 根据 currentState 生成的草稿状态，它是 currentState 的代理，对 draftState 所做的任何修改都将被记录并用于生成 nextState 。在此过程中，currentState 将不受影响</li><li>nextState: 根据 draftState 生成的最终状态</li><li>produce: 用来生成 nextState 或 producer 的函数</li><li>producer: 通过 produce 生成，用来生产 nextState ，每次执行相同的操作</li><li>recipe: 用来操作 draftState 的函数</li></ul><h3 id="使用-immer-优化-react"><a href="#使用-immer-优化-react" class="headerlink" title="使用 immer 优化 react"></a>使用 immer 优化 react</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原写法 setState</span></span><br><span class="line"><span class="keyword">const</span> &#123; members &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">members</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...members[<span class="number">0</span>],</span><br><span class="line">      <span class="attr">age</span>: members[<span class="number">0</span>].<span class="property">age</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ...members.<span class="title function_">slice</span>(<span class="number">1</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在写法</span></span><br><span class="line"><span class="keyword">const</span> &#123; members &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">    <span class="title function_">produce</span>(members, <span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">      draft.<span class="property">members</span>[<span class="number">0</span>].<span class="property">age</span>++;</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="reduce-中使用-immer"><a href="#reduce-中使用-immer" class="headerlink" title="reduce 中使用 immer"></a>reduce 中使用 immer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// produce 内的 recipe 回调函数的第2个参数与obj对象是指向同一块内存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = &#123; name: <span class="string">&quot;章三&quot;</span>, age: <span class="number">12</span> &#125;, action</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> immer.<span class="title function_">produce</span>(state, <span class="function">(<span class="params">draft</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ADD&quot;</span>:</span><br><span class="line">        draft.<span class="property">age</span>++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(reducer);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">forceUpdate</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = store.<span class="title function_">getState</span>();</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;state.name&#125;今年&#123;state.age&#125;周岁</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> store.dispatch(&#123; type: &quot;ADD&quot; &#125;)&#125;&gt;过生日<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> immutable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React fiber 篇</title>
      <link href="/articles/react/fiber/"/>
      <url>/articles/react/fiber/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="react-架构局限性"><a href="#react-架构局限性" class="headerlink" title="react 架构局限性"></a>react 架构局限性</h3><blockquote><p>v16 采用 Stack Reconciliation，即递归的方式处理组件树更新，从根节点开始遍历整棵树，伴随着同步、阻塞，会出现一些问题</p><ul><li>渲染时间过长: 复杂度过高的任务导致主线程阻塞，Native GUI 线程中断，无法响应用户指令，影响体验</li><li>优先级管理: 无优先级概念，导致关键任务可能被低优先级任务阻塞</li><li>中断恢复机制: 一旦开始就无法中断和恢复</li></ul></blockquote><h3 id="fiber-解决方案"><a href="#fiber-解决方案" class="headerlink" title="fiber 解决方案"></a>fiber 解决方案</h3><ol><li>性能提升: </li></ol><ul><li>增量渲染: 将整个渲染过程分成多个可中断的、执行时间短的小任务，并使用任务调度器（Scheduler）来动态地调度这些任务，避免长时间的阻塞，提升了渲染的灵活性和效率</li><li>任务分片: Time Slicing，fiber 可在空闲时间内执行渲染任务，从而最大限度地利用浏览器的空闲时间<blockquote><ul><li>任务队列 (Task Queue): 将所有的更新操作封装成任务，并放入一个任务队列中</li><li>执行任务: 执行队列任务，记录当前任务执行时间</li><li>时间检查: 若任务执行时间超过阈值 (默认 5 毫秒)，则中断执行</li><li>让出线程: 使用 <code>MessageChannel</code> 和 <code>postMessage</code> 让出线程，浏览器执行其他任务</li><li>通知执行: 浏览器执行完成后，通过 <code>onmessage</code> 事件继续执行之前中断的任务</li><li>循环执行: 重复此过程直到任务队列清空</li></ul></blockquote></li></ul><ol><li>用户体验: </li></ol><ul><li>分配优先级: 确保高优先级的任务尽快处理<blockquote><ul><li>同步任务: 最高优先级的任务，通常用于处理用户交互事件和页面加载过程中的同步操作</li><li>异步任务: 中等优先级的任务，包括普通的更新任务和网络请求等异步操作</li><li>空闲任务: 最低优先级的任务，通常用于执行一些不紧急的任务，如日志记录或统计信息收集等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NoPriority</span> = <span class="number">0</span>; <span class="comment">// 无优先级任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ImmediatePriority</span> = <span class="number">1</span>; <span class="comment">// 立即执行任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UserBlockingPriority</span> = <span class="number">2</span>; <span class="comment">// 用户阻塞任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NormalPriority</span> = <span class="number">3</span>; <span class="comment">// 正常任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">LowPriority</span> = <span class="number">4</span>; <span class="comment">// 低优先级任务</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">IdlePriority</span> = <span class="number">5</span>; <span class="comment">// 空闲执行任务</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><ol><li>灵活和扩展: </li></ol><ul><li>为未来特性提供基础，例如 Concurrent Mode 和 Suspense</li></ul><ol><li>维护和调试: </li></ol><ul><li>改进 React 内部的代码结构，便于调试和维护</li></ul><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><h3 id="浏览器帧"><a href="#浏览器帧" class="headerlink" title="浏览器帧"></a>浏览器帧</h3><ol><li>浏览器对每一帧的执行和渲染的流程分为 7 个阶段<br><img src="/images/react/fiber_1.png" alt=""></li></ol><ul><li>第 1-3 阶段: js 执行阶段，分别为用户事件回调、定时器回调、窗口变更事件回调</li><li>第 4 阶段: rAF 阶段，即 window.requestAnimationFrame 回调执行阶段</li><li>第 5-6 阶段: 页面渲染阶段，前 3 阶段 js 执行时间过长将阻塞渲染，导致页面卡顿</li><li>第 7 阶段: 帧空闲阶段，即 window.requestIdleCallback 回调执行阶段。若前 6 阶段运行时间超过 16.6ms，则该回调不会执行</li></ul><ol><li><p>requestIdleCallback: 回调会传入一个期限，表示浏览器有多少时间供事件执行, 为了不耽误事，最好在这个时间范围内执行完毕。requestAnimationFrame 的回调会在每一帧确认执行, 属于高优先级任务，而 requestIdleCallback 的回调不一定, 属于低优先级任务</p></li><li><p>任务优先级</p></li></ol><ul><li>Immediate(-1): 任务会同步执行，或者说要马上执行且不能中断</li><li>UserBlocking(250ms): 任务一般是用户交互的结果，需要即时得到反馈</li><li>Normal(5s): 不需要立即完成的任务，例如网络请求</li><li>Low(10s): 任务可以放后，但是最终应该得到执行，例如分析通知</li><li>Idle(没有超时时间): 一些没有必要做的任务</li></ul><h3 id="fiber-结构"><a href="#fiber-结构" class="headerlink" title="fiber 结构"></a>fiber 结构</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">FiberNode</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">this</span>: $<span class="title class_">FlowFixMe</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">tag</span>: <span class="title class_">WorkTag</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">pendingProps</span>: mixed,</span></span><br><span class="line"><span class="params">  <span class="attr">key</span>: <span class="literal">null</span> | <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">mode</span>: <span class="title class_">TypeOfMode</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 基本属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tag</span> = tag; <span class="comment">// 描述此Fiber的启动模式的值（LegacyRoot = 0; ConcurrentRoot = 1）</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">key</span> = key; <span class="comment">// React key</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">elementType</span> = <span class="literal">null</span>; <span class="comment">// 描述React元素的类型。例如，对于JSX&lt;App /&gt;，elementType是App</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="literal">null</span>; <span class="comment">// 组件类型</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">stateNode</span> = <span class="literal">null</span>; <span class="comment">// 对于类组件，这是类的实例；对于DOM元素，它是对应的DOM节点。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Fiber链接</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">return</span> = <span class="literal">null</span>; <span class="comment">// 指向父Fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">child</span> = <span class="literal">null</span>; <span class="comment">// 指向第一个子Fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sibling</span> = <span class="literal">null</span>; <span class="comment">// 指向其兄弟Fiber</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span>; <span class="comment">// 子Fiber中的索引位置</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ref</span> = <span class="literal">null</span>; <span class="comment">// 如果组件上有ref属性，则该属性指向它</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">refCleanup</span> = <span class="literal">null</span>; <span class="comment">// 如果组件上的ref属性在更新中被删除或更改，此字段会用于追踪需要清理的旧ref</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Props &amp; State</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pendingProps</span> = pendingProps; <span class="comment">// 正在等待处理的新props</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">memoizedProps</span> = <span class="literal">null</span>; <span class="comment">// 上一次渲染时的props</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">updateQueue</span> = <span class="literal">null</span>; <span class="comment">// 一个队列，包含了该Fiber上的状态更新和副作用</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">memoizedState</span> = <span class="literal">null</span>; <span class="comment">// 上一次渲染时的state</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dependencies</span> = <span class="literal">null</span>; <span class="comment">// 该Fiber订阅的上下文或其他资源的描述</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 工作模式</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">mode</span> = mode; <span class="comment">// 描述Fiber工作模式的标志（例如Concurrent模式、Blocking模式等）。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Effects</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">flags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 描述该Fiber发生的副作用的标志（十六进制的标识）</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subtreeFlags</span> = <span class="title class_">NoFlags</span>; <span class="comment">// 描述该Fiber子树中发生的副作用的标志（十六进制的标识）</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deletions</span> = <span class="literal">null</span>; <span class="comment">// 在commit阶段要删除的子Fiber数组</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lanes</span> = <span class="title class_">NoLanes</span>; <span class="comment">// 与React的并发模式有关的调度概念。</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">childLanes</span> = <span class="title class_">NoLanes</span>; <span class="comment">// 与React的并发模式有关的调度概念。</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">alternate</span> = <span class="literal">null</span>; <span class="comment">// Current Tree和Work-in-progress (WIP) Tree的互相指向对方 tree里的对应单元</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果启用了性能分析</span></span><br><span class="line">  <span class="keyword">if</span> (enableProfilerTimer) &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发模式中</span></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Concurrent-Mode"><a href="#Concurrent-Mode" class="headerlink" title="Concurrent Mode"></a>Concurrent Mode</h3><blockquote><p>渲染模式，提高性能和体验，利用了 fiber 架构的增量渲染和时间切片技术，能够在多个优先级任务之间动态地调度执行，使得高优先级任务能够优先得到处理。具体有以下实现</p></blockquote><h4 id="batchedUpdates"><a href="#batchedUpdates" class="headerlink" title="batchedUpdates"></a>batchedUpdates</h4><blockquote><p>连续触发多次状态更新会被更智能地合并为单一的更新操作，以避免不必要的渲染</p><ul><li>早期版本的 batchedUpdates 无法合并一些脱离当前上下文环境的更新</li><li>在 Concurrent Mode 模式下，状态更新的合并不再局限于当前上下文，而是根据更新的优先级来决定是否合并</li></ul></blockquote><h4 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h4><blockquote><p>用于在组件树中等待异步加载内容的机制，能够在数据加载完成之前显示占位符或 loading 界面，提高用户体验</p></blockquote><h4 id="Lazy-Loading"><a href="#Lazy-Loading" class="headerlink" title="Lazy Loading"></a>Lazy Loading</h4><blockquote><p>延迟加载组件或资源，能够提高页面的加载速度和响应速度，减少初次加载时的资源占用和等待时间</p></blockquote><h4 id="useDeferredValue"><a href="#useDeferredValue" class="headerlink" title="useDeferredValue"></a>useDeferredValue</h4><blockquote><p>内部会调用 useState 并触发一次更新，但优先级很低，当前如果有正在进行中的更新，不会受 useDeferredValue 产生的更新影响，能够返回一个延后更新的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deferredValue = <span class="title function_">useDeferredValue</span>(value);</span><br></pre></td></tr></table></figure></blockquote><h4 id="优雅降级"><a href="#优雅降级" class="headerlink" title="优雅降级"></a>优雅降级</h4><blockquote><p>用于处理低优先级任务无法立即执行的情况。在任务无法立即执行时，Concurrent Mode 能够自动调整任务的优先级，保证高优先级任务能够得到及时处理，避免页面加载和渲染的阻塞</p></blockquote><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><ol><li><p>工作单元: 每个 fiber 节点代表一个单元，所有 fiber 节点共同组成一个 fiber 链表树，精确定位控制节点行为</p></li><li><p>链表属性: child、sibling 和 return 字段形成节点关系网</p></li><li><p>双缓冲: </p><blockquote><ul><li>两棵树，当前树 (currentFiber)，基于此创建的临时树 (workInProgressFiber)，WIP 包含了当前更新受影响的顶层节点直至其所有后代节点</li><li>WIP 在后台进行比较更新，完成后复制添加其他未更新节点，最终替换 currentFiber，成为新的 currentFiber</li><li>两棵树可随时进行比较、中断、恢复等操作，提升渲染性能及 UI 稳定</li></ul></blockquote></li><li><p>更新判断: 通过 memoizedProps、pendingProps 和 memoizedState 字段计算该节点上一个状态和即将应用的状态。从而判断是否需要更新，避免不必要的渲染</p></li><li><p>副作用收集: flags、subtreeFlags 字段标识 fiber 及其子树中需要执行的副作用，React 会收集并在 commit 阶段一次性执行</p></li></ol><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><h3 id="Reconciliation"><a href="#Reconciliation" class="headerlink" title="Reconciliation"></a>Reconciliation</h3><blockquote><p>构建工作数，并通过协调算法比较新旧 props 确定更新的节点</p><ul><li>旧的协调算法: 深度优先遍历 VDOM 树，一旦开始便无法中断</li><li>新的协调算法: 增量渲染、时间切片</li><li>协调阶段可能被中断、恢复，甚至重做，协调阶段的生命周期钩子可能会被调用多次,例如 componentWillMount 可能会被调用两次，所以 v17 后一些生命周期废除了</li></ul></blockquote><h4 id="beginWork"><a href="#beginWork" class="headerlink" title="beginWork"></a>beginWork</h4><blockquote><p>第一阶段: 创建与标记更新节点 (ReactFiberBeginWork.js)</p></blockquote><ol><li>判断 Fiber 节点是否要更新</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberBeginWork.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">beginWork</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">current</span>: <span class="title class_">Fiber</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">workInProgress</span>: <span class="title class_">Fiber</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">renderLanes</span>: <span class="title class_">Lanes</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Fiber</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (current !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是旧节点，需要检查props和context是否有变化再确认是否需要更新节点</span></span><br><span class="line">    <span class="keyword">const</span> oldProps = current.<span class="property">memoizedProps</span>;</span><br><span class="line">    <span class="keyword">const</span> newProps = workInProgress.<span class="property">pendingProps</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldProps !== newProps || <span class="title function_">hasLegacyContextChanged</span>()) &#123;</span><br><span class="line">      didReceiveUpdate = <span class="literal">true</span>; <span class="comment">// props和context有变化，说明节点有更新</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其它特殊情况的判断</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    didReceiveUpdate = <span class="literal">false</span>; <span class="comment">// 这是新节点，要创建，而不是更新</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  workInProgress.<span class="property">lanes</span> = <span class="title class_">NoLanes</span>; <span class="comment">// 进入beginWork表示开始新的工作阶段，所以要把旧的workInProgress优先级清除掉</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (workInProgress.<span class="property">tag</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过workInProgress的tag属性来确定如何处理当前的Fiber节点</span></span><br><span class="line">    <span class="comment">// 每一种tag对应一种不同的Fiber类型，进入不同的调和过程（reconcileChildren()）</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">IndeterminateComponent</span>: <span class="comment">// 尚未确定其类型的组件</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">LazyComponent</span>: <span class="comment">// 懒加载组件</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">FunctionComponent</span>: <span class="comment">// 函数组件</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">ClassComponent</span>: <span class="comment">// 类组件</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其它多种Fiber类型</span></span><br><span class="line">    <span class="comment">// case ……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>判断 Fiber 子节点是更新还是复用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberBeginWork.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reconcileChildren</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">current</span>: <span class="title class_">Fiber</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">workInProgress</span>: <span class="title class_">Fiber</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">nextChildren</span>: <span class="built_in">any</span>, <span class="comment">// 要调和的新的子元素</span></span></span><br><span class="line"><span class="params">  <span class="attr">renderLanes</span>: <span class="title class_">Lanes</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (current === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果current为空，说明这个Fiber是首次渲染，React会为nextChildren生成一组新的Fiber节点</span></span><br><span class="line">    workInProgress.<span class="property">child</span> = <span class="title function_">mountChildFibers</span>(</span><br><span class="line">      workInProgress,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      nextChildren,</span><br><span class="line">      renderLanes</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当current非空时，React会利用现有的Fiber节点（current.child）和新的子元素（nextChildren）进行调和</span></span><br><span class="line">    workInProgress.<span class="property">child</span> = <span class="title function_">reconcileChildFibers</span>(</span><br><span class="line">      workInProgress,</span><br><span class="line">      current.<span class="property">child</span>,</span><br><span class="line">      nextChildren,</span><br><span class="line">      renderLanes</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// react/packages/react-reconciler/src/ReactChildFiber.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">reconcileChildFibers</span>: <span class="title class_">ChildReconciler</span> =</span><br><span class="line">  <span class="title function_">createChildReconciler</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">mountChildFibers</span>: <span class="title class_">ChildReconciler</span> = <span class="title function_">createChildReconciler</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="completeUnitOfWork"><a href="#completeUnitOfWork" class="headerlink" title="completeUnitOfWork"></a>completeUnitOfWork</h4><blockquote><p>第二阶段: 遍历 Fiber 节点，记录有副作用节点的关系，收集副作用列表 (ReactFiberWorkLoop.js)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberWorkLoop.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeUnitOfWork</span>(<span class="params"><span class="attr">unitOfWork</span>: <span class="title class_">Fiber</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">completedWork</span>: <span class="title class_">Fiber</span> = unitOfWork; <span class="comment">// 当前正在完成的工作单元</span></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> current = completedWork.<span class="property">alternate</span>; <span class="comment">// 当前Fiber节点在另一棵树上的版本</span></span><br><span class="line">    <span class="keyword">const</span> returnFiber = completedWork.<span class="property">return</span>; <span class="comment">// 当前Fiber节点的父节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> next;</span><br><span class="line">    next = <span class="title function_">completeWork</span>(current, completedWork, renderLanes); <span class="comment">// 调用completeWork函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 当前Fiber还有工作要完成</span></span><br><span class="line">      workInProgress = next;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> siblingFiber = completedWork.<span class="property">sibling</span>;</span><br><span class="line">    <span class="keyword">if</span> (siblingFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有兄弟节点，则进入兄弟节点的工作</span></span><br><span class="line">      workInProgress = siblingFiber;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果没有兄弟节点，回到父节点继续</span></span><br><span class="line">    completedWork = returnFiber;</span><br><span class="line">    workInProgress = completedWork;</span><br><span class="line">  &#125; <span class="keyword">while</span> (completedWork !== <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果处理了整个Fiber树，更新workInProgressRootExitStatus为RootCompleted，表示调和已完成</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgressRootExitStatus === <span class="title class_">RootInProgress</span>) &#123;</span><br><span class="line">    workInProgressRootExitStatus = <span class="title class_">RootCompleted</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="completeWork"><a href="#completeWork" class="headerlink" title="completeWork"></a>completeWork</h4><blockquote><p>第三阶段: 据 tag 进行不同的处理 (ReactFiberCompleteWork.js)<br>bubbleProperties: 记录 Fiber 的副作用标志，并为子 Fiber 创建链表</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberCompleteWork.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">completeWork</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">current</span>: <span class="title class_">Fiber</span> | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">workInProgress</span>: <span class="title class_">Fiber</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">renderLanes</span>: <span class="title class_">Lanes</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Fiber</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> newProps = workInProgress.<span class="property">pendingProps</span>;</span><br><span class="line">  <span class="keyword">switch</span> (workInProgress.<span class="property">tag</span>) &#123;</span><br><span class="line">    <span class="comment">// 多种tag</span></span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">FunctionComponent</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">ForwardRef</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">SimpleMemoComponent</span>:</span><br><span class="line">      <span class="title function_">bubbleProperties</span>(workInProgress);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">ClassComponent</span>:</span><br><span class="line">      <span class="comment">// 省略逻辑</span></span><br><span class="line">      <span class="comment">// ……</span></span><br><span class="line">      <span class="title function_">bubbleProperties</span>(workInProgress);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">HostComponent</span>:</span><br><span class="line">      <span class="comment">// 省略逻辑</span></span><br><span class="line">      <span class="comment">// ……</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 多种tag</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleProperties</span>(<span class="params"><span class="attr">completedWork</span>: <span class="title class_">Fiber</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> didBailout =</span><br><span class="line">    completedWork.<span class="property">alternate</span> !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">    completedWork.<span class="property">alternate</span>.<span class="property">child</span> === completedWork.<span class="property">child</span>; <span class="comment">// 当前的Fiber与其alternate（备用/上一次的Fiber）有相同的子节点，则跳过更新</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newChildLanes = <span class="title class_">NoLanes</span>; <span class="comment">// 合并后的子Fiber的lanes</span></span><br><span class="line">  <span class="keyword">let</span> subtreeFlags = <span class="title class_">NoFlags</span>; <span class="comment">// 子树的flags。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!didBailout) &#123;</span><br><span class="line">    <span class="comment">// 没有bailout，需要冒泡子Fiber的属性到父Fiber</span></span><br><span class="line">    <span class="keyword">let</span> child = completedWork.<span class="property">child</span>;</span><br><span class="line">    <span class="comment">// 遍历子Fiber，并合并它们的lanes和flags</span></span><br><span class="line">    <span class="keyword">while</span> (child !== <span class="literal">null</span>) &#123;</span><br><span class="line">      newChildLanes = <span class="title function_">mergeLanes</span>(</span><br><span class="line">        newChildLanes,</span><br><span class="line">        <span class="title function_">mergeLanes</span>(child.<span class="property">lanes</span>, child.<span class="property">childLanes</span>)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      subtreeFlags |= child.<span class="property">subtreeFlags</span>;</span><br><span class="line">      subtreeFlags |= child.<span class="property">flags</span>;</span><br><span class="line"></span><br><span class="line">      child.<span class="property">return</span> = completedWork; <span class="comment">// Fiber的return指向父Fiber，确保整个Fiber树的一致性</span></span><br><span class="line">      child = child.<span class="property">sibling</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    completedWork.<span class="property">subtreeFlags</span> |= subtreeFlags; <span class="comment">// 合并所有flags（副作用）</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有bailout，只冒泡那些具有“静态”生命周期的flags</span></span><br><span class="line">    <span class="keyword">let</span> child = completedWork.<span class="property">child</span>;</span><br><span class="line">    <span class="keyword">while</span> (child !== <span class="literal">null</span>) &#123;</span><br><span class="line">      newChildLanes = <span class="title function_">mergeLanes</span>(</span><br><span class="line">        newChildLanes,</span><br><span class="line">        <span class="title function_">mergeLanes</span>(child.<span class="property">lanes</span>, child.<span class="property">childLanes</span>)</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      subtreeFlags |= child.<span class="property">subtreeFlags</span> &amp; <span class="title class_">StaticMask</span>; <span class="comment">// 不同</span></span><br><span class="line">      subtreeFlags |= child.<span class="property">flags</span> &amp; <span class="title class_">StaticMask</span>; <span class="comment">// 不同</span></span><br><span class="line"></span><br><span class="line">      child.<span class="property">return</span> = completedWork;</span><br><span class="line">      child = child.<span class="property">sibling</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    completedWork.<span class="property">subtreeFlags</span> |= subtreeFlags;</span><br><span class="line">  &#125;</span><br><span class="line">  completedWork.<span class="property">childLanes</span> = newChildLanes; <span class="comment">// 获取所有子Fiber的lanes。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> didBailout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Fiber 架构计算速度加快</p><blockquote><p>flags 或 subtreeFlags 是 16 进制的标识，进行按位或(|)运算后，可以记录当前节点本身和子树的副作用类型，通过运算结果可以减少节点的遍历</p></blockquote></li><li><p>调和过程可中断</p><blockquote><p>Concurrent Mode 的能力使得 React 可以优先处理高优先级的更新</p></blockquote></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberWorkLoop.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">renderRootConcurrent</span>(<span class="params"><span class="attr">root</span>: <span class="title class_">FiberRoot</span>, <span class="attr">lanes</span>: <span class="title class_">Lanes</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 保存当前的执行上下文和 dispatcher</span></span><br><span class="line">  <span class="keyword">const</span> prevExecutionContext = executionContext;</span><br><span class="line">  executionContext |= <span class="title class_">RenderContext</span>;</span><br><span class="line">  <span class="keyword">const</span> prevDispatcher = <span class="title function_">pushDispatcher</span>(root.<span class="property">containerInfo</span>);</span><br><span class="line">  <span class="keyword">const</span> prevCacheDispatcher = <span class="title function_">pushCacheDispatcher</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) &#123;</span><br><span class="line">    <span class="comment">// 如果当前的工作进度树与传入的 root 或 lanes 不匹配，我们需要为新的渲染任务准备一个新的堆栈。</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 持续的工作循环，除非中断发生，否则会一直尝试完成渲染工作</span></span><br><span class="line">  <span class="attr">outer</span>: <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        workInProgressSuspendedReason !== <span class="title class_">NotSuspended</span> &amp;&amp;</span><br><span class="line">        workInProgress !== <span class="literal">null</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// 如果当前的工作进度是由于某种原因而被挂起的，并且仍然有工作待处理，那么会处理它</span></span><br><span class="line">        <span class="keyword">const</span> unitOfWork = workInProgress;</span><br><span class="line">        <span class="keyword">const</span> thrownValue = workInProgressThrownValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据不同挂起原因，进行中断、恢复等计算</span></span><br><span class="line">        <span class="attr">resumeOrUnwind</span>: <span class="keyword">switch</span> (workInProgressSuspendedReason) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">SuspendedOnError</span>: &#123;</span><br><span class="line">            <span class="comment">// 如果工作因错误被挂起，那么工作会被中断，并从最后一个已知的稳定点继续</span></span><br><span class="line">            <span class="comment">// ……省略逻辑</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">SuspendedOnData</span>: &#123;</span><br><span class="line">            <span class="comment">// 工作因等待数据（通常是一个异步请求的结果）而被挂起，</span></span><br><span class="line">            <span class="comment">// ……省略逻辑</span></span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">SuspendedOnInstance</span>: &#123;</span><br><span class="line">            <span class="comment">// 将挂起的原因更新为SuspendedOnInstanceAndReadyToContinue并中断工作循环，标记为稍后准备好继续执行</span></span><br><span class="line">            workInProgressSuspendedReason =</span><br><span class="line">              <span class="title class_">SuspendedOnInstanceAndReadyToContinue</span>;</span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">SuspendedAndReadyToContinue</span>: &#123;</span><br><span class="line">            <span class="comment">// 表示之前的挂起工作现在已经准备好继续执行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_">isThenableResolved</span>(thenable)) &#123;</span><br><span class="line">              <span class="comment">// 如果已解析，这意味着需要的数据现在已经可用</span></span><br><span class="line">              workInProgressSuspendedReason = <span class="title class_">NotSuspended</span>;</span><br><span class="line">              workInProgressThrownValue = <span class="literal">null</span>;</span><br><span class="line">              <span class="title function_">replaySuspendedUnitOfWork</span>(unitOfWork); <span class="comment">// 恢复执行被挂起的工作</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              workInProgressSuspendedReason = <span class="title class_">NotSuspended</span>;</span><br><span class="line">              workInProgressThrownValue = <span class="literal">null</span>;</span><br><span class="line">              <span class="title function_">throwAndUnwindWorkLoop</span>(unitOfWork, thrownValue); <span class="comment">// 继续循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">case</span> <span class="title class_">SuspendedOnInstanceAndReadyToContinue</span>: &#123;</span><br><span class="line">            <span class="comment">// ……省略部分逻辑</span></span><br><span class="line">            <span class="keyword">const</span> isReady = <span class="title function_">preloadInstance</span>(<span class="keyword">type</span>, props);</span><br><span class="line">            <span class="keyword">if</span> (isReady) &#123;</span><br><span class="line">              <span class="comment">// 实例已经准备好</span></span><br><span class="line">              workInProgressSuspendedReason = <span class="title class_">NotSuspended</span>; <span class="comment">// 该fiber已完成，不需要再挂起</span></span><br><span class="line">              workInProgressThrownValue = <span class="literal">null</span>;</span><br><span class="line">              <span class="keyword">const</span> sibling = hostFiber.<span class="property">sibling</span>;</span><br><span class="line">              <span class="keyword">if</span> (sibling !== <span class="literal">null</span>) &#123;</span><br><span class="line">                workInProgress = sibling; <span class="comment">// 有兄弟节点，开始处理兄弟节点</span></span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 没有兄弟节点，回到父节点</span></span><br><span class="line">                <span class="keyword">const</span> returnFiber = hostFiber.<span class="property">return</span>;</span><br><span class="line">                <span class="keyword">if</span> (returnFiber !== <span class="literal">null</span>) &#123;</span><br><span class="line">                  workInProgress = returnFiber;</span><br><span class="line">                  <span class="title function_">completeUnitOfWork</span>(returnFiber); <span class="comment">// 收集副作用，前面有详细介绍</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  workInProgress = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">break</span> resumeOrUnwind;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 还有其它case</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">workLoopConcurrent</span>(); <span class="comment">// 如果没有任何工作被挂起，那么就会继续处理工作循环。</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (thrownValue) &#123;</span><br><span class="line">      <span class="title function_">handleThrow</span>(root, thrownValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置了之前保存的执行上下文和dispatcher，确保后续的代码不会受到这个函数的影响</span></span><br><span class="line">  <span class="title function_">resetContextDependencies</span>();</span><br><span class="line">  <span class="title function_">popDispatcher</span>(prevDispatcher);</span><br><span class="line">  <span class="title function_">popCacheDispatcher</span>(prevCacheDispatcher);</span><br><span class="line">  executionContext = prevExecutionContext;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查调和是否已完成</span></span><br><span class="line">  <span class="keyword">if</span> (workInProgress !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 未完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">RootInProgress</span>; <span class="comment">// 返回一个状态值，表示还有未完成</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 已完成</span></span><br><span class="line">    workInProgressRoot = <span class="literal">null</span>; <span class="comment">// 重置root</span></span><br><span class="line">    workInProgressRootRenderLanes = <span class="title class_">NoLanes</span>; <span class="comment">// 重置Lane</span></span><br><span class="line">    <span class="title function_">finishQueueingConcurrentUpdates</span>(); <span class="comment">// 处理队列中的并发更新</span></span><br><span class="line">    <span class="keyword">return</span> workInProgressRootExitStatus; <span class="comment">// 返回当前渲染root的最终退出状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><blockquote><p>通过 commitRoot 和 commitRootImpl 方法，遍历在 Reconciliation 阶段创建的副作用列表进行更新，更新 DOM 并执行副作用。一旦进入提交阶段，需要正确地处理各种副作用，无法中断</p></blockquote><h4 id="BeforeMutation"><a href="#BeforeMutation" class="headerlink" title="BeforeMutation"></a>BeforeMutation</h4><blockquote><p>第一阶段: 遍历副作用列表 (ReactFiberCommitWork.js)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberCommitWork.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">commitBeforeMutationEffects</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">root</span>: <span class="title class_">FiberRoot</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">firstChild</span>: <span class="title class_">Fiber</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  nextEffect = firstChild; <span class="comment">// nextEffect是遍历此链表时的当前fiber</span></span><br><span class="line">  <span class="title function_">commitBeforeMutationEffects_begin</span>(); <span class="comment">// 遍历fiber，处理节点删除和确认节点在before mutation阶段是否有要处理的副作用</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> shouldFire = shouldFireAfterActiveInstanceBlur; <span class="comment">// 当一个焦点元素被删除或隐藏时，它会被设置为 true</span></span><br><span class="line">  shouldFireAfterActiveInstanceBlur = <span class="literal">false</span>;</span><br><span class="line">  focusedInstanceHandle = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> shouldFire;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CommitMutation"><a href="#CommitMutation" class="headerlink" title="CommitMutation"></a>CommitMutation</h4><blockquote><p>第二阶段: 提交更新 (ReactFiberCommitWork.js)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberCommitWork.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">commitMutationEffects</span>(<span class="params"></span></span><br><span class="line"><span class="params">  root: FiberRoot,</span></span><br><span class="line"><span class="params">  finishedWork: Fiber,</span></span><br><span class="line"><span class="params">  committedLanes: Lanes</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// lanes和root被设置为&quot;in progress&quot;状态，表示它们正在被处理</span></span><br><span class="line">  inProgressLanes = committedLanes;</span><br><span class="line">  inProgressRoot = root;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归遍历Fiber，更新副作用节点</span></span><br><span class="line">  <span class="title function_">commitMutationEffectsOnFiber</span>(finishedWork, root, committedLanes);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重置进行中的lanes和root</span></span><br><span class="line">  inProgressLanes = <span class="literal">null</span>;</span><br><span class="line">  inProgressRoot = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="commitLayout"><a href="#commitLayout" class="headerlink" title="commitLayout"></a>commitLayout</h4><blockquote><p>第二阶段: 处理 layout effects (ReactFiberCommitWork.js)</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/react-reconciler/src/ReactFiberCommitWork.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">commitLayoutEffects</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">finishedWork</span>: <span class="title class_">Fiber</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">root</span>: <span class="title class_">FiberRoot</span>,</span></span><br><span class="line"><span class="params">  <span class="attr">committedLanes</span>: <span class="title class_">Lanes</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  inProgressLanes = committedLanes;</span><br><span class="line">  inProgressRoot = root;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个current指向就Fiber树的alternate</span></span><br><span class="line">  <span class="keyword">const</span> current = finishedWork.<span class="property">alternate</span>;</span><br><span class="line">  <span class="comment">// 处理那些由useLayoutEffect创建的layout effects</span></span><br><span class="line">  <span class="title function_">commitLayoutEffectOnFiber</span>(root, current, finishedWork, committedLanes);</span><br><span class="line"></span><br><span class="line">  inProgressLanes = <span class="literal">null</span>;</span><br><span class="line">  inProgressRoot = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiber </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React router 篇</title>
      <link href="/articles/react/router/"/>
      <url>/articles/react/router/</url>
      
        <content type="html"><![CDATA[<h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><blockquote><p>hash</p><ul><li>url 中的 hash 部分不会引起页面的刷新</li><li>hashchange 监听 url 变化，浏览器导航栏的前进后退，a 标签，window.location 等方式触发事件</li></ul><p>history</p><ul><li>pushState 和 replaceState 改变 url 的 path 部分不会引起页面刷新</li><li>popchange 监听 url 变化，只有在浏览器导航栏的前进后退改变 url 时会触发事件，pushState/replaceState 不会触发 popstate 方法，需要进行拦截或重写 pushState/replaceState 来监听</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _wr = <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> orig = history[type];</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> e = <span class="keyword">new</span> <span class="title class_">Event</span>(type);</span><br><span class="line">    e.<span class="property">arguments</span> = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> rv = orig.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(e);</span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">history.<span class="property">pushState</span> = <span class="title function_">_wr</span>(<span class="string">&quot;pushstate&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="react-router-架构"><a href="#react-router-架构" class="headerlink" title="react-router 架构"></a>react-router 架构</h2><p><img src="/images/react/router_1.png" alt=""></p><h3 id="BrowserHistory"><a href="#BrowserHistory" class="headerlink" title="BrowserHistory"></a>BrowserHistory</h3><blockquote><ul><li>监听路由变化的 listen 方法以及对应的清理监听 unlisten 方法</li><li>重写路由的 push 方法，自动触发 popstate 方法</li><li>window.location 获取参数</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建和管理listeners的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">EventEmitter</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> events = [];</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">subscribe</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">      events.<span class="title function_">push</span>(fn);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        events = events.<span class="title function_">filter</span>(<span class="function">(<span class="params">handler</span>) =&gt;</span> handler !== fn);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">emit</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">      events.<span class="title function_">forEach</span>(<span class="function">(<span class="params">fn</span>) =&gt;</span> fn &amp;&amp; <span class="title function_">fn</span>(arg));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createBrowserHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="title class_">EventEmitter</span>();</span><br><span class="line">  <span class="keyword">let</span> location = &#123; <span class="attr">pathname</span>: <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line">  <span class="comment">// 路由变化时的回调</span></span><br><span class="line">  <span class="keyword">const</span> handlePop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentLocation = &#123; <span class="attr">pathname</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span> &#125;;</span><br><span class="line">    <span class="title class_">EventBus</span>.<span class="title function_">emit</span>(currentLocation);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 定义history.push方法</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">push</span> = (<span class="params">path</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="variable language_">window</span>.<span class="property">history</span>;</span><br><span class="line">    history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, path);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于push并不触发popstate，手动调用回调函数</span></span><br><span class="line">    location = &#123; <span class="attr">pathname</span>: path &#125;;</span><br><span class="line">    <span class="title class_">EventBus</span>.<span class="title function_">emit</span>(location);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">listen</span> = (<span class="params">listener</span>) =&gt; <span class="title class_">EventBus</span>.<span class="title function_">subscribe</span>(listener);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理浏览器的前进后退</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;popstate&quot;</span>, handlePop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> history = &#123;</span><br><span class="line">    location,</span><br><span class="line">    listen,</span><br><span class="line">    push,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> history;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="HashHistory"><a href="#HashHistory" class="headerlink" title="HashHistory"></a>HashHistory</h3><blockquote><ul><li>监听 hashchange</li><li>解析 hash 获取参数，比如 hash 部分是 #/a/b?c=1#/d，解析出 { hash: ‘#/d’, search: ‘?c=1’, pathname: ‘/a/b’ }</li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createHashHistory</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">EventBus</span> = <span class="title class_">EventEmitter</span>();</span><br><span class="line">  <span class="keyword">let</span> location = &#123; <span class="attr">pathname</span>: <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handlePop = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentLocation = &#123; <span class="attr">pathname</span>: <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>) &#125;;</span><br><span class="line">    <span class="title class_">EventBus</span>.<span class="title function_">emit</span>(currentLocation);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">push</span> = (<span class="params">path</span>) =&gt; (<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span> = path);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">listen</span> = (<span class="params">listener: <span class="built_in">Function</span></span>) =&gt; <span class="title class_">EventBus</span>.<span class="title function_">subscribe</span>(listener);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;hashchange&quot;</span>, handlePop);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> history = &#123;</span><br><span class="line">    location,</span><br><span class="line">    listen,</span><br><span class="line">    push,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> history;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="react-router-6"><a href="#react-router-6" class="headerlink" title="react-router@6"></a>react-router@6</h2><p><img src="/images/react/router_2.png" alt=""></p><blockquote><ul><li>v6 版本中移出了先前的 <code>&lt;Switch&gt;</code>，引入了新的替代者: <code>&lt;Routes&gt;</code></li><li><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code> 配合使用，用 <code>&lt;Routes&gt;</code> 包裹 <code>&lt;Route&gt;</code></li><li><code>&lt;Routes&gt;</code> 本质上调用 useRoutes 返回的对象， <code>&lt;Route&gt;</code> 相当于一个 case 语句，当 url 发生变化时，<code>&lt;Routes&gt;</code> 都会查看其所有子 <code>&lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件</li><li><code>withRouter</code>: HOC ，非路由组件通过 withRouter 包裹来获取 history、location、match 信息</li></ul></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>App.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 设置路由链接 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* className 接收一个函数，可以改变激活的类名 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        About</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">className</span>=<span class="string">&quot;menu-item&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Home</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* 注册路由 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 用 Routes 组件进行包裹*/&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* Route 组件的 element 属性值为对应的组件*/&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* caseSensitive 严格区分大小写*/&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;/* 调用 useRoutes()，嵌入路由映射表 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">caseSensitive</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Navigate 组件，页面渲染就显示对应组件，实现重定向效果 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/about &quot;</span> /&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;useRoutes(routes)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Home.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 传递 params 参数，在路径后面用 / 进行拼接，useParams */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>/$&#123;<span class="attr">id</span>&#125;/$&#123;<span class="attr">title</span>&#125;/$&#123;<span class="attr">content</span>&#125;`&#125;&gt;</span>&#123;m.title&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 传递 search 参数，在路径后面用 ? 进行拼接，useSearchParams */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`<span class="attr">detail</span>?<span class="attr">id</span>=<span class="string">$&#123;id&#125;&amp;title</span>=<span class="string">$&#123;title&#125;&amp;content</span>=<span class="string">$&#123;content&#125;</span>`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 传递 state 参数，添加 state 属性，值为一个对象，useLocation */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span> <span class="attr">state</span>=<span class="string">&#123;&#123;</span> <span class="attr">id</span>, <span class="attr">title</span>, <span class="attr">content</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Outlet 路由占位符，表示&quot;路由映射表&quot;中匹配的组件将在此处展示 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Routes-标签"><a href="#Routes-标签" class="headerlink" title="Routes 标签"></a>Routes 标签</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RoutesProps</span> &#123;</span><br><span class="line">  <span class="attr">children</span>?: <span class="title class_">React</span>.<span class="property">ReactNode</span>;</span><br><span class="line">  <span class="comment">// 用户传入的 location 对象，一般不传，默认用当前浏览器的 location</span></span><br><span class="line">  <span class="attr">location</span>?: <span class="title class_">Partial</span>&lt;<span class="title class_">Location</span>&gt; | <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Routes</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  children,</span></span><br><span class="line"><span class="params">  location,</span></span><br><span class="line"><span class="params">&#125;: <span class="title class_">RoutesProps</span></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="comment">// 此处调用了 useRoutes 这个 hook，并且使用了 createRoutesFromChildren 将 children 转换成了 useRoutes 所需要配置的参数格式</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useRoutes</span>(<span class="title function_">createRoutesFromChildren</span>(children), location);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部通过 React.Children.forEach 把 Route 组件给结构化，并且内部调用递归，深度递归 children 结构</span></span><br><span class="line"><span class="comment">// 把 &lt;Route&gt; 类型的 react element 对象，变成了普通的 route 对象结构。Route 本质是一个空函数，并没有实际挂载，是通过 createRoutesFromChildren 处理转化了</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRoutesFromChildren</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="title class_">ReactNode</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">RouteObject</span>[] &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 就是递归遍历 children 然后格式化后推入 routes 数组中</span></span><br><span class="line">  <span class="title class_">React</span>.<span class="property">Children</span>.<span class="title function_">forEach</span>(children, <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Ignore non-elements.</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">React</span>.<span class="title function_">isValidElement</span>(element)) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果类型为 React.Fragment 继续递归遍历</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">type</span> === <span class="title class_">React</span>.<span class="property">Fragment</span>) &#123;</span><br><span class="line">      <span class="comment">// 相当于 routes.push(...createRoutesFromChildren(element.props.children))</span></span><br><span class="line">      routes.<span class="property">push</span>.<span class="title function_">apply</span>(</span><br><span class="line">        routes,</span><br><span class="line">        <span class="title function_">createRoutesFromChildren</span>(element.<span class="property">props</span>.<span class="property">children</span>)</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">route</span>: <span class="title class_">RouteObject</span> = &#123;</span><br><span class="line">      <span class="attr">caseSensitive</span>: element.<span class="property">props</span>.<span class="property">caseSensitive</span>,</span><br><span class="line">      <span class="attr">element</span>: element.<span class="property">props</span>.<span class="property">element</span>,</span><br><span class="line">      <span class="attr">index</span>: element.<span class="property">props</span>.<span class="property">index</span>,</span><br><span class="line">      <span class="attr">path</span>: element.<span class="property">props</span>.<span class="property">path</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">props</span>.<span class="property">children</span>) &#123;</span><br><span class="line">      route.<span class="property">children</span> = <span class="title function_">createRoutesFromChildren</span>(element.<span class="property">props</span>.<span class="property">children</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    routes.<span class="title function_">push</span>(route);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> routes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useRoutes"><a href="#useRoutes" class="headerlink" title="useRoutes"></a>useRoutes</h3><blockquote><p>三个步骤: 路由上下文解析（父子路由）、路由匹配、路由渲染</p><ul><li>解析上下文: 调用 useRoutes 的地方，如果是子路由调用，合并父路由的匹配信息，生成对应的 pathname</li><li>路由匹配: 调用 matchRoutes 返回 matches 数组，找到匹配的路由分支</li><li>路由渲染: 调用 _renderMatches 方法，通过 reduceRight 来形成 react 结构 elmenet</li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useRoutes</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[],</span></span><br><span class="line"><span class="params">  <span class="attr">locationArg</span>?: <span class="title class_">Partial</span>&lt;<span class="title class_">Location</span>&gt; | <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="title function_">invariant</span>(</span><br><span class="line">    <span class="comment">// 外层需要 router 包裹，否则报错</span></span><br><span class="line">    <span class="title function_">useInRouterContext</span>(),</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> This error is probably because they somehow have 2 versions of the</span></span><br><span class="line">    <span class="comment">// router loaded. We can help them understand how to avoid that.</span></span><br><span class="line">    <span class="string">`useRoutes() may be used only in the context of a &lt;Router&gt; component.`</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">let</span> &#123; <span class="attr">matches</span>: parentMatches &#125; = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">RouteContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> routeMatch = parentMatches[parentMatches.<span class="property">length</span> - <span class="number">1</span>]; <span class="comment">// 最后的一个 route 将作为父路由，后续的 routes 都是其子路由</span></span><br><span class="line">  <span class="keyword">let</span> parentParams = routeMatch ? routeMatch.<span class="property">params</span> : &#123;&#125;; <span class="comment">// 父路由参数</span></span><br><span class="line">  <span class="comment">// 父路由完整 pathname，如果路由设置 /article/*，当前导航 /article/1，那么值为 /article/1</span></span><br><span class="line">  <span class="keyword">let</span> parentPathname = routeMatch ? routeMatch.<span class="property">pathname</span> : <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  <span class="comment">// 同上类比，看 base 命名可以看出值为 /article</span></span><br><span class="line">  <span class="keyword">let</span> parentPathnameBase = routeMatch ? routeMatch.<span class="property">pathnameBase</span> : <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> parentRoute = routeMatch &amp;&amp; routeMatch.<span class="property">route</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> locationFromContext = <span class="title function_">useLocation</span>(); <span class="comment">// 获取当前的 location 状态</span></span><br><span class="line">  <span class="keyword">let</span> location;</span><br><span class="line">  <span class="comment">// 判断是否传入 locationArg 参数，没有的话使用当前的 location</span></span><br><span class="line">  <span class="keyword">if</span> (locationArg) &#123;</span><br><span class="line">    <span class="comment">// 格式化为 Path 对象</span></span><br><span class="line">    <span class="keyword">let</span> parsedLocationArg =</span><br><span class="line">      <span class="keyword">typeof</span> locationArg === <span class="string">&quot;string&quot;</span> ? <span class="title function_">parsePath</span>(locationArg) : locationArg;</span><br><span class="line">    <span class="comment">// 如果传入了 location，判断是否与父级路由匹配（作为子路由存在）</span></span><br><span class="line">    <span class="title function_">invariant</span>(</span><br><span class="line">      parentPathnameBase === <span class="string">&quot;/&quot;</span> ||</span><br><span class="line">        parsedLocationArg.<span class="property">pathname</span>?.<span class="title function_">startsWith</span>(parentPathnameBase),</span><br><span class="line">      <span class="string">`When overriding the location using \`&lt;Routes location&gt;\` or \`useRoutes(routes, location)\`, `</span> +</span><br><span class="line">        <span class="string">`the location pathname must begin with the portion of the URL pathname that was `</span> +</span><br><span class="line">        <span class="string">`matched by all parent routes. The current pathname base is &quot;<span class="subst">$&#123;parentPathnameBase&#125;</span>&quot; `</span> +</span><br><span class="line">        <span class="string">`but pathname &quot;<span class="subst">$&#123;parsedLocationArg.pathname&#125;</span>&quot; was given in the \`location\` prop.`</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    location = parsedLocationArg;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    location = locationFromContext;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> pathname = location.<span class="property">pathname</span> || <span class="string">&quot;/&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> remainingPathname =</span><br><span class="line">    parentPathnameBase === <span class="string">&quot;/&quot;</span></span><br><span class="line">      ? pathname</span><br><span class="line">      : pathname.<span class="title function_">slice</span>(parentPathnameBase.<span class="property">length</span>) || <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过传入的 routes 配置项与当前的路径，匹配对应渲染的路由</span></span><br><span class="line">  <span class="keyword">let</span> matches = <span class="title function_">matchRoutes</span>(routes, &#123; <span class="attr">pathname</span>: remainingPathname &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用_renderMatches方法，返回的是 React.Element，渲染所有的 matches 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">__renderMatches</span>(</span><br><span class="line">    matches &amp;&amp;</span><br><span class="line">      <span class="comment">// 合并外层调用 useRoutes 得到的参数，内部的 Route 会有外层 Route（其实这也叫父 Route） 的所有匹配属性。</span></span><br><span class="line">      matches.<span class="title function_">map</span>(<span class="function">(<span class="params">match</span>) =&gt;</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, match, &#123;</span><br><span class="line">          <span class="attr">params</span>: <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, parentParams, match.<span class="property">params</span>),</span><br><span class="line">          <span class="comment">// joinPaths 函数用于合并字符串</span></span><br><span class="line">          <span class="attr">pathname</span>: <span class="title function_">joinPaths</span>([parentPathnameBase, match.<span class="property">pathname</span>]),</span><br><span class="line">          <span class="attr">pathnameBase</span>:</span><br><span class="line">            match.<span class="property">pathnameBase</span> === <span class="string">&quot;/&quot;</span></span><br><span class="line">              ? parentPathnameBase</span><br><span class="line">              : <span class="title function_">joinPaths</span>([parentPathnameBase, match.<span class="property">pathnameBase</span>]),</span><br><span class="line">        &#125;)</span><br><span class="line">      ),</span><br><span class="line">    <span class="comment">// 外层 parentMatches 部分，最后会一起加入最终 matches 参数中</span></span><br><span class="line">    parentMatches</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">matchRoutes</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">routes</span>: <span class="title class_">RouteObject</span>[],</span></span><br><span class="line"><span class="params">  <span class="attr">locationArg</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Location</span>&gt; | <span class="built_in">string</span>, <span class="comment">// 当前匹配到的 location</span></span></span><br><span class="line"><span class="params">  basename = <span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">RouteMatch</span>[] | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="comment">// 转为 path 对象</span></span><br><span class="line">  <span class="keyword">let</span> location =</span><br><span class="line">    <span class="keyword">typeof</span> locationArg === <span class="string">&quot;string&quot;</span> ? <span class="title function_">parsePath</span>(locationArg) : locationArg; <span class="comment">// 转为 path 对象</span></span><br><span class="line">  <span class="keyword">let</span> pathname = <span class="title function_">stripBasename</span>(location.<span class="property">pathname</span> || <span class="string">&quot;/&quot;</span>, basename);</span><br><span class="line">  <span class="keyword">if</span> (pathname == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> branches = <span class="title function_">flattenRoutes</span>(routes); <span class="comment">// 扁平化 routes 为一维数组，包含当前路由的权重</span></span><br><span class="line">  <span class="title function_">rankRouteBranches</span>(branches); <span class="comment">// 根据权重排序</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> matches = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 这边遍历，判断条件如果没有匹配到就继续，匹配到就结束，知道所有的全部遍历完</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; matches == <span class="literal">null</span> &amp;&amp; i &lt; branches.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">    <span class="comment">// 遍历扁平化的 routes，查看每个 branch 的路径匹配规则是否能匹配到 pathname</span></span><br><span class="line">    matches = <span class="title function_">matchRouteBranch</span>(branches[i], pathname);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> matches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_renderMatches</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="attr">matches</span>: <span class="title class_">RouteMatch</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  <span class="comment">// 如果在已有 match 的 route 内部调用，会合并父 context 的 match</span></span></span><br><span class="line"><span class="params">  <span class="attr">parentMatches</span>: <span class="title class_">RouteMatch</span>[] = []</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (matches == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 生成 outlet 组件，这边就是渲染 RouteContext.Provider 组件（嵌套关系）</span></span><br><span class="line">  <span class="keyword">return</span> matches.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">outlet, match, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 有 element 就渲染 element，如果没有则默认是 &lt;Outlet /&gt;，继续渲染内嵌的 &lt;Route /&gt;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">RouteContext.Provider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">children</span>=<span class="string">&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">match.route.element</span> !== <span class="string">undefined</span> ? <span class="attr">match.route.element</span> <span class="attr">:</span> &lt;<span class="attr">Outlet</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">        value=&#123;&#123;</span></span><br><span class="line"><span class="language-xml">          outlet,</span></span><br><span class="line"><span class="language-xml">          matches: parentMatches.concat(matches.slice(0, index + 1)),</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 最内层的 outlet 为 null，也就是最后的子路由</span></span><br><span class="line">  &#125;, <span class="literal">null</span> <span class="keyword">as</span> <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Params</span>&lt;<span class="title class_">Key</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [key <span class="keyword">in</span> <span class="title class_">Key</span>]: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">RouteMatch</span>&lt;<span class="title class_">ParamKey</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// params 参数，比如 :id 等</span></span><br><span class="line">  <span class="attr">params</span>: <span class="title class_">Params</span>&lt;<span class="title class_">ParamKey</span>&gt;;</span><br><span class="line">  <span class="attr">pathname</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// 子路由匹配之前的路径 url，这里可以把它看做是只要以 /* 结尾路径（这是父路由的路径）中 /* 之前的部分</span></span><br><span class="line">  <span class="attr">pathnameBase</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">route</span>: <span class="title class_">RouteObject</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RouteContextObject</span> &#123;</span><br><span class="line">  <span class="comment">// 一个 ReactElement，内部包含有所有子路由组成的聚合组件，其实 Outlet 组件内部就是它</span></span><br><span class="line">  <span class="attr">outlet</span>: <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 一个成功匹配到的路由数组，索引从小到大层级依次变深</span></span><br><span class="line">  <span class="attr">matches</span>: <span class="title class_">RouteMatch</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含全部匹配到的路由，官方不推荐在外直接使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RouteContext</span> = <span class="title class_">React</span>.<span class="property">createContext</span>&lt;<span class="title class_">RouteContextObject</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">outlet</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">matches</span>: [],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">RouteContext</span> <span class="keyword">as</span> UNSAFE_RouteContext &#125;;</span><br></pre></td></tr></table></figure><h3 id="Outlet"><a href="#Outlet" class="headerlink" title="Outlet"></a>Outlet</h3><blockquote><p>内部渲染 RouteContext 的 outlet 属性，本质就是用了 useOutlet</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 outlet 中传入的上下文信息</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OutletContext</span> = <span class="title class_">React</span>.<span class="property">createContext</span> &lt; <span class="built_in">unknown</span> &gt; <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在嵌套的 routes 中使用，这里的上下文信息是用户在使用 &lt;Outlet /&gt; 或者 useOutlet 时传入的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> useOutletContext&lt;<span class="title class_">Context</span> = <span class="built_in">unknown</span>&gt;(): <span class="title class_">Context</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">OutletContext</span>) <span class="keyword">as</span> <span class="title class_">Context</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useOutlet</span>(<span class="params"><span class="attr">context</span>?: <span class="built_in">unknown</span></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> outlet = <span class="title class_">React</span>.<span class="title function_">useContext</span>(<span class="title class_">RouteContext</span>).<span class="property">outlet</span>;</span><br><span class="line">  <span class="comment">// 可以看到，当 context 有值时才使用 OutletContext.Provider，如果没有值会继续沿用父路由的 OutletContext.Provider 中的值</span></span><br><span class="line">  <span class="keyword">if</span> (outlet) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">OutletContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;context&#125;</span>&gt;</span>&#123;outlet&#125;<span class="tag">&lt;/<span class="name">OutletContext.Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> outlet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">OutletProps</span> &#123;</span><br><span class="line">  <span class="comment">// 可以传入要提供给 outlet 内部元素的上下文信息</span></span><br><span class="line">  <span class="attr">context</span>?: <span class="built_in">unknown</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Outlet</span>(<span class="params"><span class="attr">props</span>: <span class="title class_">OutletProps</span></span>): <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useOutlet</span>(props.<span class="property">context</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useNavigate"><a href="#useNavigate" class="headerlink" title="useNavigate"></a>useNavigate</h3><blockquote><p>替代 history 的方案</p><ul><li>navigate 默认是 history.push</li><li>naviaget(to, { replace: true }) 等同于 history.replace\</li><li>naviaget(number) 等同于 history.go</li></ul></blockquote><h3 id="组件渲染过程总结"><a href="#组件渲染过程总结" class="headerlink" title="组件渲染过程总结"></a>组件渲染过程总结</h3><blockquote><p>BrowserRouter 举例</p></blockquote><ol><li>路由更新，触发 <code>listen</code> 事件，新城新的 <code>location</code> 对象，更新 locationContext</li><li>useRoutes 消费 <code>locationContext，locationContext</code> 的变化会重新执行 useRoutes</li><li>重新执行内部调用 <code>matchRoutes</code> 和 <code>_renderMatchers</code> 找到新的渲染分支，渲染页面</li></ol><h2 id="v5-和-v6-对比"><a href="#v5-和-v6-对比" class="headerlink" title="v5 和 v6 对比"></a>v5 和 v6 对比</h2><ol><li>组件层面: </li></ol><ul><li>v5: Router Switch Route 结构，Router -&gt; 传递状态，负责派发更新；Switch -&gt; 匹配唯一路由；Route -&gt; 真实渲染路由组件</li><li>v6: Router Routes Route 结构，Router 抽离了 context；Routes -&gt; 形成路由渲染分支，渲染路由；Route 并非渲染真实路由，而是形成路由分支结构</li></ul><ol><li>使用层面: </li></ol><ul><li>v5: 嵌套路由，配置二级路由，需要写在具体的业务组件中</li><li>v6: 在外层统一配置路由结构，结构更清晰，通过 Outlet 来实现子路由的渲染，一定程度上类似于 vue 中的 view-router。搭配新的 api</li></ul><ol><li>原理层面: </li></ol><ul><li>v5: 本质在于 Route 组件，当路由上下文 context 改变的时候，Route 组件重新渲染，然后通过匹配来确定业务组件是否渲染</li><li>v6: 本质在于 Routes 组件，当 location 上下文改变的时候，Routes 重新渲染，重新形成渲染分支，然后通过 provider 方式逐层传递 Outlet，进行匹配渲染</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 简介</title>
      <link href="/articles/react/introduce/"/>
      <url>/articles/react/introduce/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>用于构建用户界面的 JavaScript 库，组件化 + 声明式，提升开发效率及复用率</p><ul><li><code>JSX</code>: 描述 UI <a href="https://zh-hans.react.dev/learn/javascript-in-jsx-with-curly-braces">(官方文档)</a></li><li><code>@babel/preset-react</code>: JSX =&gt; React.creactElement(tagName, props, children)</li><li><code>React.createElement</code>: JS 对象 =&gt; VDom</li><li><code>ReactDom</code>: 渲染真实 Dom，VDom =&gt; Dom</li><li><img src="/images/react/introduce_1.png" alt=""></li></ul></blockquote><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="function-组件"><a href="#function-组件" class="headerlink" title="function 组件"></a>function 组件</h3><blockquote><p>无状态组件，从 v16.8 引入 hooks 之后拥有状态</p></blockquote><h3 id="联系及区别"><a href="#联系及区别" class="headerlink" title="联系及区别"></a>联系及区别</h3><ol><li>相同点: 组件是 React 可复用的最小编码单位，均会返回要在页面中渲染的 React 元素。除少数极端场景外，两者基本一致</li><li>不同点: <ul><li>侧重点: 类组件基于面向对象，主打继承、生命周期等概念；函数组件基于函数式编程，主打 immutable、无副作用、引用透明等特点</li><li>性能: 类组件 shouldComponentUpdate 阻断渲染来提升性能；函数组件依靠 React.memo 缓存渲染结果来提升性能</li><li>可维护性: 由于生命周期带来的复杂度，类组件并不易于优化。函数组件轻量简单，Hooks 更细粒度的逻辑组织与复用，更能适应 React 的未来发展</li></ul></li></ol><h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><blockquote><ul><li>只能在函数最外层调用 Hook ，不要在循环、条件判断或者子函数中调⽤</li><li>只能在 React 的函数组件中或⾃定义的 Hook 中 调用 Hook</li></ul></blockquote><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ol><li>State Hook: 状态帮助组件记住用户 <code>输入</code> 的信息<ul><li>使用 <code>useState</code> 声明可以直接更新的状态变量</li><li>使用 <code>useReducer</code> 在 reducer 函数中声明带有更新逻辑的 state 变量</li></ul></li><li>Context Hook: 上下文帮助组件 <code>从祖先组件接收信息，而无需将其作为 props 传递</code><ul><li>使用 <code>useContext</code> 读取订阅上下文</li></ul></li><li>Ref Hook: ref 允许组件 <code>保存一些不用于渲染的信息</code>，比如 DOM 节点或 timeout ID。更新 ref 不会重新渲染组件，<code>escape hatch</code> 机制。常搭配非 React 系统如浏览器内置 API 一同工作<ul><li>使用 <code>useRef</code> 声明 ref，可以在其中保存任何值，最常用于保存 DOM 节点</li><li>使用 <code>useImperativeHandle</code> 自定义从组件中暴露的 ref</li></ul></li><li>Effect Hook: Effect 允许组件 <code>连接到外部系统并与之同步</code>，比如处理网络、浏览器、DOM、动画、使用不同 UI 库编写的小部件以及其他非 React 代码。避免使用 Effect 协调应用程序的数据流。如果不需要与外部系统交互，那么可能不需要 Effect<ul><li>使用 <code>useEffect</code> 将组件连接到外部系统</li><li><code>useLayoutEffect</code> 在浏览器重新绘制屏幕前执行，可以在此处测量布局</li><li><code>useInsertionEffect</code> 在 React 对 DOM 进行更改之前触发，可以在此处插入动态 CSS</li></ul></li><li>性能 Hook: 跳过不必要的工作，或者有时由于屏幕确实需要更新，无法跳过重新渲染。此时可以通过将必须同步的阻塞更新与不需要阻塞用户界面的非阻塞更新分离以提高性能<ul><li>使用 <code>useMemo</code> 缓存计算代价昂贵的计算结果</li><li>使用 <code>useCallback</code> 将函数传递给优化组件之前缓存函数定义</li><li><code>useTransition</code> 允许将状态转换标记为非阻塞，并允许其他更新中断它</li><li><code>useDeferredValue</code> 允许延迟更新 UI 的非关键部分，以让其他部分先更新</li></ul></li></ol><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><ol><li>传递对象: 批处理。对相同对象的多次处理会合并成一个，并渲染最后一次处理的结果<blockquote><p>&lt; v18</p><ul><li>合成事件和生命周期方法中: 异步；setTimeout 或者原生事件处理函数中: 同步，不会批处理</li><li>useState 的更新是批处理的，而类组件的 setState 在合成事件中是批处理的，但在其他情况下可能不是</li></ul><p>v18+</p><ul><li>引入并发模式: createRoot，默认启用批处理，包括 Promise、setTimeout 等</li><li>在并发模式下，允许中断低优先级更新，确保高优先级交互更流畅，应避免依赖状态更新的即时性，始终通过 useEffect 或回调函数处理副作用</li><li>并发模式下，useState 和类组件的 setState 都会自动批处理</li><li>flushSync 强制同步更新，立即获取状态</li></ul></blockquote></li><li>传递函数: 链式调用。多个函数会放入队列并依次执行，从而可以获取实时状态</li></ol><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><p><img src="/images/react/introduce_6.png" alt=""></p><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><blockquote><ul><li>利用 memoization 技术缓存结果，它仅会在某个依赖项改变时才重新计算 memoized 值</li><li>使用 <code>Object.is</code> 将每个依赖项与其之前的值进行比较</li></ul></blockquote><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><blockquote><p>使用场景: 子组件某个事件触发依赖调用父组件的方法进行计算，这种场景通常是父组件通过 props 将函数传给子组件，但是这样会有个问题，父组件 state 发生改变，会导致子组件重新渲染，使用 useCallback 可以避免子组件的重复渲染</p><ul><li>如果子组件为 class 组件，则要继承 <code>PureComponent</code></li><li>如果子组件是 function 组件，则要使用 <code>useMemo</code> 缓存子组件</li></ul></blockquote><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">UseReducerUsage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;ADD&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(counter, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;state&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;ADD&quot; &#125;)&#125;&gt;ADD<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h4><blockquote><p>实现一个能够实时获取最新值的 hook</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">useSyncState</span>: <span class="built_in">any</span> = <span class="function">(<span class="params"><span class="attr">state</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">cbRef</span>: &#123; <span class="attr">current</span>: <span class="built_in">any</span> &#125; = <span class="title function_">useRef</span>();</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(state);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cbRef.<span class="property">current</span> &amp;&amp; cbRef.<span class="title function_">current</span>(data);</span><br><span class="line">  &#125;, [data]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    data,</span><br><span class="line">    <span class="function">(<span class="params"><span class="attr">val</span>: <span class="built_in">any</span>, <span class="attr">callback</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      cbRef.<span class="property">current</span> = callback;</span><br><span class="line">      <span class="title function_">setData</span>(val);</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useSyncState;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">const</span> [data, setData] = <span class="title function_">useSyncState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setData</span>(<span class="number">1</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是最新的值: &quot;</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>v16.4 之前的生命周期不做演示</p></blockquote><p><img src="/images/react/introduce_2.png" alt=""></p><p>v16.4 新增的生命周期</p><blockquote><p>getDerivedStateFromProps(props, state)</p><ul><li>render 之前调用，并且在初始挂载及后续更新时都会被调用</li><li>返回⼀个对象来更新 state，如果返回 null 则不更新 state，但 render 还是会执行</li></ul><p>getSnapshotBeforeUpdate</p><ul><li>render 之后，componentDidUpdate 之前</li><li>返回值将作为参数传递给 componentDidUpdate(prevProps, prevState, snapshot)</li></ul></blockquote><p>v17 废弃的三个生命周期函数用 getDerivedStateFromProps 替代</p><blockquote><p>componentWillMount、componentWillReceiveProps、componentWillUpdate: 使用这些生命周期的代码将更有可能在未来的 React 版本中存在缺陷，特别是一旦启用了异步渲染</p></blockquote><h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><h3 id="中心化状态管理"><a href="#中心化状态管理" class="headerlink" title="中心化状态管理"></a>中心化状态管理</h3><blockquote><p>强调应用状态的中心化存储和管理，以及明确的数据流</p><ul><li><code>Redux / Redux Toolkit</code>: 通过 action-reducer 模式来管理状态的变更。纯函数 reducer 保证能识别新旧 state 状态变化</li><li><code>easy-peasy</code>: 在 Redux 之上构建，提供更简单的 API</li><li><code>react-redux</code>: Provider 为后代组件提供 store，connect 为组件提供数据和变更方法</li><li><img src="/images/react/introduce_3.png" alt=""></li></ul></blockquote><h3 id="响应式状态管理"><a href="#响应式状态管理" class="headerlink" title="响应式状态管理"></a>响应式状态管理</h3><blockquote><p>调响应式和自动的状态更新机制，通常采用观察者模式</p><ul><li><code>MobX / mobx-state-tree</code>: 基于响应式和可观察状态的自动管理</li></ul></blockquote><h3 id="原子化或声明式状态管理"><a href="#原子化或声明式状态管理" class="headerlink" title="原子化或声明式状态管理"></a>原子化或声明式状态管理</h3><blockquote><p>将状态分解为更小的、可组合的单位，允许直接的读写操作和声明式的依赖管理</p><ul><li><code>Recoil</code>: 使用原子和选择器来管理状态，支持并行和异步操作</li><li><code>jotai</code>: 类似于 Recoil，提供了更简洁的 API 和概念</li></ul></blockquote><h4 id="Recoil-简介"><a href="#Recoil-简介" class="headerlink" title="Recoil 简介"></a>Recoil 简介</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><blockquote><p>使用 Recoil 的组件需要使用 <code>RecoilRoot</code> 组件包裹</p></blockquote><h5 id="定义状态"><a href="#定义状态" class="headerlink" title="定义状态"></a>定义状态</h5><blockquote><p>Atom 是一种新的状态，和传统的 state 不同，可以被任何组件订阅，当一个 Atom 被更新时，每个被订阅的组件都会用新的值来重新渲染</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> orgState = <span class="title function_">atom</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;orgState&quot;</span>,</span><br><span class="line">  <span class="attr">default</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="订阅和更新状态"><a href="#订阅和更新状态" class="headerlink" title="订阅和更新状态"></a>订阅和更新状态</h5><blockquote><ul><li><code>useRecoilState</code>: 类似 useState 的一个 Hook，可以取到 atom 的值以及 setter 函数</li><li><code>useSetRecoilState</code>: 只获取 setter 函数，如果只使用了这个函数，状态变化不会导致组件重新渲染</li><li><code>useRecoilValue</code>: 只获取状态</li></ul></blockquote><h5 id="派生状态"><a href="#派生状态" class="headerlink" title="派生状态"></a>派生状态</h5><blockquote><p>selector 表示一段派生状态，建立依赖于其他 atom 的状态。它有一个强制性的 get 函数，其作用与 redux 的 reselect， MobX 的 @computed, vue 的 computed 相似</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> depState = <span class="title function_">selector</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;depState&quot;</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="function">(<span class="params">&#123; get &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="title function_">get</span>(orgState);</span><br><span class="line">    <span class="keyword">return</span> dep;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="title function_">useRecoilValue</span>(depState);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>dep: &#123;dep&#125;<span class="tag">&lt;/&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="异步状态"><a href="#异步状态" class="headerlink" title="异步状态"></a>异步状态</h5><blockquote><p>选择器 get 回调中返回 Promise ，而不是返回值本身</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">selector</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;userName&quot;</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="title function_">async</span> (&#123; get &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">userID</span>: <span class="title function_">get</span>(userIDState),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">name</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CurrentUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> userName = <span class="title function_">useRecoilValue</span>(userInfo);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;userName&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="状态机和状态管理模式"><a href="#状态机和状态管理模式" class="headerlink" title="状态机和状态管理模式"></a>状态机和状态管理模式</h3><blockquote><p>状态机（FSM）和状态图（Statecharts）的概念来管理状态的复杂逻辑和转换</p><ul><li><code>XState</code>: 提供了有限状态机和状态图的实现，适用于复杂状态逻辑的管理</li></ul></blockquote><h3 id="轻量级和灵活的状态管理"><a href="#轻量级和灵活的状态管理" class="headerlink" title="轻量级和灵活的状态管理"></a>轻量级和灵活的状态管理</h3><blockquote><p>提供了简单直接的状态管理功能，不强制采用特定的架构模式</p><ul><li><code>Zustand</code>: 提供了简单、轻量级的状态管理，可以用于中心化或非中心化的数据流</li></ul></blockquote><h3 id="React-自带的状态管理工具"><a href="#React-自带的状态管理工具" class="headerlink" title="React 自带的状态管理工具"></a>React 自带的状态管理工具</h3><blockquote><p>框架本身提供的状态管理机制，适合轻量级的状态管理需求</p><ul><li><code>useState / useReducer</code>: React 内置的 Hooks，用于组件内部状态管理</li><li><code>useContext + useReducer</code>: 组合使用这两个 Hooks 可以实现跨组件的状态共享，类似于 Redux</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
